# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AppDiscoveryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_app_profile(self, app_profile, **kwargs):  # noqa: E501
        """Adds a new app profile  # noqa: E501

        Adds a new app profile   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_app_profile(app_profile, async=True)
        >>> result = thread.get()

        :param async bool
        :param AppProfile app_profile: (required)
        :return: AppProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_app_profile_with_http_info(app_profile, **kwargs)  # noqa: E501
        else:
            (data) = self.add_app_profile_with_http_info(app_profile, **kwargs)  # noqa: E501
            return data

    def add_app_profile_with_http_info(self, app_profile, **kwargs):  # noqa: E501
        """Adds a new app profile  # noqa: E501

        Adds a new app profile   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_app_profile_with_http_info(app_profile, async=True)
        >>> result = thread.get()

        :param async bool
        :param AppProfile app_profile: (required)
        :return: AppProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_profile']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_app_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_profile' is set
        if ('app_profile' not in params or
                params['app_profile'] is None):
            raise ValueError("Missing the required parameter `app_profile` when calling `add_app_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'app_profile' in params:
            body_params = params['app_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/app-profiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppProfile',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_app_discovery_session(self, session_id, **kwargs):  # noqa: E501
        """Cancel and delete the application discovery session  # noqa: E501

        Cancel and delete the application discovery session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_app_discovery_session(session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_app_discovery_session_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_app_discovery_session_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def delete_app_discovery_session_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Cancel and delete the application discovery session  # noqa: E501

        Cancel and delete the application discovery session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_app_discovery_session_with_http_info(session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_app_discovery_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `delete_app_discovery_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/sessions/{session-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_app_profile(self, app_profile_id, **kwargs):  # noqa: E501
        """Delete App Profile  # noqa: E501

        Deletes the specified AppProfile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_app_profile(app_profile_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_profile_id: (required)
        :param bool force: Force delete the resource even if it is being used somewhere 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_app_profile_with_http_info(app_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_app_profile_with_http_info(app_profile_id, **kwargs)  # noqa: E501
            return data

    def delete_app_profile_with_http_info(self, app_profile_id, **kwargs):  # noqa: E501
        """Delete App Profile  # noqa: E501

        Deletes the specified AppProfile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_app_profile_with_http_info(app_profile_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_profile_id: (required)
        :param bool force: Force delete the resource even if it is being used somewhere 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_profile_id', 'force']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_app_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_profile_id' is set
        if ('app_profile_id' not in params or
                params['app_profile_id'] is None):
            raise ValueError("Missing the required parameter `app_profile_id` when calling `delete_app_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_profile_id' in params:
            path_params['app-profile-id'] = params['app_profile_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/app-profiles/{app-profile-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_app_discovery_session(self, session_id, **kwargs):  # noqa: E501
        """Returns the status of the application discovery session and other details  # noqa: E501

        Returns the status of the application discovery session and other details   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_discovery_session(session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :return: AppDiscoverySession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_app_discovery_session_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_app_discovery_session_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def get_app_discovery_session_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Returns the status of the application discovery session and other details  # noqa: E501

        Returns the status of the application discovery session and other details   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_discovery_session_with_http_info(session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :return: AppDiscoverySession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_discovery_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_app_discovery_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/sessions/{session-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppDiscoverySession',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_app_discovery_session_app_profiles(self, session_id, **kwargs):  # noqa: E501
        """application profiles in this application discovery session  # noqa: E501

        Returns the application profiles that was part of the application discovery session | while it was started.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_discovery_session_app_profiles(session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AppProfileListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_app_discovery_session_app_profiles_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_app_discovery_session_app_profiles_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def get_app_discovery_session_app_profiles_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """application profiles in this application discovery session  # noqa: E501

        Returns the application profiles that was part of the application discovery session | while it was started.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_discovery_session_app_profiles_with_http_info(session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AppProfileListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_discovery_session_app_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_app_discovery_session_app_profiles`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_app_discovery_session_app_profiles`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_app_discovery_session_app_profiles`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/sessions/{session-id}/app-profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppProfileListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_app_discovery_session_installed_apps(self, session_id, **kwargs):  # noqa: E501
        """Returns the details of the installed apps for the app profile ID in that session  # noqa: E501

        Returns the details of the installed apps for the app profile ID in that session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_discovery_session_installed_apps(session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :param str app_profile_id:
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str vm_id:
        :return: AppInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_app_discovery_session_installed_apps_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_app_discovery_session_installed_apps_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def get_app_discovery_session_installed_apps_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Returns the details of the installed apps for the app profile ID in that session  # noqa: E501

        Returns the details of the installed apps for the app profile ID in that session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_discovery_session_installed_apps_with_http_info(session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :param str app_profile_id:
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str vm_id:
        :return: AppInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'app_profile_id', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by', 'vm_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_discovery_session_installed_apps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_app_discovery_session_installed_apps`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_app_discovery_session_installed_apps`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_app_discovery_session_installed_apps`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501

        query_params = []
        if 'app_profile_id' in params:
            query_params.append(('app_profile_id', params['app_profile_id']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'vm_id' in params:
            query_params.append(('vm_id', params['vm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/sessions/{session-id}/installed-apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppInfoListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_app_discovery_session_ns_group_members(self, session_id, ns_group_id, **kwargs):  # noqa: E501
        """vms in the ns-group of the application discovery session  # noqa: E501

        Returns the vms in the ns-group of the application discovery session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_discovery_session_ns_group_members(session_id, ns_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :param str ns_group_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AppDiscoveryVmInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_app_discovery_session_ns_group_members_with_http_info(session_id, ns_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_app_discovery_session_ns_group_members_with_http_info(session_id, ns_group_id, **kwargs)  # noqa: E501
            return data

    def get_app_discovery_session_ns_group_members_with_http_info(self, session_id, ns_group_id, **kwargs):  # noqa: E501
        """vms in the ns-group of the application discovery session  # noqa: E501

        Returns the vms in the ns-group of the application discovery session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_discovery_session_ns_group_members_with_http_info(session_id, ns_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :param str ns_group_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AppDiscoveryVmInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'ns_group_id', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_discovery_session_ns_group_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_app_discovery_session_ns_group_members`")  # noqa: E501
        # verify the required parameter 'ns_group_id' is set
        if ('ns_group_id' not in params or
                params['ns_group_id'] is None):
            raise ValueError("Missing the required parameter `ns_group_id` when calling `get_app_discovery_session_ns_group_members`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_app_discovery_session_ns_group_members`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_app_discovery_session_ns_group_members`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501
        if 'ns_group_id' in params:
            path_params['ns-group-id'] = params['ns_group_id']  # noqa: E501

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/sessions/{session-id}/ns-groups/{ns-group-id}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppDiscoveryVmInfoListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_app_discovery_session_ns_groups(self, session_id, **kwargs):  # noqa: E501
        """ns-groups in this application discovery session  # noqa: E501

        Returns the ns groups that was part of the application discovery session | while it was started   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_discovery_session_ns_groups(session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: NSGroupMetaInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_app_discovery_session_ns_groups_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_app_discovery_session_ns_groups_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def get_app_discovery_session_ns_groups_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """ns-groups in this application discovery session  # noqa: E501

        Returns the ns groups that was part of the application discovery session | while it was started   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_discovery_session_ns_groups_with_http_info(session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: NSGroupMetaInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_discovery_session_ns_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_app_discovery_session_ns_groups`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_app_discovery_session_ns_groups`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_app_discovery_session_ns_groups`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/sessions/{session-id}/ns-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NSGroupMetaInfoListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_app_discovery_session_summary(self, session_id, **kwargs):  # noqa: E501
        """Returns the summary of the application discovery session  # noqa: E501

        Returns the summary of the application discovery session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_discovery_session_summary(session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :return: AppDiscoverySessionResultSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_app_discovery_session_summary_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_app_discovery_session_summary_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def get_app_discovery_session_summary_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Returns the summary of the application discovery session  # noqa: E501

        Returns the summary of the application discovery session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_discovery_session_summary_with_http_info(session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :return: AppDiscoverySessionResultSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_discovery_session_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_app_discovery_session_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/sessions/{session-id}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppDiscoverySessionResultSummary',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_app_discovery_sessions(self, **kwargs):  # noqa: E501
        """Returns the list of the application discovery sessions available  # noqa: E501

        Returns the list of the application discovery sessions available   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_discovery_sessions(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str group_id: NSGroup id, helps user query sessions related to one nsgroup
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str status: Session Status, e.g. get all running sessions
        :return: AppDiscoverySessionsListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_app_discovery_sessions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_app_discovery_sessions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_app_discovery_sessions_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the list of the application discovery sessions available  # noqa: E501

        Returns the list of the application discovery sessions available   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_discovery_sessions_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str group_id: NSGroup id, helps user query sessions related to one nsgroup
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str status: Session Status, e.g. get all running sessions
        :return: AppDiscoverySessionsListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'group_id', 'included_fields', 'page_size', 'sort_ascending', 'sort_by', 'status']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_discovery_sessions" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_app_discovery_sessions`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_app_discovery_sessions`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/sessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppDiscoverySessionsListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_app_profile_details(self, app_profile_id, **kwargs):  # noqa: E501
        """Returns detail of the app profile  # noqa: E501

        Returns detail of the app profile   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_profile_details(app_profile_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_profile_id: (required)
        :return: AppProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_app_profile_details_with_http_info(app_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_app_profile_details_with_http_info(app_profile_id, **kwargs)  # noqa: E501
            return data

    def get_app_profile_details_with_http_info(self, app_profile_id, **kwargs):  # noqa: E501
        """Returns detail of the app profile  # noqa: E501

        Returns detail of the app profile   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_profile_details_with_http_info(app_profile_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_profile_id: (required)
        :return: AppProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_profile_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_profile_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_profile_id' is set
        if ('app_profile_id' not in params or
                params['app_profile_id'] is None):
            raise ValueError("Missing the required parameter `app_profile_id` when calling `get_app_profile_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_profile_id' in params:
            path_params['app-profile-id'] = params['app_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/app-profiles/{app-profile-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppProfile',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_app_profiles(self, **kwargs):  # noqa: E501
        """Returns list of app profile IDs created  # noqa: E501

        Returns list of app profile IDs created   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_profiles(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AppProfileListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_app_profiles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_app_profiles_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_app_profiles_with_http_info(self, **kwargs):  # noqa: E501
        """Returns list of app profile IDs created  # noqa: E501

        Returns list of app profile IDs created   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_app_profiles_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AppProfileListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_app_profiles`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_app_profiles`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/app-profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppProfileListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv(self, session_id, report_app_results_for_vms_request_parameters, **kwargs):  # noqa: E501
        """Export app discovery results in CSV format  # noqa: E501

        Returns app discovery results in CSV format, each row contains discovered app information and the id of the vms this app is discovered from for a given set of vms (or for all vms belong to this session when no vm id is passed in)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv(session_id, report_app_results_for_vms_request_parameters, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :param ReportAppResultsForVmsRequestParameters report_app_results_for_vms_request_parameters: (required)
        :return: AppInfoHostVmListInCsvFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv_with_http_info(session_id, report_app_results_for_vms_request_parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv_with_http_info(session_id, report_app_results_for_vms_request_parameters, **kwargs)  # noqa: E501
            return data

    def get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv_with_http_info(self, session_id, report_app_results_for_vms_request_parameters, **kwargs):  # noqa: E501
        """Export app discovery results in CSV format  # noqa: E501

        Returns app discovery results in CSV format, each row contains discovered app information and the id of the vms this app is discovered from for a given set of vms (or for all vms belong to this session when no vm id is passed in)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv_with_http_info(session_id, report_app_results_for_vms_request_parameters, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :param ReportAppResultsForVmsRequestParameters report_app_results_for_vms_request_parameters: (required)
        :return: AppInfoHostVmListInCsvFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'report_app_results_for_vms_request_parameters']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv`")  # noqa: E501
        # verify the required parameter 'report_app_results_for_vms_request_parameters' is set
        if ('report_app_results_for_vms_request_parameters' not in params or
                params['report_app_results_for_vms_request_parameters'] is None):
            raise ValueError("Missing the required parameter `report_app_results_for_vms_request_parameters` when calling `get_appdiscovery_result_app_info_and_host_vm_in_csv_format_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'report_app_results_for_vms_request_parameters' in params:
            body_params = params['report_app_results_for_vms_request_parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/sessions/{session-id}/report/app-info-and-vm?format=csv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppInfoHostVmListInCsvFormat',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_appdiscovery_session_app_profile_member_apps_in_csv_format_csv(self, session_id, **kwargs):  # noqa: E501
        """Export app profiles in CSV format for a given sessiom  # noqa: E501

        Returns app profiles information for a given session in CSV format Each row will contain detailed info of an app profile, and the id of apps which is member of this app profile in this session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_appdiscovery_session_app_profile_member_apps_in_csv_format_csv(session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :return: AppProfileMemberAppsListInCsvFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_appdiscovery_session_app_profile_member_apps_in_csv_format_csv_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_appdiscovery_session_app_profile_member_apps_in_csv_format_csv_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def get_appdiscovery_session_app_profile_member_apps_in_csv_format_csv_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Export app profiles in CSV format for a given sessiom  # noqa: E501

        Returns app profiles information for a given session in CSV format Each row will contain detailed info of an app profile, and the id of apps which is member of this app profile in this session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_appdiscovery_session_app_profile_member_apps_in_csv_format_csv_with_http_info(session_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :return: AppProfileMemberAppsListInCsvFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_appdiscovery_session_app_profile_member_apps_in_csv_format_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_appdiscovery_session_app_profile_member_apps_in_csv_format_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/sessions/{session-id}/report/app-profile-and-app-info?format=csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppProfileMemberAppsListInCsvFormat',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reclassify_app_discovery_session(self, session_id, session_reclassification_parameter, **kwargs):  # noqa: E501
        """Re-classify a completed application discovery session.  # noqa: E501

        Re-classify completed application discovery session against input  AppProfiles. If no AppProfiles are specified then we use the previous  AppProfiles of that session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reclassify_app_discovery_session(session_id, session_reclassification_parameter, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :param SessionReclassificationParameter session_reclassification_parameter: (required)
        :return: AppDiscoverySessionResultSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reclassify_app_discovery_session_with_http_info(session_id, session_reclassification_parameter, **kwargs)  # noqa: E501
        else:
            (data) = self.reclassify_app_discovery_session_with_http_info(session_id, session_reclassification_parameter, **kwargs)  # noqa: E501
            return data

    def reclassify_app_discovery_session_with_http_info(self, session_id, session_reclassification_parameter, **kwargs):  # noqa: E501
        """Re-classify a completed application discovery session.  # noqa: E501

        Re-classify completed application discovery session against input  AppProfiles. If no AppProfiles are specified then we use the previous  AppProfiles of that session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reclassify_app_discovery_session_with_http_info(session_id, session_reclassification_parameter, async=True)
        >>> result = thread.get()

        :param async bool
        :param str session_id: (required)
        :param SessionReclassificationParameter session_reclassification_parameter: (required)
        :return: AppDiscoverySessionResultSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'session_reclassification_parameter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reclassify_app_discovery_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `reclassify_app_discovery_session`")  # noqa: E501
        # verify the required parameter 'session_reclassification_parameter' is set
        if ('session_reclassification_parameter' not in params or
                params['session_reclassification_parameter'] is None):
            raise ValueError("Missing the required parameter `session_reclassification_parameter` when calling `reclassify_app_discovery_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'session_reclassification_parameter' in params:
            body_params = params['session_reclassification_parameter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/sessions/{session-id}/re-classify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppDiscoverySessionResultSummary',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_app_discovery_session(self, start_app_discovery_session_parameters, **kwargs):  # noqa: E501
        """Starts the discovery of application discovery session  # noqa: E501

        Starts the discovery of application discovery session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_app_discovery_session(start_app_discovery_session_parameters, async=True)
        >>> result = thread.get()

        :param async bool
        :param StartAppDiscoverySessionParameters start_app_discovery_session_parameters: (required)
        :return: AppDiscoverySession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.start_app_discovery_session_with_http_info(start_app_discovery_session_parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.start_app_discovery_session_with_http_info(start_app_discovery_session_parameters, **kwargs)  # noqa: E501
            return data

    def start_app_discovery_session_with_http_info(self, start_app_discovery_session_parameters, **kwargs):  # noqa: E501
        """Starts the discovery of application discovery session  # noqa: E501

        Starts the discovery of application discovery session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_app_discovery_session_with_http_info(start_app_discovery_session_parameters, async=True)
        >>> result = thread.get()

        :param async bool
        :param StartAppDiscoverySessionParameters start_app_discovery_session_parameters: (required)
        :return: AppDiscoverySession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_app_discovery_session_parameters']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_app_discovery_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_app_discovery_session_parameters' is set
        if ('start_app_discovery_session_parameters' not in params or
                params['start_app_discovery_session_parameters'] is None):
            raise ValueError("Missing the required parameter `start_app_discovery_session_parameters` when calling `start_app_discovery_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'start_app_discovery_session_parameters' in params:
            body_params = params['start_app_discovery_session_parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/sessions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppDiscoverySession',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_app_profile(self, app_profile_id, app_profile, **kwargs):  # noqa: E501
        """Update AppProfile  # noqa: E501

        Update AppProfile   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_app_profile(app_profile_id, app_profile, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_profile_id: (required)
        :param AppProfile app_profile: (required)
        :return: AppProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_app_profile_with_http_info(app_profile_id, app_profile, **kwargs)  # noqa: E501
        else:
            (data) = self.update_app_profile_with_http_info(app_profile_id, app_profile, **kwargs)  # noqa: E501
            return data

    def update_app_profile_with_http_info(self, app_profile_id, app_profile, **kwargs):  # noqa: E501
        """Update AppProfile  # noqa: E501

        Update AppProfile   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_app_profile_with_http_info(app_profile_id, app_profile, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_profile_id: (required)
        :param AppProfile app_profile: (required)
        :return: AppProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_profile_id', 'app_profile']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_app_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_profile_id' is set
        if ('app_profile_id' not in params or
                params['app_profile_id'] is None):
            raise ValueError("Missing the required parameter `app_profile_id` when calling `update_app_profile`")  # noqa: E501
        # verify the required parameter 'app_profile' is set
        if ('app_profile' not in params or
                params['app_profile'] is None):
            raise ValueError("Missing the required parameter `app_profile` when calling `update_app_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_profile_id' in params:
            path_params['app-profile-id'] = params['app_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'app_profile' in params:
            body_params = params['app_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app-discovery/app-profiles/{app-profile-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppProfile',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
