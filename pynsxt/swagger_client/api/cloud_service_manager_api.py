# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CloudServiceManagerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def aws_account_info(self, account_id, **kwargs):  # noqa: E501
        """Returns the details of the particular AWS account  # noqa: E501

        Returns the details of the particular AWS account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.aws_account_info(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of AWS account (required)
        :return: AwsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.aws_account_info_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.aws_account_info_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def aws_account_info_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Returns the details of the particular AWS account  # noqa: E501

        Returns the details of the particular AWS account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.aws_account_info_with_http_info(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of AWS account (required)
        :return: AwsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_account_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `aws_account_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/accounts/{account-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsAccount',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_region_info(self, region_id, **kwargs):  # noqa: E501
        """Returns information about the particual Aws Region  # noqa: E501

        Returns information about the particual Aws Region  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.aws_region_info(region_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_id: ID of the region (required)
        :return: AwsRegion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.aws_region_info_with_http_info(region_id, **kwargs)  # noqa: E501
        else:
            (data) = self.aws_region_info_with_http_info(region_id, **kwargs)  # noqa: E501
            return data

    def aws_region_info_with_http_info(self, region_id, **kwargs):  # noqa: E501
        """Returns information about the particual Aws Region  # noqa: E501

        Returns information about the particual Aws Region  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.aws_region_info_with_http_info(region_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_id: ID of the region (required)
        :return: AwsRegion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_region_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_id' is set
        if ('region_id' not in params or
                params['region_id'] is None):
            raise ValueError("Missing the required parameter `region_id` when calling `aws_region_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_id' in params:
            path_params['region-id'] = params['region_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/regions/{region-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsRegion',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_vpc_info(self, vpc_id, **kwargs):  # noqa: E501
        """Returns Vpc information  # noqa: E501

        Returns Vpc information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.aws_vpc_info(vpc_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vpc_id: ID of the Vpc (required)
        :return: AwsVpc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.aws_vpc_info_with_http_info(vpc_id, **kwargs)  # noqa: E501
        else:
            (data) = self.aws_vpc_info_with_http_info(vpc_id, **kwargs)  # noqa: E501
            return data

    def aws_vpc_info_with_http_info(self, vpc_id, **kwargs):  # noqa: E501
        """Returns Vpc information  # noqa: E501

        Returns Vpc information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.aws_vpc_info_with_http_info(vpc_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vpc_id: ID of the Vpc (required)
        :return: AwsVpc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vpc_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_vpc_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vpc_id' is set
        if ('vpc_id' not in params or
                params['vpc_id'] is None):
            raise ValueError("Missing the required parameter `vpc_id` when calling `aws_vpc_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vpc_id' in params:
            path_params['vpc-id'] = params['vpc_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/vpcs/{vpc-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsVpc',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloud_virtual_machine_info(self, virtual_machine_id, **kwargs):  # noqa: E501
        """Returns information about the particular virtual machine  # noqa: E501

        Returns information about the particular virtual machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloud_virtual_machine_info(virtual_machine_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str virtual_machine_id: ID of the virtual machine (required)
        :return: CloudVirtualMachine
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cloud_virtual_machine_info_with_http_info(virtual_machine_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cloud_virtual_machine_info_with_http_info(virtual_machine_id, **kwargs)  # noqa: E501
            return data

    def cloud_virtual_machine_info_with_http_info(self, virtual_machine_id, **kwargs):  # noqa: E501
        """Returns information about the particular virtual machine  # noqa: E501

        Returns information about the particular virtual machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloud_virtual_machine_info_with_http_info(virtual_machine_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str virtual_machine_id: ID of the virtual machine (required)
        :return: CloudVirtualMachine
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['virtual_machine_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloud_virtual_machine_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'virtual_machine_id' is set
        if ('virtual_machine_id' not in params or
                params['virtual_machine_id'] is None):
            raise ValueError("Missing the required parameter `virtual_machine_id` when calling `cloud_virtual_machine_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'virtual_machine_id' in params:
            path_params['virtual-machine-id'] = params['virtual_machine_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/virtual-machines/{virtual-machine-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudVirtualMachine',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_aws_account(self, aws_account, **kwargs):  # noqa: E501
        """Add a AWS account to cloud serivce manager  # noqa: E501

        Add a AWS account to cloud serivce manager  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_aws_account(aws_account, async=True)
        >>> result = thread.get()

        :param async bool
        :param AwsAccount aws_account: (required)
        :return: AwsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_aws_account_with_http_info(aws_account, **kwargs)  # noqa: E501
        else:
            (data) = self.create_aws_account_with_http_info(aws_account, **kwargs)  # noqa: E501
            return data

    def create_aws_account_with_http_info(self, aws_account, **kwargs):  # noqa: E501
        """Add a AWS account to cloud serivce manager  # noqa: E501

        Add a AWS account to cloud serivce manager  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_aws_account_with_http_info(aws_account, async=True)
        >>> result = thread.get()

        :param async bool
        :param AwsAccount aws_account: (required)
        :return: AwsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aws_account']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_aws_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aws_account' is set
        if ('aws_account' not in params or
                params['aws_account'] is None):
            raise ValueError("Missing the required parameter `aws_account` when calling `create_aws_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_account' in params:
            body_params = params['aws_account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsAccount',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_nsx_manager_account(self, nsx_manager_account, **kwargs):  # noqa: E501
        """Create a NSX Manager account  # noqa: E501

        Create a NSX Manager account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_nsx_manager_account(nsx_manager_account, async=True)
        >>> result = thread.get()

        :param async bool
        :param NsxManagerAccount nsx_manager_account: (required)
        :return: NsxManagerAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_nsx_manager_account_with_http_info(nsx_manager_account, **kwargs)  # noqa: E501
        else:
            (data) = self.create_nsx_manager_account_with_http_info(nsx_manager_account, **kwargs)  # noqa: E501
            return data

    def create_nsx_manager_account_with_http_info(self, nsx_manager_account, **kwargs):  # noqa: E501
        """Create a NSX Manager account  # noqa: E501

        Create a NSX Manager account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_nsx_manager_account_with_http_info(nsx_manager_account, async=True)
        >>> result = thread.get()

        :param async bool
        :param NsxManagerAccount nsx_manager_account: (required)
        :return: NsxManagerAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nsx_manager_account']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nsx_manager_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nsx_manager_account' is set
        if ('nsx_manager_account' not in params or
                params['nsx_manager_account'] is None):
            raise ValueError("Missing the required parameter `nsx_manager_account` when calling `create_nsx_manager_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nsx_manager_account' in params:
            body_params = params['nsx_manager_account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/nsx-manager-accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NsxManagerAccount',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_aws_account(self, account_id, **kwargs):  # noqa: E501
        """Delete AWS account information  # noqa: E501

        Delete AWS account information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_aws_account(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of AWS account to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_aws_account_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_aws_account_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def delete_aws_account_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Delete AWS account information  # noqa: E501

        Delete AWS account information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_aws_account_with_http_info(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of AWS account to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_aws_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_aws_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/accounts/{account-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_aws_gateway_ami(self, region_id, **kwargs):  # noqa: E501
        """Delete a AWS Gateway AMI  # noqa: E501

        Delete a AWS Gateway AMI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_aws_gateway_ami(region_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_id: ID of AWS region (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_aws_gateway_ami_with_http_info(region_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_aws_gateway_ami_with_http_info(region_id, **kwargs)  # noqa: E501
            return data

    def delete_aws_gateway_ami_with_http_info(self, region_id, **kwargs):  # noqa: E501
        """Delete a AWS Gateway AMI  # noqa: E501

        Delete a AWS Gateway AMI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_aws_gateway_ami_with_http_info(region_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_id: ID of AWS region (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_aws_gateway_ami" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_id' is set
        if ('region_id' not in params or
                params['region_id'] is None):
            raise ValueError("Missing the required parameter `region_id` when calling `delete_aws_gateway_ami`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_id' in params:
            path_params['region-id'] = params['region_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/gateway-amis/{region-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_nsx_manager_account(self, account_id, **kwargs):  # noqa: E501
        """Delete a NSX Manager account  # noqa: E501

        Delete a NSX Manager account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_nsx_manager_account(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of NSX Manager account (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_nsx_manager_account_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_nsx_manager_account_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def delete_nsx_manager_account_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Delete a NSX Manager account  # noqa: E501

        Delete a NSX Manager account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_nsx_manager_account_with_http_info(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of NSX Manager account (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_nsx_manager_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_nsx_manager_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/nsx-manager-accounts/{account-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deploy_aws_gateway_deploy(self, aws_gateway_deploy_config, **kwargs):  # noqa: E501
        """All the required configuration to deploy Aws gateways will be absorbed as a part of request body in this api and gateway deployment will be triggered.   # noqa: E501

        All the required configuration to deploy Aws gateways will be absorbed as a part of request body in this api and gateway deployment will be triggered.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deploy_aws_gateway_deploy(aws_gateway_deploy_config, async=True)
        >>> result = thread.get()

        :param async bool
        :param AwsGatewayDeployConfig aws_gateway_deploy_config: (required)
        :return: AwsGatewayDeployConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.deploy_aws_gateway_deploy_with_http_info(aws_gateway_deploy_config, **kwargs)  # noqa: E501
        else:
            (data) = self.deploy_aws_gateway_deploy_with_http_info(aws_gateway_deploy_config, **kwargs)  # noqa: E501
            return data

    def deploy_aws_gateway_deploy_with_http_info(self, aws_gateway_deploy_config, **kwargs):  # noqa: E501
        """All the required configuration to deploy Aws gateways will be absorbed as a part of request body in this api and gateway deployment will be triggered.   # noqa: E501

        All the required configuration to deploy Aws gateways will be absorbed as a part of request body in this api and gateway deployment will be triggered.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deploy_aws_gateway_deploy_with_http_info(aws_gateway_deploy_config, async=True)
        >>> result = thread.get()

        :param async bool
        :param AwsGatewayDeployConfig aws_gateway_deploy_config: (required)
        :return: AwsGatewayDeployConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aws_gateway_deploy_config']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_aws_gateway_deploy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aws_gateway_deploy_config' is set
        if ('aws_gateway_deploy_config' not in params or
                params['aws_gateway_deploy_config'] is None):
            raise ValueError("Missing the required parameter `aws_gateway_deploy_config` when calling `deploy_aws_gateway_deploy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_gateway_deploy_config' in params:
            body_params = params['aws_gateway_deploy_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/gateways?action=deploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsGatewayDeployConfig',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aws_account_status(self, account_id, **kwargs):  # noqa: E501
        """Return status of the account like credentails validity, inventory synchronization status and inventory synchronization state   # noqa: E501

        Return status of the account like credentails validity, inventory synchronization status and inventory synchronization state   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_aws_account_status(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of AWS account (required)
        :return: AwsAccountStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_aws_account_status_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aws_account_status_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_aws_account_status_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Return status of the account like credentails validity, inventory synchronization status and inventory synchronization state   # noqa: E501

        Return status of the account like credentails validity, inventory synchronization status and inventory synchronization state   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_aws_account_status_with_http_info(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of AWS account (required)
        :return: AwsAccountStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aws_account_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_aws_account_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/accounts/{account-id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsAccountStatus',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aws_gateway_ami_info(self, region_id, **kwargs):  # noqa: E501
        """Returns AWS Gateway AMI for a particular region  # noqa: E501

        Returns AWS Gateway AMI for a particular region  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_aws_gateway_ami_info(region_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_id: ID of AWS region (required)
        :return: AwsGatewayAmiInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_aws_gateway_ami_info_with_http_info(region_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aws_gateway_ami_info_with_http_info(region_id, **kwargs)  # noqa: E501
            return data

    def get_aws_gateway_ami_info_with_http_info(self, region_id, **kwargs):  # noqa: E501
        """Returns AWS Gateway AMI for a particular region  # noqa: E501

        Returns AWS Gateway AMI for a particular region  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_aws_gateway_ami_info_with_http_info(region_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_id: ID of AWS region (required)
        :return: AwsGatewayAmiInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aws_gateway_ami_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_id' is set
        if ('region_id' not in params or
                params['region_id'] is None):
            raise ValueError("Missing the required parameter `region_id` when calling `get_aws_gateway_ami_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_id' in params:
            path_params['region-id'] = params['region_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/gateway-amis/{region-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsGatewayAmiInfo',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aws_gateway_config(self, vpc_id, **kwargs):  # noqa: E501
        """Returns configuration for primary gateway and secondary gateway for the vpc,if exists.   # noqa: E501

        Returns configuration for primary gateway and secondary gateway for the vpc,if exists.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_aws_gateway_config(vpc_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vpc_id: ID of the Vpc (required)
        :return: AwsGatewayDeployConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_aws_gateway_config_with_http_info(vpc_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aws_gateway_config_with_http_info(vpc_id, **kwargs)  # noqa: E501
            return data

    def get_aws_gateway_config_with_http_info(self, vpc_id, **kwargs):  # noqa: E501
        """Returns configuration for primary gateway and secondary gateway for the vpc,if exists.   # noqa: E501

        Returns configuration for primary gateway and secondary gateway for the vpc,if exists.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_aws_gateway_config_with_http_info(vpc_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vpc_id: ID of the Vpc (required)
        :return: AwsGatewayDeployConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vpc_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aws_gateway_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vpc_id' is set
        if ('vpc_id' not in params or
                params['vpc_id'] is None):
            raise ValueError("Missing the required parameter `vpc_id` when calling `get_aws_gateway_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vpc_id' in params:
            path_params['vpc-id'] = params['vpc_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/gateways/{vpc-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsGatewayDeployConfig',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aws_gateway_status(self, vpc_id, **kwargs):  # noqa: E501
        """Returns status information for primary gateway and secondary gateway for the vpc, if exists.   # noqa: E501

        Returns status information for primary gateway and secondary gateway for the vpc, if exists.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_aws_gateway_status(vpc_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vpc_id: (required)
        :return: AwsGatewayStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_aws_gateway_status_with_http_info(vpc_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aws_gateway_status_with_http_info(vpc_id, **kwargs)  # noqa: E501
            return data

    def get_aws_gateway_status_with_http_info(self, vpc_id, **kwargs):  # noqa: E501
        """Returns status information for primary gateway and secondary gateway for the vpc, if exists.   # noqa: E501

        Returns status information for primary gateway and secondary gateway for the vpc, if exists.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_aws_gateway_status_with_http_info(vpc_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vpc_id: (required)
        :return: AwsGatewayStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vpc_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aws_gateway_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vpc_id' is set
        if ('vpc_id' not in params or
                params['vpc_id'] is None):
            raise ValueError("Missing the required parameter `vpc_id` when calling `get_aws_gateway_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vpc_id' in params:
            path_params['vpc-id'] = params['vpc_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/gateways/{vpc-id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsGatewayStatus',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_csm_status(self, **kwargs):  # noqa: E501
        """Return Csm status information  # noqa: E501

        Return Csm status information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_csm_status(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: CsmStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_csm_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_csm_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_csm_status_with_http_info(self, **kwargs):  # noqa: E501
        """Return Csm status information  # noqa: E501

        Return Csm status information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_csm_status_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: CsmStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_csm_status" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_csm_status`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_csm_status`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/csmstatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CsmStatus',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_aws_accounts(self, **kwargs):  # noqa: E501
        """Return a list of all AWS accounts  # noqa: E501

        Return a list of all AWS accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_aws_accounts(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str region_id: Identifier for region based on which accounts statistics will be aggregated. Using this request parameter will return only all_accounts_vpc_stats and all_accounts_instance_stats properties. 
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AwsAccountsListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_aws_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_aws_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_aws_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Return a list of all AWS accounts  # noqa: E501

        Return a list of all AWS accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_aws_accounts_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str region_id: Identifier for region based on which accounts statistics will be aggregated. Using this request parameter will return only all_accounts_vpc_stats and all_accounts_instance_stats properties. 
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AwsAccountsListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'region_id', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_aws_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_aws_accounts`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_aws_accounts`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'region_id' in params:
            query_params.append(('region_id', params['region_id']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsAccountsListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_aws_gateway_amis(self, **kwargs):  # noqa: E501
        """Returns a list of Aws Gateway Amis  # noqa: E501

        Returns a list of Aws Gateway Amis  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_aws_gateway_amis(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str region_id: Identifier for region based on which list of AWS Gateway AMIs will be obtained 
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AwsGatewayAmisListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_aws_gateway_amis_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_aws_gateway_amis_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_aws_gateway_amis_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of Aws Gateway Amis  # noqa: E501

        Returns a list of Aws Gateway Amis  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_aws_gateway_amis_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str region_id: Identifier for region based on which list of AWS Gateway AMIs will be obtained 
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AwsGatewayAmisListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'region_id', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_aws_gateway_amis" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_aws_gateway_amis`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_aws_gateway_amis`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'region_id' in params:
            query_params.append(('region_id', params['region_id']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/gateway-amis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsGatewayAmisListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_aws_gateways(self, **kwargs):  # noqa: E501
        """Returns configuration information for all gateways  # noqa: E501

        Returns configuration information for all gateways  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_aws_gateways(async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Identifier for account based on which Aws gateways list can to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str region_id: Identifier for region based on which Aws Gateways list can to be filtered
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str vpc_id: Identifier for vpc based on which Aws Gateways list can to be filtered
        :return: AwsGatewaysListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_aws_gateways_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_aws_gateways_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_aws_gateways_with_http_info(self, **kwargs):  # noqa: E501
        """Returns configuration information for all gateways  # noqa: E501

        Returns configuration information for all gateways  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_aws_gateways_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Identifier for account based on which Aws gateways list can to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str region_id: Identifier for region based on which Aws Gateways list can to be filtered
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str vpc_id: Identifier for vpc based on which Aws Gateways list can to be filtered
        :return: AwsGatewaysListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'cursor', 'included_fields', 'page_size', 'region_id', 'sort_ascending', 'sort_by', 'vpc_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_aws_gateways" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_aws_gateways`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_aws_gateways`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'region_id' in params:
            query_params.append(('region_id', params['region_id']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'vpc_id' in params:
            query_params.append(('vpc_id', params['vpc_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/gateways', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsGatewaysListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_aws_key_pairs(self, account_id, region_id, **kwargs):  # noqa: E501
        """Returns a list of Aws Key Pairs  # noqa: E501

        Returns a list of Aws Key Pairs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_aws_key_pairs(account_id, region_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Identifier for account based on which list of key pairs will be obtained  (required)
        :param str region_id: Identifier for region based on which list of key pairs will be obtained  (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AwsKeyPairList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_aws_key_pairs_with_http_info(account_id, region_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_aws_key_pairs_with_http_info(account_id, region_id, **kwargs)  # noqa: E501
            return data

    def list_aws_key_pairs_with_http_info(self, account_id, region_id, **kwargs):  # noqa: E501
        """Returns a list of Aws Key Pairs  # noqa: E501

        Returns a list of Aws Key Pairs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_aws_key_pairs_with_http_info(account_id, region_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Identifier for account based on which list of key pairs will be obtained  (required)
        :param str region_id: Identifier for region based on which list of key pairs will be obtained  (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AwsKeyPairList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'region_id', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_aws_key_pairs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `list_aws_key_pairs`")  # noqa: E501
        # verify the required parameter 'region_id' is set
        if ('region_id' not in params or
                params['region_id'] is None):
            raise ValueError("Missing the required parameter `region_id` when calling `list_aws_key_pairs`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_aws_key_pairs`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_aws_key_pairs`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'region_id' in params:
            query_params.append(('region_id', params['region_id']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/key-pairs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsKeyPairList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_aws_regions(self, **kwargs):  # noqa: E501
        """Returns a list of Aws regions  # noqa: E501

        Returns a list of Aws regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_aws_regions(async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Identifier for account based on which regions are to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str region_id: Identifier for region based on which the list can be filtered or can be used to validate that hierarchy is correct 
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AwsRegionsListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_aws_regions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_aws_regions_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_aws_regions_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of Aws regions  # noqa: E501

        Returns a list of Aws regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_aws_regions_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Identifier for account based on which regions are to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str region_id: Identifier for region based on which the list can be filtered or can be used to validate that hierarchy is correct 
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AwsRegionsListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'cursor', 'included_fields', 'page_size', 'region_id', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_aws_regions" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_aws_regions`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_aws_regions`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'region_id' in params:
            query_params.append(('region_id', params['region_id']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/regions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsRegionsListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_aws_subnets(self, account_id, availability_zone_name, region_name, vpc_id, **kwargs):  # noqa: E501
        """Returns a list of subnets  # noqa: E501

        Returns a list of subnets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_aws_subnets(account_id, availability_zone_name, region_name, vpc_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Identifier for account based on which subnets are to be filtered (required)
        :param str availability_zone_name: Identifier for availability zone based on which subnets are to be filtered (required)
        :param str region_name: Identifier for region based on which subnets are to be filtered (required)
        :param str vpc_id: Identifier for vpc based on which subnets are to be filtered (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AwsSubnetListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_aws_subnets_with_http_info(account_id, availability_zone_name, region_name, vpc_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_aws_subnets_with_http_info(account_id, availability_zone_name, region_name, vpc_id, **kwargs)  # noqa: E501
            return data

    def list_aws_subnets_with_http_info(self, account_id, availability_zone_name, region_name, vpc_id, **kwargs):  # noqa: E501
        """Returns a list of subnets  # noqa: E501

        Returns a list of subnets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_aws_subnets_with_http_info(account_id, availability_zone_name, region_name, vpc_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Identifier for account based on which subnets are to be filtered (required)
        :param str availability_zone_name: Identifier for availability zone based on which subnets are to be filtered (required)
        :param str region_name: Identifier for region based on which subnets are to be filtered (required)
        :param str vpc_id: Identifier for vpc based on which subnets are to be filtered (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: AwsSubnetListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'availability_zone_name', 'region_name', 'vpc_id', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_aws_subnets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `list_aws_subnets`")  # noqa: E501
        # verify the required parameter 'availability_zone_name' is set
        if ('availability_zone_name' not in params or
                params['availability_zone_name'] is None):
            raise ValueError("Missing the required parameter `availability_zone_name` when calling `list_aws_subnets`")  # noqa: E501
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `list_aws_subnets`")  # noqa: E501
        # verify the required parameter 'vpc_id' is set
        if ('vpc_id' not in params or
                params['vpc_id'] is None):
            raise ValueError("Missing the required parameter `vpc_id` when calling `list_aws_subnets`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_aws_subnets`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_aws_subnets`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'availability_zone_name' in params:
            query_params.append(('availability_zone_name', params['availability_zone_name']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'region_name' in params:
            query_params.append(('region_name', params['region_name']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'vpc_id' in params:
            query_params.append(('vpc_id', params['vpc_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/subnets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsSubnetListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_aws_vpcs(self, **kwargs):  # noqa: E501
        """Returns a list of Vpcs. Support optional query parameters like account_id, region_id, cidr and/or op_status   # noqa: E501

        Returns a list of Vpcs. Support optional query parameters like account_id, region_id, cidr and/or op_status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_aws_vpcs(async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Identifier for account based on which vpcs are to be filtered
        :param str cidr: IPV4 CIDR Block for the Vpc
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str op_status: Identifier for state based on which vpcs are to be filtered
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str region_id: Identifier for region based on which vpcs are to be filtered
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str vpc_id: Identifier for vpc based on which the list can be filtered or can be used to validate that hierarchy is correct 
        :return: AwsVpcListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_aws_vpcs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_aws_vpcs_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_aws_vpcs_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of Vpcs. Support optional query parameters like account_id, region_id, cidr and/or op_status   # noqa: E501

        Returns a list of Vpcs. Support optional query parameters like account_id, region_id, cidr and/or op_status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_aws_vpcs_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Identifier for account based on which vpcs are to be filtered
        :param str cidr: IPV4 CIDR Block for the Vpc
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str op_status: Identifier for state based on which vpcs are to be filtered
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str region_id: Identifier for region based on which vpcs are to be filtered
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str vpc_id: Identifier for vpc based on which the list can be filtered or can be used to validate that hierarchy is correct 
        :return: AwsVpcListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'cidr', 'cursor', 'included_fields', 'op_status', 'page_size', 'region_id', 'sort_ascending', 'sort_by', 'vpc_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_aws_vpcs" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_aws_vpcs`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_aws_vpcs`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'cidr' in params:
            query_params.append(('cidr', params['cidr']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'op_status' in params:
            query_params.append(('op_status', params['op_status']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'region_id' in params:
            query_params.append(('region_id', params['region_id']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'vpc_id' in params:
            query_params.append(('vpc_id', params['vpc_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/vpcs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsVpcListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_cloud_virtual_machines(self, **kwargs):  # noqa: E501
        """Returns the list of all virtual machines created or imported under a particular account id. Supports optional query parameters like region id, vpc id, public_ip, is_gateway.  # noqa: E501

        Returns the list of all virtual machines created or imported under a particular account id. Supports optional query parameters like region id, vpc id, public_ip, is_gateway.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_cloud_virtual_machines(async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Identifier for account based on which virtual machines are to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str instance_id: Identifier for virtual machine based on which the list can be filtered
        :param bool is_gateway: Is the VM a gateway node?
        :param str logical_switch_id: Identifier for logical switch based on which Aws Virtual Machines are to be filtered 
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str public_ip: Public IP address of the virtual machine
        :param str quarantine_state: Quarantine State
        :param str region_id: Identifier for region based on whicha Virtual Machines are to be filtered
        :param str resource_type: Identifier for virtual machines of a particular cloud provider
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str vpc_id: Identifier for vpc based on which Aws Virtual Machines are to be filtered
        :return: CloudVirtualMachinesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_cloud_virtual_machines_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_cloud_virtual_machines_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_cloud_virtual_machines_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the list of all virtual machines created or imported under a particular account id. Supports optional query parameters like region id, vpc id, public_ip, is_gateway.  # noqa: E501

        Returns the list of all virtual machines created or imported under a particular account id. Supports optional query parameters like region id, vpc id, public_ip, is_gateway.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_cloud_virtual_machines_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Identifier for account based on which virtual machines are to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str instance_id: Identifier for virtual machine based on which the list can be filtered
        :param bool is_gateway: Is the VM a gateway node?
        :param str logical_switch_id: Identifier for logical switch based on which Aws Virtual Machines are to be filtered 
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str public_ip: Public IP address of the virtual machine
        :param str quarantine_state: Quarantine State
        :param str region_id: Identifier for region based on whicha Virtual Machines are to be filtered
        :param str resource_type: Identifier for virtual machines of a particular cloud provider
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str vpc_id: Identifier for vpc based on which Aws Virtual Machines are to be filtered
        :return: CloudVirtualMachinesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'cursor', 'included_fields', 'instance_id', 'is_gateway', 'logical_switch_id', 'page_size', 'public_ip', 'quarantine_state', 'region_id', 'resource_type', 'sort_ascending', 'sort_by', 'vpc_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_cloud_virtual_machines" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_cloud_virtual_machines`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_cloud_virtual_machines`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'instance_id' in params:
            query_params.append(('instance_id', params['instance_id']))  # noqa: E501
        if 'is_gateway' in params:
            query_params.append(('is_gateway', params['is_gateway']))  # noqa: E501
        if 'logical_switch_id' in params:
            query_params.append(('logical_switch_id', params['logical_switch_id']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'public_ip' in params:
            query_params.append(('public_ip', params['public_ip']))  # noqa: E501
        if 'quarantine_state' in params:
            query_params.append(('quarantine_state', params['quarantine_state']))  # noqa: E501
        if 'region_id' in params:
            query_params.append(('region_id', params['region_id']))  # noqa: E501
        if 'resource_type' in params:
            query_params.append(('resource_type', params['resource_type']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'vpc_id' in params:
            query_params.append(('vpc_id', params['vpc_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/virtual-machines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudVirtualMachinesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_nsx_manager_accounts(self, **kwargs):  # noqa: E501
        """Returns a list of NSX Manager accounts  # noqa: E501

        Returns a list of NSX Manager accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_nsx_manager_accounts(async=True)
        >>> result = thread.get()

        :param async bool
        :return: NsxManagerAccountsListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_nsx_manager_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_nsx_manager_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_nsx_manager_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of NSX Manager accounts  # noqa: E501

        Returns a list of NSX Manager accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_nsx_manager_accounts_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: NsxManagerAccountsListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_nsx_manager_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/nsx-manager-accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NsxManagerAccountsListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def nsx_manager_account_info(self, account_id, **kwargs):  # noqa: E501
        """Returns the particular NSX Manager account information  # noqa: E501

        Returns the particular NSX Manager account information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.nsx_manager_account_info(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of NSX Manager account (required)
        :return: NsxManagerAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.nsx_manager_account_info_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.nsx_manager_account_info_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def nsx_manager_account_info_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Returns the particular NSX Manager account information  # noqa: E501

        Returns the particular NSX Manager account information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.nsx_manager_account_info_with_http_info(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of NSX Manager account (required)
        :return: NsxManagerAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method nsx_manager_account_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `nsx_manager_account_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/nsx-manager-accounts/{account-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NsxManagerAccount',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_aws_gateway_ami(self, aws_gateway_ami_info, **kwargs):  # noqa: E501
        """Registers a AWS Gateway AMI for the region specified in the body. One can register only one gateway AMI ID per region. If a gateway AMI is already registered with a region, user is expected to use update API to overwrite the registerd AMI for a region.   # noqa: E501

        Registers a AWS Gateway AMI for the region specified in the body. One can register only one gateway AMI ID per region. If a gateway AMI is already registered with a region, user is expected to use update API to overwrite the registerd AMI for a region.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.register_aws_gateway_ami(aws_gateway_ami_info, async=True)
        >>> result = thread.get()

        :param async bool
        :param AwsGatewayAmiInfo aws_gateway_ami_info: (required)
        :return: AwsGatewayAmiInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.register_aws_gateway_ami_with_http_info(aws_gateway_ami_info, **kwargs)  # noqa: E501
        else:
            (data) = self.register_aws_gateway_ami_with_http_info(aws_gateway_ami_info, **kwargs)  # noqa: E501
            return data

    def register_aws_gateway_ami_with_http_info(self, aws_gateway_ami_info, **kwargs):  # noqa: E501
        """Registers a AWS Gateway AMI for the region specified in the body. One can register only one gateway AMI ID per region. If a gateway AMI is already registered with a region, user is expected to use update API to overwrite the registerd AMI for a region.   # noqa: E501

        Registers a AWS Gateway AMI for the region specified in the body. One can register only one gateway AMI ID per region. If a gateway AMI is already registered with a region, user is expected to use update API to overwrite the registerd AMI for a region.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.register_aws_gateway_ami_with_http_info(aws_gateway_ami_info, async=True)
        >>> result = thread.get()

        :param async bool
        :param AwsGatewayAmiInfo aws_gateway_ami_info: (required)
        :return: AwsGatewayAmiInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aws_gateway_ami_info']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_aws_gateway_ami" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aws_gateway_ami_info' is set
        if ('aws_gateway_ami_info' not in params or
                params['aws_gateway_ami_info'] is None):
            raise ValueError("Missing the required parameter `aws_gateway_ami_info` when calling `register_aws_gateway_ami`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_gateway_ami_info' in params:
            body_params = params['aws_gateway_ami_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/gateway-amis', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsGatewayAmiInfo',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sync_aws_account_inventory_sync_inventory(self, account_id, **kwargs):  # noqa: E501
        """Synchronizes Aws account related inventory like Regions, Vpcs, Instances Status of inventory synchronization can be known from Aws account status api   # noqa: E501

        Synchronizes Aws account related inventory like Regions, Vpcs, Instances Status of inventory synchronization can be known from Aws account status api   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sync_aws_account_inventory_sync_inventory(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of AWS account (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sync_aws_account_inventory_sync_inventory_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sync_aws_account_inventory_sync_inventory_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def sync_aws_account_inventory_sync_inventory_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Synchronizes Aws account related inventory like Regions, Vpcs, Instances Status of inventory synchronization can be known from Aws account status api   # noqa: E501

        Synchronizes Aws account related inventory like Regions, Vpcs, Instances Status of inventory synchronization can be known from Aws account status api   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sync_aws_account_inventory_sync_inventory_with_http_info(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of AWS account (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_aws_account_inventory_sync_inventory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `sync_aws_account_inventory_sync_inventory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/accounts/{account-id}?action=sync_inventory', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def undeploy_aws_gateway_undeploy(self, aws_gateway_undeploy_config, **kwargs):  # noqa: E501
        """All the required configuration to undeploy Aws gateways will be absorbed as a part of request body in this api and gateway undeployment will be triggered.   # noqa: E501

        All the required configuration to undeploy Aws gateways will be absorbed as a part of request body in this api and gateway undeployment will be triggered.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.undeploy_aws_gateway_undeploy(aws_gateway_undeploy_config, async=True)
        >>> result = thread.get()

        :param async bool
        :param AwsGatewayUndeployConfig aws_gateway_undeploy_config: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.undeploy_aws_gateway_undeploy_with_http_info(aws_gateway_undeploy_config, **kwargs)  # noqa: E501
        else:
            (data) = self.undeploy_aws_gateway_undeploy_with_http_info(aws_gateway_undeploy_config, **kwargs)  # noqa: E501
            return data

    def undeploy_aws_gateway_undeploy_with_http_info(self, aws_gateway_undeploy_config, **kwargs):  # noqa: E501
        """All the required configuration to undeploy Aws gateways will be absorbed as a part of request body in this api and gateway undeployment will be triggered.   # noqa: E501

        All the required configuration to undeploy Aws gateways will be absorbed as a part of request body in this api and gateway undeployment will be triggered.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.undeploy_aws_gateway_undeploy_with_http_info(aws_gateway_undeploy_config, async=True)
        >>> result = thread.get()

        :param async bool
        :param AwsGatewayUndeployConfig aws_gateway_undeploy_config: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aws_gateway_undeploy_config']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method undeploy_aws_gateway_undeploy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aws_gateway_undeploy_config' is set
        if ('aws_gateway_undeploy_config' not in params or
                params['aws_gateway_undeploy_config'] is None):
            raise ValueError("Missing the required parameter `aws_gateway_undeploy_config` when calling `undeploy_aws_gateway_undeploy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_gateway_undeploy_config' in params:
            body_params = params['aws_gateway_undeploy_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/gateways?action=undeploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_aws_account(self, account_id, aws_account, **kwargs):  # noqa: E501
        """Update a AWS account information  # noqa: E501

        Update a AWS account information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_aws_account(account_id, aws_account, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of AWS account (required)
        :param AwsAccount aws_account: (required)
        :return: AwsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_aws_account_with_http_info(account_id, aws_account, **kwargs)  # noqa: E501
        else:
            (data) = self.update_aws_account_with_http_info(account_id, aws_account, **kwargs)  # noqa: E501
            return data

    def update_aws_account_with_http_info(self, account_id, aws_account, **kwargs):  # noqa: E501
        """Update a AWS account information  # noqa: E501

        Update a AWS account information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_aws_account_with_http_info(account_id, aws_account, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of AWS account (required)
        :param AwsAccount aws_account: (required)
        :return: AwsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'aws_account']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_aws_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_aws_account`")  # noqa: E501
        # verify the required parameter 'aws_account' is set
        if ('aws_account' not in params or
                params['aws_account'] is None):
            raise ValueError("Missing the required parameter `aws_account` when calling `update_aws_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_account' in params:
            body_params = params['aws_account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/accounts/{account-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsAccount',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_aws_gateway_ami(self, region_id, aws_gateway_ami_info, **kwargs):  # noqa: E501
        """Update a AWS Gateway AMI  # noqa: E501

        Update a AWS Gateway AMI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_aws_gateway_ami(region_id, aws_gateway_ami_info, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_id: ID of AWS region (required)
        :param AwsGatewayAmiInfo aws_gateway_ami_info: (required)
        :return: AwsGatewayAmiInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_aws_gateway_ami_with_http_info(region_id, aws_gateway_ami_info, **kwargs)  # noqa: E501
        else:
            (data) = self.update_aws_gateway_ami_with_http_info(region_id, aws_gateway_ami_info, **kwargs)  # noqa: E501
            return data

    def update_aws_gateway_ami_with_http_info(self, region_id, aws_gateway_ami_info, **kwargs):  # noqa: E501
        """Update a AWS Gateway AMI  # noqa: E501

        Update a AWS Gateway AMI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_aws_gateway_ami_with_http_info(region_id, aws_gateway_ami_info, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_id: ID of AWS region (required)
        :param AwsGatewayAmiInfo aws_gateway_ami_info: (required)
        :return: AwsGatewayAmiInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_id', 'aws_gateway_ami_info']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_aws_gateway_ami" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_id' is set
        if ('region_id' not in params or
                params['region_id'] is None):
            raise ValueError("Missing the required parameter `region_id` when calling `update_aws_gateway_ami`")  # noqa: E501
        # verify the required parameter 'aws_gateway_ami_info' is set
        if ('aws_gateway_ami_info' not in params or
                params['aws_gateway_ami_info'] is None):
            raise ValueError("Missing the required parameter `aws_gateway_ami_info` when calling `update_aws_gateway_ami`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_id' in params:
            path_params['region-id'] = params['region_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_gateway_ami_info' in params:
            body_params = params['aws_gateway_ami_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/gateway-amis/{region-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsGatewayAmiInfo',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_aws_gateway_config(self, vpc_id, aws_gateway_deploy_config, **kwargs):  # noqa: E501
        """Updates configuration for primary gateway and secondary gateway for the vpc, if exists.   # noqa: E501

        Updates configuration for primary gateway and secondary gateway for the vpc, if exists.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_aws_gateway_config(vpc_id, aws_gateway_deploy_config, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vpc_id: (required)
        :param AwsGatewayDeployConfig aws_gateway_deploy_config: (required)
        :return: AwsGatewayDeployConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_aws_gateway_config_with_http_info(vpc_id, aws_gateway_deploy_config, **kwargs)  # noqa: E501
        else:
            (data) = self.update_aws_gateway_config_with_http_info(vpc_id, aws_gateway_deploy_config, **kwargs)  # noqa: E501
            return data

    def update_aws_gateway_config_with_http_info(self, vpc_id, aws_gateway_deploy_config, **kwargs):  # noqa: E501
        """Updates configuration for primary gateway and secondary gateway for the vpc, if exists.   # noqa: E501

        Updates configuration for primary gateway and secondary gateway for the vpc, if exists.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_aws_gateway_config_with_http_info(vpc_id, aws_gateway_deploy_config, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vpc_id: (required)
        :param AwsGatewayDeployConfig aws_gateway_deploy_config: (required)
        :return: AwsGatewayDeployConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vpc_id', 'aws_gateway_deploy_config']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_aws_gateway_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vpc_id' is set
        if ('vpc_id' not in params or
                params['vpc_id'] is None):
            raise ValueError("Missing the required parameter `vpc_id` when calling `update_aws_gateway_config`")  # noqa: E501
        # verify the required parameter 'aws_gateway_deploy_config' is set
        if ('aws_gateway_deploy_config' not in params or
                params['aws_gateway_deploy_config'] is None):
            raise ValueError("Missing the required parameter `aws_gateway_deploy_config` when calling `update_aws_gateway_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vpc_id' in params:
            path_params['vpc-id'] = params['vpc_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_gateway_deploy_config' in params:
            body_params = params['aws_gateway_deploy_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/aws/gateways/{vpc-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsGatewayDeployConfig',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_nsx_manager_account(self, account_id, nsx_manager_account, **kwargs):  # noqa: E501
        """Update a NSX Manager account  # noqa: E501

        Update a NSX Manager account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_nsx_manager_account(account_id, nsx_manager_account, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of NSX Manager account (required)
        :param NsxManagerAccount nsx_manager_account: (required)
        :return: NsxManagerAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_nsx_manager_account_with_http_info(account_id, nsx_manager_account, **kwargs)  # noqa: E501
        else:
            (data) = self.update_nsx_manager_account_with_http_info(account_id, nsx_manager_account, **kwargs)  # noqa: E501
            return data

    def update_nsx_manager_account_with_http_info(self, account_id, nsx_manager_account, **kwargs):  # noqa: E501
        """Update a NSX Manager account  # noqa: E501

        Update a NSX Manager account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_nsx_manager_account_with_http_info(account_id, nsx_manager_account, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: ID of NSX Manager account (required)
        :param NsxManagerAccount nsx_manager_account: (required)
        :return: NsxManagerAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'nsx_manager_account']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_nsx_manager_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_nsx_manager_account`")  # noqa: E501
        # verify the required parameter 'nsx_manager_account' is set
        if ('nsx_manager_account' not in params or
                params['nsx_manager_account'] is None):
            raise ValueError("Missing the required parameter `nsx_manager_account` when calling `update_nsx_manager_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nsx_manager_account' in params:
            body_params = params['nsx_manager_account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/csm/nsx-manager-accounts/{account-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NsxManagerAccount',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
