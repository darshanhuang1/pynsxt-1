# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FabricApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_compute_manager(self, compute_manager, **kwargs):  # noqa: E501
        """Register compute manager with NSX  # noqa: E501

        Registers compute manager with NSX. Inventory service will collect data from the registered compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_compute_manager(compute_manager, async=True)
        >>> result = thread.get()

        :param async bool
        :param ComputeManager compute_manager: (required)
        :return: ComputeManager
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_compute_manager_with_http_info(compute_manager, **kwargs)  # noqa: E501
        else:
            (data) = self.add_compute_manager_with_http_info(compute_manager, **kwargs)  # noqa: E501
            return data

    def add_compute_manager_with_http_info(self, compute_manager, **kwargs):  # noqa: E501
        """Register compute manager with NSX  # noqa: E501

        Registers compute manager with NSX. Inventory service will collect data from the registered compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_compute_manager_with_http_info(compute_manager, async=True)
        >>> result = thread.get()

        :param async bool
        :param ComputeManager compute_manager: (required)
        :return: ComputeManager
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compute_manager']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_compute_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compute_manager' is set
        if ('compute_manager' not in params or
                params['compute_manager'] is None):
            raise ValueError("Missing the required parameter `compute_manager` when calling `add_compute_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'compute_manager' in params:
            body_params = params['compute_manager']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-managers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeManager',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_node(self, node, **kwargs):  # noqa: E501
        """Register and Install NSX Components on a Node  # noqa: E501

        Creates a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the <b>openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout</b> command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at '/etc/ssh/ssh_host_rsa_key.pub'. If the key is not present then generate a new key by running the following command and follow the instructions.  <b>ssh-keygen -t rsa</b>  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default 'id_rsa.pub'.  <b>awk '{print $2}' id_rsa.pub | base64 -d | sha256sum -b | sed 's/ .*$//' | xxd -r -p | base64</b>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_node(node, async=True)
        >>> result = thread.get()

        :param async bool
        :param Node node: (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_node_with_http_info(node, **kwargs)  # noqa: E501
        else:
            (data) = self.add_node_with_http_info(node, **kwargs)  # noqa: E501
            return data

    def add_node_with_http_info(self, node, **kwargs):  # noqa: E501
        """Register and Install NSX Components on a Node  # noqa: E501

        Creates a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the <b>openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout</b> command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at '/etc/ssh/ssh_host_rsa_key.pub'. If the key is not present then generate a new key by running the following command and follow the instructions.  <b>ssh-keygen -t rsa</b>  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default 'id_rsa.pub'.  <b>awk '{print $2}' id_rsa.pub | base64 -d | sha256sum -b | sed 's/ .*$//' | xxd -r -p | base64</b>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_node_with_http_info(node, async=True)
        >>> result = thread.get()

        :param async bool
        :param Node node: (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node' is set
        if ('node' not in params or
                params['node'] is None):
            raise ValueError("Missing the required parameter `node` when calling `add_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'node' in params:
            body_params = params['node']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Node',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_compute_collection_fabric_template(self, compute_collection_fabric_template, **kwargs):  # noqa: E501
        """Create a compute collection fabric template  # noqa: E501

        Fabric templates are fabric configurations applied at the compute collection level. This configurations is used to decide what automated operations should be a run when a host membership changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_compute_collection_fabric_template(compute_collection_fabric_template, async=True)
        >>> result = thread.get()

        :param async bool
        :param ComputeCollectionFabricTemplate compute_collection_fabric_template: (required)
        :return: ComputeCollectionFabricTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_compute_collection_fabric_template_with_http_info(compute_collection_fabric_template, **kwargs)  # noqa: E501
        else:
            (data) = self.create_compute_collection_fabric_template_with_http_info(compute_collection_fabric_template, **kwargs)  # noqa: E501
            return data

    def create_compute_collection_fabric_template_with_http_info(self, compute_collection_fabric_template, **kwargs):  # noqa: E501
        """Create a compute collection fabric template  # noqa: E501

        Fabric templates are fabric configurations applied at the compute collection level. This configurations is used to decide what automated operations should be a run when a host membership changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_compute_collection_fabric_template_with_http_info(compute_collection_fabric_template, async=True)
        >>> result = thread.get()

        :param async bool
        :param ComputeCollectionFabricTemplate compute_collection_fabric_template: (required)
        :return: ComputeCollectionFabricTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compute_collection_fabric_template']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_compute_collection_fabric_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compute_collection_fabric_template' is set
        if ('compute_collection_fabric_template' not in params or
                params['compute_collection_fabric_template'] is None):
            raise ValueError("Missing the required parameter `compute_collection_fabric_template` when calling `create_compute_collection_fabric_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'compute_collection_fabric_template' in params:
            body_params = params['compute_collection_fabric_template']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collection-fabric-templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeCollectionFabricTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_compute_collection_fabric_template(self, fabric_template_id, **kwargs):  # noqa: E501
        """Deletes compute collection fabric template  # noqa: E501

        Deletes compute collection fabric template for the given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_compute_collection_fabric_template(fabric_template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str fabric_template_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_compute_collection_fabric_template_with_http_info(fabric_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_compute_collection_fabric_template_with_http_info(fabric_template_id, **kwargs)  # noqa: E501
            return data

    def delete_compute_collection_fabric_template_with_http_info(self, fabric_template_id, **kwargs):  # noqa: E501
        """Deletes compute collection fabric template  # noqa: E501

        Deletes compute collection fabric template for the given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_compute_collection_fabric_template_with_http_info(fabric_template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str fabric_template_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric_template_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_compute_collection_fabric_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric_template_id' is set
        if ('fabric_template_id' not in params or
                params['fabric_template_id'] is None):
            raise ValueError("Missing the required parameter `fabric_template_id` when calling `delete_compute_collection_fabric_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric_template_id' in params:
            path_params['fabric-template-id'] = params['fabric_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collection-fabric-templates/{fabric-template-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_compute_manager(self, compute_manager_id, **kwargs):  # noqa: E501
        """Unregister a compute manager  # noqa: E501

        Unregisters a specified compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_compute_manager(compute_manager_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compute_manager_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_compute_manager_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_compute_manager_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
            return data

    def delete_compute_manager_with_http_info(self, compute_manager_id, **kwargs):  # noqa: E501
        """Unregister a compute manager  # noqa: E501

        Unregisters a specified compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_compute_manager_with_http_info(compute_manager_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compute_manager_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compute_manager_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_compute_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compute_manager_id' is set
        if ('compute_manager_id' not in params or
                params['compute_manager_id'] is None):
            raise ValueError("Missing the required parameter `compute_manager_id` when calling `delete_compute_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compute_manager_id' in params:
            path_params['compute-manager-id'] = params['compute_manager_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-managers/{compute-manager-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_node(self, node_id, **kwargs):  # noqa: E501
        """Delete a Node  # noqa: E501

        Removes a specified fabric node (host or edge). A fabric node may only be deleted when it is no longer referenced by a Transport Node. If unprepare_host option is specified, the host will be deleted without uninstalling the NSX components from the host.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_node(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param bool unprepare_host: Delete a host without uninstalling NSX components
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_node_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_node_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def delete_node_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Delete a Node  # noqa: E501

        Removes a specified fabric node (host or edge). A fabric node may only be deleted when it is no longer referenced by a Transport Node. If unprepare_host option is specified, the host will be deleted without uninstalling the NSX components from the host.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_node_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param bool unprepare_host: Delete a host without uninstalling NSX components
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'unprepare_host']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `delete_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []
        if 'unprepare_host' in params:
            query_params.append(('unprepare_host', params['unprepare_host']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_compute_collection_fabric_template(self, fabric_template_id, **kwargs):  # noqa: E501
        """Get compute collection fabric template by id  # noqa: E501

        Get compute collection fabric template for the given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compute_collection_fabric_template(fabric_template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str fabric_template_id: (required)
        :return: ComputeCollectionFabricTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_compute_collection_fabric_template_with_http_info(fabric_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_compute_collection_fabric_template_with_http_info(fabric_template_id, **kwargs)  # noqa: E501
            return data

    def get_compute_collection_fabric_template_with_http_info(self, fabric_template_id, **kwargs):  # noqa: E501
        """Get compute collection fabric template by id  # noqa: E501

        Get compute collection fabric template for the given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compute_collection_fabric_template_with_http_info(fabric_template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str fabric_template_id: (required)
        :return: ComputeCollectionFabricTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric_template_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_collection_fabric_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric_template_id' is set
        if ('fabric_template_id' not in params or
                params['fabric_template_id'] is None):
            raise ValueError("Missing the required parameter `fabric_template_id` when calling `get_compute_collection_fabric_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric_template_id' in params:
            path_params['fabric-template-id'] = params['fabric_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collection-fabric-templates/{fabric-template-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeCollectionFabricTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_compute_manager_state(self, compute_manager_id, **kwargs):  # noqa: E501
        """Get the realized state of a compute manager  # noqa: E501

        Get the realized state of a compute manager  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compute_manager_state(compute_manager_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compute_manager_id: (required)
        :return: ConfigurationState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_compute_manager_state_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_compute_manager_state_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
            return data

    def get_compute_manager_state_with_http_info(self, compute_manager_id, **kwargs):  # noqa: E501
        """Get the realized state of a compute manager  # noqa: E501

        Get the realized state of a compute manager  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compute_manager_state_with_http_info(compute_manager_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compute_manager_id: (required)
        :return: ConfigurationState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compute_manager_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_manager_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compute_manager_id' is set
        if ('compute_manager_id' not in params or
                params['compute_manager_id'] is None):
            raise ValueError("Missing the required parameter `compute_manager_id` when calling `get_compute_manager_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compute_manager_id' in params:
            path_params['compute-manager-id'] = params['compute_manager_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-managers/{compute-manager-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigurationState',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fabric_node_modules(self, node_id, **kwargs):  # noqa: E501
        """Get the module details of a Fabric Node  # noqa: E501

        Get the module details of a Fabric Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_fabric_node_modules(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :return: SoftwareModuleResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_fabric_node_modules_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fabric_node_modules_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def get_fabric_node_modules_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Get the module details of a Fabric Node  # noqa: E501

        Get the module details of a Fabric Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_fabric_node_modules_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :return: SoftwareModuleResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fabric_node_modules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `get_fabric_node_modules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}/modules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SoftwareModuleResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fabric_node_state(self, node_id, **kwargs):  # noqa: E501
        """Get the Realized State of a Fabric Node  # noqa: E501

        Get the Realized State of a Fabric Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_fabric_node_state(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :return: ConfigurationState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_fabric_node_state_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fabric_node_state_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def get_fabric_node_state_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Get the Realized State of a Fabric Node  # noqa: E501

        Get the Realized State of a Fabric Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_fabric_node_state_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :return: ConfigurationState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fabric_node_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `get_fabric_node_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigurationState',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def host_prep_discovered_node_hostprep(self, node_ext_id, **kwargs):  # noqa: E501
        """Prepares discovered Node for NSX  # noqa: E501

        Prepares(hostprep) discovered node for NSX. NSX LCP bundles are installed on this discovered node.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.host_prep_discovered_node_hostprep(node_ext_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_ext_id: (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.host_prep_discovered_node_hostprep_with_http_info(node_ext_id, **kwargs)  # noqa: E501
        else:
            (data) = self.host_prep_discovered_node_hostprep_with_http_info(node_ext_id, **kwargs)  # noqa: E501
            return data

    def host_prep_discovered_node_hostprep_with_http_info(self, node_ext_id, **kwargs):  # noqa: E501
        """Prepares discovered Node for NSX  # noqa: E501

        Prepares(hostprep) discovered node for NSX. NSX LCP bundles are installed on this discovered node.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.host_prep_discovered_node_hostprep_with_http_info(node_ext_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_ext_id: (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_ext_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method host_prep_discovered_node_hostprep" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_ext_id' is set
        if ('node_ext_id' not in params or
                params['node_ext_id'] is None):
            raise ValueError("Missing the required parameter `node_ext_id` when calling `host_prep_discovered_node_hostprep`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_ext_id' in params:
            path_params['node-ext-id'] = params['node_ext_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/discovered-nodes/{node-ext-id}?action=hostprep', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Node',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_compute_collection_fabric_templates(self, **kwargs):  # noqa: E501
        """Get compute collection fabric templates  # noqa: E501

        Returns compute collection fabric templates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_compute_collection_fabric_templates(async=True)
        >>> result = thread.get()

        :param async bool
        :param str compute_collection_id: Compute collection id
        :return: ComputeCollectionFabricTemplateListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_compute_collection_fabric_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_compute_collection_fabric_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_compute_collection_fabric_templates_with_http_info(self, **kwargs):  # noqa: E501
        """Get compute collection fabric templates  # noqa: E501

        Returns compute collection fabric templates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_compute_collection_fabric_templates_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str compute_collection_id: Compute collection id
        :return: ComputeCollectionFabricTemplateListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compute_collection_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_compute_collection_fabric_templates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'compute_collection_id' in params:
            query_params.append(('compute_collection_id', params['compute_collection_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collection-fabric-templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeCollectionFabricTemplateListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_compute_collections(self, **kwargs):  # noqa: E501
        """Return the List of Compute Collections  # noqa: E501

        Returns information about all compute collections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_compute_collections(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cm_local_id: Local Id of the compute collection in the Compute Manager
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str discovered_node_id: Id of the discovered node which belongs to this Compute Collection 
        :param str display_name: Name of the ComputeCollection in source compute manager
        :param str external_id: External ID of the ComputeCollection in the source Compute manager, e.g. mo-ref in VC 
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str node_id: Id of the fabric node created from a discovered node belonging to this Compute Collection 
        :param str origin_id: Id of the compute manager from where this Compute Collection was discovered
        :param str origin_type: ComputeCollection type like VC_Cluster. Here the Compute Manager type prefix would help in differentiating similar named Compute Collection types from different Compute Managers 
        :param str owner_id: Id of the owner of compute collection in the Compute Manager
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ComputeCollectionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_compute_collections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_compute_collections_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_compute_collections_with_http_info(self, **kwargs):  # noqa: E501
        """Return the List of Compute Collections  # noqa: E501

        Returns information about all compute collections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_compute_collections_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cm_local_id: Local Id of the compute collection in the Compute Manager
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str discovered_node_id: Id of the discovered node which belongs to this Compute Collection 
        :param str display_name: Name of the ComputeCollection in source compute manager
        :param str external_id: External ID of the ComputeCollection in the source Compute manager, e.g. mo-ref in VC 
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str node_id: Id of the fabric node created from a discovered node belonging to this Compute Collection 
        :param str origin_id: Id of the compute manager from where this Compute Collection was discovered
        :param str origin_type: ComputeCollection type like VC_Cluster. Here the Compute Manager type prefix would help in differentiating similar named Compute Collection types from different Compute Managers 
        :param str owner_id: Id of the owner of compute collection in the Compute Manager
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ComputeCollectionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cm_local_id', 'cursor', 'discovered_node_id', 'display_name', 'external_id', 'included_fields', 'node_id', 'origin_id', 'origin_type', 'owner_id', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_compute_collections" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_compute_collections`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_compute_collections`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cm_local_id' in params:
            query_params.append(('cm_local_id', params['cm_local_id']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'discovered_node_id' in params:
            query_params.append(('discovered_node_id', params['discovered_node_id']))  # noqa: E501
        if 'display_name' in params:
            query_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'external_id' in params:
            query_params.append(('external_id', params['external_id']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501
        if 'origin_id' in params:
            query_params.append(('origin_id', params['origin_id']))  # noqa: E501
        if 'origin_type' in params:
            query_params.append(('origin_type', params['origin_type']))  # noqa: E501
        if 'owner_id' in params:
            query_params.append(('owner_id', params['owner_id']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeCollectionListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_compute_managers(self, **kwargs):  # noqa: E501
        """Return the List of Compute managers  # noqa: E501

        Returns information about all compute managers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_compute_managers(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str origin_type: Compute manager type like vCenter
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str server: IP address or hostname of compute manager
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ComputeManagerListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_compute_managers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_compute_managers_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_compute_managers_with_http_info(self, **kwargs):  # noqa: E501
        """Return the List of Compute managers  # noqa: E501

        Returns information about all compute managers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_compute_managers_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str origin_type: Compute manager type like vCenter
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str server: IP address or hostname of compute manager
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ComputeManagerListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'origin_type', 'page_size', 'server', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_compute_managers" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_compute_managers`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_compute_managers`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'origin_type' in params:
            query_params.append(('origin_type', params['origin_type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-managers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeManagerListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_discovered_nodes(self, **kwargs):  # noqa: E501
        """Return the List of Discovered Nodes  # noqa: E501

        Returns information about all discovered nodes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_discovered_nodes(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cm_local_id: Local Id of the discovered node in the Compute Manager
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str display_name: Display name of discovered node
        :param str external_id: External id of the discovered node, ex. a mo-ref from VC
        :param str has_parent: Discovered node has a parent compute collection or is a standalone host
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str ip_address: IP address of the discovered node
        :param str node_id: Id of the fabric node created from the discovered node
        :param str node_type: Discovered Node type like HostNode
        :param str origin_id: Id of the compute manager from where this node was discovered
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str parent_compute_collection: External id of the compute collection to which this node belongs
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: DiscoveredNodeListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_discovered_nodes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_discovered_nodes_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_discovered_nodes_with_http_info(self, **kwargs):  # noqa: E501
        """Return the List of Discovered Nodes  # noqa: E501

        Returns information about all discovered nodes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_discovered_nodes_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cm_local_id: Local Id of the discovered node in the Compute Manager
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str display_name: Display name of discovered node
        :param str external_id: External id of the discovered node, ex. a mo-ref from VC
        :param str has_parent: Discovered node has a parent compute collection or is a standalone host
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str ip_address: IP address of the discovered node
        :param str node_id: Id of the fabric node created from the discovered node
        :param str node_type: Discovered Node type like HostNode
        :param str origin_id: Id of the compute manager from where this node was discovered
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str parent_compute_collection: External id of the compute collection to which this node belongs
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: DiscoveredNodeListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cm_local_id', 'cursor', 'display_name', 'external_id', 'has_parent', 'included_fields', 'ip_address', 'node_id', 'node_type', 'origin_id', 'page_size', 'parent_compute_collection', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_discovered_nodes" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_discovered_nodes`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_discovered_nodes`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cm_local_id' in params:
            query_params.append(('cm_local_id', params['cm_local_id']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'display_name' in params:
            query_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'external_id' in params:
            query_params.append(('external_id', params['external_id']))  # noqa: E501
        if 'has_parent' in params:
            query_params.append(('has_parent', params['has_parent']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'ip_address' in params:
            query_params.append(('ip_address', params['ip_address']))  # noqa: E501
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501
        if 'node_type' in params:
            query_params.append(('node_type', params['node_type']))  # noqa: E501
        if 'origin_id' in params:
            query_params.append(('origin_id', params['origin_id']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'parent_compute_collection' in params:
            query_params.append(('parent_compute_collection', params['parent_compute_collection']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/discovered-nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DiscoveredNodeListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_fabric_node_interfaces(self, node_id, **kwargs):  # noqa: E501
        """List the specified node&#39;s Network Interfaces  # noqa: E501

        Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_fabric_node_interfaces(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param str source: Data source type.
        :return: NodeInterfacePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_fabric_node_interfaces_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_fabric_node_interfaces_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def list_fabric_node_interfaces_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """List the specified node&#39;s Network Interfaces  # noqa: E501

        Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_fabric_node_interfaces_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param str source: Data source type.
        :return: NodeInterfacePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'source']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_fabric_node_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `list_fabric_node_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}/network/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInterfacePropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_node_capabilities(self, node_id, **kwargs):  # noqa: E501
        """Return the List of Capabilities of a Single Node  # noqa: E501

        Returns information about capabilities of a single fabric node (host or edge).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_node_capabilities(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :return: NodeCapabilitiesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_node_capabilities_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_node_capabilities_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def list_node_capabilities_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Return the List of Capabilities of a Single Node  # noqa: E501

        Returns information about capabilities of a single fabric node (host or edge).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_node_capabilities_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :return: NodeCapabilitiesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_node_capabilities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `list_node_capabilities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}/capabilities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeCapabilitiesResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_nodes(self, **kwargs):  # noqa: E501
        """Return the List of Nodes  # noqa: E501

        Returns information about all fabric nodes (hosts and edges).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_nodes(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str discovered_node_id: Id of the discovered node which was converted to create this node
        :param str display_name: HostNode display name
        :param str external_id: HostNode external id
        :param str hypervisor_os_type: HostNode's Hypervisor type, for example ESXi, RHEL KVM or UBUNTU KVM.
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str ip_address: Management IP address of the node
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str resource_type: Node type from 'HostNode', 'EdgeNode', 'PublicCloudGatewayNode'
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: NodeListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_nodes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_nodes_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_nodes_with_http_info(self, **kwargs):  # noqa: E501
        """Return the List of Nodes  # noqa: E501

        Returns information about all fabric nodes (hosts and edges).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_nodes_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str discovered_node_id: Id of the discovered node which was converted to create this node
        :param str display_name: HostNode display name
        :param str external_id: HostNode external id
        :param str hypervisor_os_type: HostNode's Hypervisor type, for example ESXi, RHEL KVM or UBUNTU KVM.
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str ip_address: Management IP address of the node
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str resource_type: Node type from 'HostNode', 'EdgeNode', 'PublicCloudGatewayNode'
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: NodeListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'discovered_node_id', 'display_name', 'external_id', 'hypervisor_os_type', 'included_fields', 'ip_address', 'page_size', 'resource_type', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_nodes" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_nodes`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_nodes`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'discovered_node_id' in params:
            query_params.append(('discovered_node_id', params['discovered_node_id']))  # noqa: E501
        if 'display_name' in params:
            query_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'external_id' in params:
            query_params.append(('external_id', params['external_id']))  # noqa: E501
        if 'hypervisor_os_type' in params:
            query_params.append(('hypervisor_os_type', params['hypervisor_os_type']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'ip_address' in params:
            query_params.append(('ip_address', params['ip_address']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'resource_type' in params:
            query_params.append(('resource_type', params['resource_type']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_vifs(self, **kwargs):  # noqa: E501
        """Return the List of Virtual Network Interfaces (VIFs)  # noqa: E501

        Returns information about all VIFs. A virtual network interface aggregates network interfaces into a logical interface unit that is indistinuishable from a physical network interface.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_vifs(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str host_id: Id of the host where this vif is located.
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str lport_attachment_id: LPort Attachment Id of the virtual network interface.
        :param str owner_vm_id: External id of the virtual machine.
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str vm_id: External id of the virtual machine.
        :return: VirtualNetworkInterfaceListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_vifs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_vifs_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_vifs_with_http_info(self, **kwargs):  # noqa: E501
        """Return the List of Virtual Network Interfaces (VIFs)  # noqa: E501

        Returns information about all VIFs. A virtual network interface aggregates network interfaces into a logical interface unit that is indistinuishable from a physical network interface.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_vifs_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str host_id: Id of the host where this vif is located.
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str lport_attachment_id: LPort Attachment Id of the virtual network interface.
        :param str owner_vm_id: External id of the virtual machine.
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str vm_id: External id of the virtual machine.
        :return: VirtualNetworkInterfaceListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'host_id', 'included_fields', 'lport_attachment_id', 'owner_vm_id', 'page_size', 'sort_ascending', 'sort_by', 'vm_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_vifs" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_vifs`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_vifs`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'host_id' in params:
            query_params.append(('host_id', params['host_id']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'lport_attachment_id' in params:
            query_params.append(('lport_attachment_id', params['lport_attachment_id']))  # noqa: E501
        if 'owner_vm_id' in params:
            query_params.append(('owner_vm_id', params['owner_vm_id']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'vm_id' in params:
            query_params.append(('vm_id', params['vm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/vifs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualNetworkInterfaceListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_virtual_machines(self, **kwargs):  # noqa: E501
        """Return the List of Virtual Machines  # noqa: E501

        Returns information about all virtual machines.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_virtual_machines(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str display_name: Display Name of the virtual machine
        :param str external_id: External id of the virtual machine
        :param str host_id: Id of the host where this vif is located
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: VirtualMachineListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_virtual_machines_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_virtual_machines_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_virtual_machines_with_http_info(self, **kwargs):  # noqa: E501
        """Return the List of Virtual Machines  # noqa: E501

        Returns information about all virtual machines.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_virtual_machines_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str display_name: Display Name of the virtual machine
        :param str external_id: External id of the virtual machine
        :param str host_id: Id of the host where this vif is located
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: VirtualMachineListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'display_name', 'external_id', 'host_id', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_virtual_machines" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_virtual_machines`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `list_virtual_machines`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'display_name' in params:
            query_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'external_id' in params:
            query_params.append(('external_id', params['external_id']))  # noqa: E501
        if 'host_id' in params:
            query_params.append(('host_id', params['host_id']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/virtual-machines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualMachineListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_host_node_upgrade_action_upgrade_infra(self, node_id, **kwargs):  # noqa: E501
        """Perform a service deployment upgrade on a host node  # noqa: E501

        Perform a service deployment upgrade on a host node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.perform_host_node_upgrade_action_upgrade_infra(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param bool disable_vm_migration: Should VM migration be disabled during upgrade
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.perform_host_node_upgrade_action_upgrade_infra_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_host_node_upgrade_action_upgrade_infra_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def perform_host_node_upgrade_action_upgrade_infra_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Perform a service deployment upgrade on a host node  # noqa: E501

        Perform a service deployment upgrade on a host node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.perform_host_node_upgrade_action_upgrade_infra_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param bool disable_vm_migration: Should VM migration be disabled during upgrade
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'disable_vm_migration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_host_node_upgrade_action_upgrade_infra" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `perform_host_node_upgrade_action_upgrade_infra`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []
        if 'disable_vm_migration' in params:
            query_params.append(('disable_vm_migration', params['disable_vm_migration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}?action=upgrade_infra', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Node',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_node_action(self, node_id, **kwargs):  # noqa: E501
        """Perform an Action on Fabric Node  # noqa: E501

        The supported fabric node actions are enter_maintenance_mode, exit_maintenance_mode for EdgeNode. This API is deprecated, please call TransportNode maintenance mode API to update maintenance mode, refer to \"Update transport node maintenance mode\".   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.perform_node_action(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param str action: Supported fabric node actions
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.perform_node_action_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_node_action_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def perform_node_action_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Perform an Action on Fabric Node  # noqa: E501

        The supported fabric node actions are enter_maintenance_mode, exit_maintenance_mode for EdgeNode. This API is deprecated, please call TransportNode maintenance mode API to update maintenance mode, refer to \"Update transport node maintenance mode\".   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.perform_node_action_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param str action: Supported fabric node actions
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'action']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_node_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `perform_node_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Node',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_compute_collection(self, cc_ext_id, **kwargs):  # noqa: E501
        """Return Compute Collection Information  # noqa: E501

        Returns information about a specific compute collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_compute_collection(cc_ext_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str cc_ext_id: (required)
        :return: ComputeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.read_compute_collection_with_http_info(cc_ext_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_compute_collection_with_http_info(cc_ext_id, **kwargs)  # noqa: E501
            return data

    def read_compute_collection_with_http_info(self, cc_ext_id, **kwargs):  # noqa: E501
        """Return Compute Collection Information  # noqa: E501

        Returns information about a specific compute collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_compute_collection_with_http_info(cc_ext_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str cc_ext_id: (required)
        :return: ComputeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cc_ext_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_compute_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cc_ext_id' is set
        if ('cc_ext_id' not in params or
                params['cc_ext_id'] is None):
            raise ValueError("Missing the required parameter `cc_ext_id` when calling `read_compute_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cc_ext_id' in params:
            path_params['cc-ext-id'] = params['cc_ext_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collections/{cc-ext-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeCollection',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_compute_manager(self, compute_manager_id, **kwargs):  # noqa: E501
        """Return compute manager Information  # noqa: E501

        Returns information about a specific compute manager  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_compute_manager(compute_manager_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compute_manager_id: (required)
        :return: ComputeManager
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.read_compute_manager_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_compute_manager_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
            return data

    def read_compute_manager_with_http_info(self, compute_manager_id, **kwargs):  # noqa: E501
        """Return compute manager Information  # noqa: E501

        Returns information about a specific compute manager  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_compute_manager_with_http_info(compute_manager_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compute_manager_id: (required)
        :return: ComputeManager
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compute_manager_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_compute_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compute_manager_id' is set
        if ('compute_manager_id' not in params or
                params['compute_manager_id'] is None):
            raise ValueError("Missing the required parameter `compute_manager_id` when calling `read_compute_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compute_manager_id' in params:
            path_params['compute-manager-id'] = params['compute_manager_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-managers/{compute-manager-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeManager',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_compute_manager_status(self, compute_manager_id, **kwargs):  # noqa: E501
        """Return runtime status information for a compute manager  # noqa: E501

        Returns connection and version information about a compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_compute_manager_status(compute_manager_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compute_manager_id: (required)
        :return: ComputeManagerStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.read_compute_manager_status_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_compute_manager_status_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
            return data

    def read_compute_manager_status_with_http_info(self, compute_manager_id, **kwargs):  # noqa: E501
        """Return runtime status information for a compute manager  # noqa: E501

        Returns connection and version information about a compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_compute_manager_status_with_http_info(compute_manager_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compute_manager_id: (required)
        :return: ComputeManagerStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compute_manager_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_compute_manager_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compute_manager_id' is set
        if ('compute_manager_id' not in params or
                params['compute_manager_id'] is None):
            raise ValueError("Missing the required parameter `compute_manager_id` when calling `read_compute_manager_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compute_manager_id' in params:
            path_params['compute-manager-id'] = params['compute_manager_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-managers/{compute-manager-id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeManagerStatus',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_discovered_node(self, node_ext_id, **kwargs):  # noqa: E501
        """Return Discovered Node Information  # noqa: E501

        Returns information about a specific discovered node.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_discovered_node(node_ext_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_ext_id: (required)
        :return: DiscoveredNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.read_discovered_node_with_http_info(node_ext_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_discovered_node_with_http_info(node_ext_id, **kwargs)  # noqa: E501
            return data

    def read_discovered_node_with_http_info(self, node_ext_id, **kwargs):  # noqa: E501
        """Return Discovered Node Information  # noqa: E501

        Returns information about a specific discovered node.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_discovered_node_with_http_info(node_ext_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_ext_id: (required)
        :return: DiscoveredNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_ext_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_discovered_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_ext_id' is set
        if ('node_ext_id' not in params or
                params['node_ext_id'] is None):
            raise ValueError("Missing the required parameter `node_ext_id` when calling `read_discovered_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_ext_id' in params:
            path_params['node-ext-id'] = params['node_ext_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/discovered-nodes/{node-ext-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DiscoveredNode',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_fabric_node_interface(self, node_id, interface_id, **kwargs):  # noqa: E501
        """Read the node&#39;s Network Interface  # noqa: E501

        Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_fabric_node_interface(node_id, interface_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param str interface_id: (required)
        :param str source: Data source type.
        :return: NodeInterfaceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.read_fabric_node_interface_with_http_info(node_id, interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_fabric_node_interface_with_http_info(node_id, interface_id, **kwargs)  # noqa: E501
            return data

    def read_fabric_node_interface_with_http_info(self, node_id, interface_id, **kwargs):  # noqa: E501
        """Read the node&#39;s Network Interface  # noqa: E501

        Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_fabric_node_interface_with_http_info(node_id, interface_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param str interface_id: (required)
        :param str source: Data source type.
        :return: NodeInterfaceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'interface_id', 'source']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_fabric_node_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `read_fabric_node_interface`")  # noqa: E501
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params or
                params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `read_fabric_node_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501
        if 'interface_id' in params:
            path_params['interface-id'] = params['interface_id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}/network/interfaces/{interface-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInterfaceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_fabric_node_interface_statistics(self, node_id, interface_id, **kwargs):  # noqa: E501
        """Read the NSX Manager&#39;s Network Interface Statistics  # noqa: E501

        On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_fabric_node_interface_statistics(node_id, interface_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param str interface_id: (required)
        :param str source: Data source type.
        :return: NodeInterfaceStatisticsProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.read_fabric_node_interface_statistics_with_http_info(node_id, interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_fabric_node_interface_statistics_with_http_info(node_id, interface_id, **kwargs)  # noqa: E501
            return data

    def read_fabric_node_interface_statistics_with_http_info(self, node_id, interface_id, **kwargs):  # noqa: E501
        """Read the NSX Manager&#39;s Network Interface Statistics  # noqa: E501

        On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_fabric_node_interface_statistics_with_http_info(node_id, interface_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param str interface_id: (required)
        :param str source: Data source type.
        :return: NodeInterfaceStatisticsProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'interface_id', 'source']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_fabric_node_interface_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `read_fabric_node_interface_statistics`")  # noqa: E501
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params or
                params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `read_fabric_node_interface_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501
        if 'interface_id' in params:
            path_params['interface-id'] = params['interface_id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}/network/interfaces/{interface-id}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInterfaceStatisticsProperties',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node(self, node_id, **kwargs):  # noqa: E501
        """Return Node Information  # noqa: E501

        Returns information about a specific fabric node (host or edge).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_node(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.read_node_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_node_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def read_node_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Return Node Information  # noqa: E501

        Returns information about a specific fabric node (host or edge).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_node_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `read_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Node',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_status(self, node_id, **kwargs):  # noqa: E501
        """Return Runtime Status Information for a Node  # noqa: E501

        Returns connectivity, heartbeat, and version information about a fabric node (host or edge). Note that the LCP connectivity status remains down until after the fabric node has been added as a transpot node and the NSX host switch has been successfully installed. See POST /api/v1/transport-nodes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_node_status(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param str source: Data source type.
        :return: NodeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.read_node_status_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_node_status_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def read_node_status_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Return Runtime Status Information for a Node  # noqa: E501

        Returns connectivity, heartbeat, and version information about a fabric node (host or edge). Note that the LCP connectivity status remains down until after the fabric node has been added as a transpot node and the NSX host switch has been successfully installed. See POST /api/v1/transport-nodes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_node_status_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param str source: Data source type.
        :return: NodeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'source']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `read_node_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeStatus',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_nodes_status(self, read_nodes_status_request_parameters, **kwargs):  # noqa: E501
        """Return Runtime Status Information for given Nodes  # noqa: E501

        Returns connectivity, heartbeat, and version information about all fabric nodes (host or edge).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_nodes_status(read_nodes_status_request_parameters, async=True)
        >>> result = thread.get()

        :param async bool
        :param ReadNodesStatusRequestParameters read_nodes_status_request_parameters: (required)
        :return: NodeStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.read_nodes_status_with_http_info(read_nodes_status_request_parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.read_nodes_status_with_http_info(read_nodes_status_request_parameters, **kwargs)  # noqa: E501
            return data

    def read_nodes_status_with_http_info(self, read_nodes_status_request_parameters, **kwargs):  # noqa: E501
        """Return Runtime Status Information for given Nodes  # noqa: E501

        Returns connectivity, heartbeat, and version information about all fabric nodes (host or edge).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_nodes_status_with_http_info(read_nodes_status_request_parameters, async=True)
        >>> result = thread.get()

        :param async bool
        :param ReadNodesStatusRequestParameters read_nodes_status_request_parameters: (required)
        :return: NodeStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['read_nodes_status_request_parameters']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_nodes_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'read_nodes_status_request_parameters' is set
        if ('read_nodes_status_request_parameters' not in params or
                params['read_nodes_status_request_parameters'] is None):
            raise ValueError("Missing the required parameter `read_nodes_status_request_parameters` when calling `read_nodes_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'read_nodes_status_request_parameters' in params:
            body_params = params['read_nodes_status_request_parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeStatusListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restart_inventory_sync_restart_inventory_sync(self, node_id, **kwargs):  # noqa: E501
        """Restart the inventory sync for the node if it is paused currently.  # noqa: E501

        Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.restart_inventory_sync_restart_inventory_sync(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.restart_inventory_sync_restart_inventory_sync_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.restart_inventory_sync_restart_inventory_sync_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def restart_inventory_sync_restart_inventory_sync_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Restart the inventory sync for the node if it is paused currently.  # noqa: E501

        Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.restart_inventory_sync_restart_inventory_sync_with_http_info(node_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restart_inventory_sync_restart_inventory_sync" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `restart_inventory_sync_restart_inventory_sync`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}?action=restart_inventory_sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_compute_collection_fabric_template(self, fabric_template_id, compute_collection_fabric_template, **kwargs):  # noqa: E501
        """Updates compute collection fabric template  # noqa: E501

        Updates compute collection fabric template for the given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_compute_collection_fabric_template(fabric_template_id, compute_collection_fabric_template, async=True)
        >>> result = thread.get()

        :param async bool
        :param str fabric_template_id: (required)
        :param ComputeCollectionFabricTemplate compute_collection_fabric_template: (required)
        :return: ComputeCollectionFabricTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_compute_collection_fabric_template_with_http_info(fabric_template_id, compute_collection_fabric_template, **kwargs)  # noqa: E501
        else:
            (data) = self.update_compute_collection_fabric_template_with_http_info(fabric_template_id, compute_collection_fabric_template, **kwargs)  # noqa: E501
            return data

    def update_compute_collection_fabric_template_with_http_info(self, fabric_template_id, compute_collection_fabric_template, **kwargs):  # noqa: E501
        """Updates compute collection fabric template  # noqa: E501

        Updates compute collection fabric template for the given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_compute_collection_fabric_template_with_http_info(fabric_template_id, compute_collection_fabric_template, async=True)
        >>> result = thread.get()

        :param async bool
        :param str fabric_template_id: (required)
        :param ComputeCollectionFabricTemplate compute_collection_fabric_template: (required)
        :return: ComputeCollectionFabricTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric_template_id', 'compute_collection_fabric_template']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_compute_collection_fabric_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric_template_id' is set
        if ('fabric_template_id' not in params or
                params['fabric_template_id'] is None):
            raise ValueError("Missing the required parameter `fabric_template_id` when calling `update_compute_collection_fabric_template`")  # noqa: E501
        # verify the required parameter 'compute_collection_fabric_template' is set
        if ('compute_collection_fabric_template' not in params or
                params['compute_collection_fabric_template'] is None):
            raise ValueError("Missing the required parameter `compute_collection_fabric_template` when calling `update_compute_collection_fabric_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric_template_id' in params:
            path_params['fabric-template-id'] = params['fabric_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'compute_collection_fabric_template' in params:
            body_params = params['compute_collection_fabric_template']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collection-fabric-templates/{fabric-template-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeCollectionFabricTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_compute_manager(self, compute_manager_id, compute_manager, **kwargs):  # noqa: E501
        """Update compute manager  # noqa: E501

        Updates a specified compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_compute_manager(compute_manager_id, compute_manager, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compute_manager_id: (required)
        :param ComputeManager compute_manager: (required)
        :return: ComputeManager
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_compute_manager_with_http_info(compute_manager_id, compute_manager, **kwargs)  # noqa: E501
        else:
            (data) = self.update_compute_manager_with_http_info(compute_manager_id, compute_manager, **kwargs)  # noqa: E501
            return data

    def update_compute_manager_with_http_info(self, compute_manager_id, compute_manager, **kwargs):  # noqa: E501
        """Update compute manager  # noqa: E501

        Updates a specified compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_compute_manager_with_http_info(compute_manager_id, compute_manager, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compute_manager_id: (required)
        :param ComputeManager compute_manager: (required)
        :return: ComputeManager
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compute_manager_id', 'compute_manager']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_compute_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compute_manager_id' is set
        if ('compute_manager_id' not in params or
                params['compute_manager_id'] is None):
            raise ValueError("Missing the required parameter `compute_manager_id` when calling `update_compute_manager`")  # noqa: E501
        # verify the required parameter 'compute_manager' is set
        if ('compute_manager' not in params or
                params['compute_manager'] is None):
            raise ValueError("Missing the required parameter `compute_manager` when calling `update_compute_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compute_manager_id' in params:
            path_params['compute-manager-id'] = params['compute_manager_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'compute_manager' in params:
            body_params = params['compute_manager']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-managers/{compute-manager-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeManager',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_node(self, node_id, node, **kwargs):  # noqa: E501
        """Update a Node  # noqa: E501

        Modifies attributes of a fabric node (host or edge).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_node(node_id, node, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param Node node: (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_node_with_http_info(node_id, node, **kwargs)  # noqa: E501
        else:
            (data) = self.update_node_with_http_info(node_id, node, **kwargs)  # noqa: E501
            return data

    def update_node_with_http_info(self, node_id, node, **kwargs):  # noqa: E501
        """Update a Node  # noqa: E501

        Modifies attributes of a fabric node (host or edge).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_node_with_http_info(node_id, node, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node_id: (required)
        :param Node node: (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'node']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `update_node`")  # noqa: E501
        # verify the required parameter 'node' is set
        if ('node' not in params or
                params['node'] is None):
            raise ValueError("Missing the required parameter `node` when calling `update_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'node' in params:
            body_params = params['node']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Node',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_virtual_machine_tags_update_tags(self, virtual_machine_tag_update, **kwargs):  # noqa: E501
        """Update tags applied to a virtual machine  # noqa: E501

        Update tags applied to the virtual machine. External id of the virtual machine will be specified in the request body. Request body should contain all the tags to be applied. To clear all tags, provide an empty list. User can apply maximum 10 tags on a virtual machine. The remaining 5 are reserved for system defined tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_virtual_machine_tags_update_tags(virtual_machine_tag_update, async=True)
        >>> result = thread.get()

        :param async bool
        :param VirtualMachineTagUpdate virtual_machine_tag_update: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_virtual_machine_tags_update_tags_with_http_info(virtual_machine_tag_update, **kwargs)  # noqa: E501
        else:
            (data) = self.update_virtual_machine_tags_update_tags_with_http_info(virtual_machine_tag_update, **kwargs)  # noqa: E501
            return data

    def update_virtual_machine_tags_update_tags_with_http_info(self, virtual_machine_tag_update, **kwargs):  # noqa: E501
        """Update tags applied to a virtual machine  # noqa: E501

        Update tags applied to the virtual machine. External id of the virtual machine will be specified in the request body. Request body should contain all the tags to be applied. To clear all tags, provide an empty list. User can apply maximum 10 tags on a virtual machine. The remaining 5 are reserved for system defined tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_virtual_machine_tags_update_tags_with_http_info(virtual_machine_tag_update, async=True)
        >>> result = thread.get()

        :param async bool
        :param VirtualMachineTagUpdate virtual_machine_tag_update: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['virtual_machine_tag_update']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_virtual_machine_tags_update_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'virtual_machine_tag_update' is set
        if ('virtual_machine_tag_update' not in params or
                params['virtual_machine_tag_update'] is None):
            raise ValueError("Missing the required parameter `virtual_machine_tag_update` when calling `update_virtual_machine_tags_update_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'virtual_machine_tag_update' in params:
            body_params = params['virtual_machine_tag_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/virtual-machines?action=update_tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
