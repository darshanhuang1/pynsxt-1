# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UpgradeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_upgrade_units_to_group_add_upgrade_units(self, group_id, upgrade_unit_list, **kwargs):  # noqa: E501
        """Add upgrade units to specified upgrade unit group  # noqa: E501

        Add upgrade units to specified upgrade unit group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_upgrade_units_to_group_add_upgrade_units(group_id, upgrade_unit_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: (required)
        :param UpgradeUnitList upgrade_unit_list: (required)
        :return: UpgradeUnitList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_upgrade_units_to_group_add_upgrade_units_with_http_info(group_id, upgrade_unit_list, **kwargs)  # noqa: E501
        else:
            (data) = self.add_upgrade_units_to_group_add_upgrade_units_with_http_info(group_id, upgrade_unit_list, **kwargs)  # noqa: E501
            return data

    def add_upgrade_units_to_group_add_upgrade_units_with_http_info(self, group_id, upgrade_unit_list, **kwargs):  # noqa: E501
        """Add upgrade units to specified upgrade unit group  # noqa: E501

        Add upgrade units to specified upgrade unit group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_upgrade_units_to_group_add_upgrade_units_with_http_info(group_id, upgrade_unit_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: (required)
        :param UpgradeUnitList upgrade_unit_list: (required)
        :return: UpgradeUnitList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'upgrade_unit_list']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_upgrade_units_to_group_add_upgrade_units" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `add_upgrade_units_to_group_add_upgrade_units`")  # noqa: E501
        # verify the required parameter 'upgrade_unit_list' is set
        if ('upgrade_unit_list' not in params or
                params['upgrade_unit_list'] is None):
            raise ValueError("Missing the required parameter `upgrade_unit_list` when calling `add_upgrade_units_to_group_add_upgrade_units`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upgrade_unit_list' in params:
            body_params = params['upgrade_unit_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-unit-groups/{group-id}?action=add_upgrade_units', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeUnitList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def continue_upgrade_continue(self, **kwargs):  # noqa: E501
        """Continue upgrade  # noqa: E501

        Continue upgrade  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.continue_upgrade_continue(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool skip: Skip to upgrade of next component.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.continue_upgrade_continue_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.continue_upgrade_continue_with_http_info(**kwargs)  # noqa: E501
            return data

    def continue_upgrade_continue_with_http_info(self, **kwargs):  # noqa: E501
        """Continue upgrade  # noqa: E501

        Continue upgrade  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.continue_upgrade_continue_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool skip: Skip to upgrade of next component.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skip']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method continue_upgrade_continue" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/plan?action=continue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_upgrade_unit_group(self, upgrade_unit_group, **kwargs):  # noqa: E501
        """Create a group  # noqa: E501

        Create a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_upgrade_unit_group(upgrade_unit_group, async=True)
        >>> result = thread.get()

        :param async bool
        :param UpgradeUnitGroup upgrade_unit_group: (required)
        :return: UpgradeUnitGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_upgrade_unit_group_with_http_info(upgrade_unit_group, **kwargs)  # noqa: E501
        else:
            (data) = self.create_upgrade_unit_group_with_http_info(upgrade_unit_group, **kwargs)  # noqa: E501
            return data

    def create_upgrade_unit_group_with_http_info(self, upgrade_unit_group, **kwargs):  # noqa: E501
        """Create a group  # noqa: E501

        Create a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_upgrade_unit_group_with_http_info(upgrade_unit_group, async=True)
        >>> result = thread.get()

        :param async bool
        :param UpgradeUnitGroup upgrade_unit_group: (required)
        :return: UpgradeUnitGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upgrade_unit_group']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_upgrade_unit_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upgrade_unit_group' is set
        if ('upgrade_unit_group' not in params or
                params['upgrade_unit_group'] is None):
            raise ValueError("Missing the required parameter `upgrade_unit_group` when calling `create_upgrade_unit_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upgrade_unit_group' in params:
            body_params = params['upgrade_unit_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-unit-groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeUnitGroup',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_upgrade_unit_group(self, group_id, **kwargs):  # noqa: E501
        """Delete the upgrade unit group  # noqa: E501

        Delete the upgrade unit group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_upgrade_unit_group(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_upgrade_unit_group_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_upgrade_unit_group_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def delete_upgrade_unit_group_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """Delete the upgrade unit group  # noqa: E501

        Delete the upgrade unit group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_upgrade_unit_group_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_upgrade_unit_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `delete_upgrade_unit_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-unit-groups/{group-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nodes(self, **kwargs):  # noqa: E501
        """Get list of nodes across all types  # noqa: E501

        Get list of nodes across all types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_nodes(async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type based on which nodes will be filtered
        :param str component_version: Component version based on which nodes will be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: NodeInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_nodes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_nodes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_nodes_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of nodes across all types  # noqa: E501

        Get list of nodes across all types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_nodes_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type based on which nodes will be filtered
        :param str component_version: Component version based on which nodes will be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: NodeInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'component_version', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nodes" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_nodes`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_nodes`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'component_type' in params:
            query_params.append(('component_type', params['component_type']))  # noqa: E501
        if 'component_version' in params:
            query_params.append(('component_version', params['component_version']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInfoListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nodes_summary(self, **kwargs):  # noqa: E501
        """Get summary of nodes  # noqa: E501

        Get summary of nodes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_nodes_summary(async=True)
        >>> result = thread.get()

        :param async bool
        :return: NodeSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_nodes_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_nodes_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_nodes_summary_with_http_info(self, **kwargs):  # noqa: E501
        """Get summary of nodes  # noqa: E501

        Get summary of nodes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_nodes_summary_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: NodeSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nodes_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/nodes-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upgrade_history(self, **kwargs):  # noqa: E501
        """Get upgrade history  # noqa: E501

        Get upgrade history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_history(async=True)
        >>> result = thread.get()

        :param async bool
        :return: UpgradeHistoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_upgrade_history_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_upgrade_history_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_upgrade_history_with_http_info(self, **kwargs):  # noqa: E501
        """Get upgrade history  # noqa: E501

        Get upgrade history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_history_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: UpgradeHistoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_history" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeHistoryList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upgrade_plan_settings(self, component_type, **kwargs):  # noqa: E501
        """Get upgrade plan settings for the component  # noqa: E501

        Get the upgrade plan settings for the component.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_plan_settings(component_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: (required)
        :return: UpgradePlanSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_upgrade_plan_settings_with_http_info(component_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_upgrade_plan_settings_with_http_info(component_type, **kwargs)  # noqa: E501
            return data

    def get_upgrade_plan_settings_with_http_info(self, component_type, **kwargs):  # noqa: E501
        """Get upgrade plan settings for the component  # noqa: E501

        Get the upgrade plan settings for the component.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_plan_settings_with_http_info(component_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: (required)
        :return: UpgradePlanSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_plan_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_type' is set
        if ('component_type' not in params or
                params['component_type'] is None):
            raise ValueError("Missing the required parameter `component_type` when calling `get_upgrade_plan_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_type' in params:
            path_params['component_type'] = params['component_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/plan/{component_type}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradePlanSettings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upgrade_status_summary(self, **kwargs):  # noqa: E501
        """Get upgrade status summary  # noqa: E501

        Get upgrade status summary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_status_summary(async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type based on which upgrade units to be filtered
        :param str selection_status: Flag to indicate whether to return status for only selected, only deselected or both type of upgrade units
        :return: UpgradeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_upgrade_status_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_upgrade_status_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_upgrade_status_summary_with_http_info(self, **kwargs):  # noqa: E501
        """Get upgrade status summary  # noqa: E501

        Get upgrade status summary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_status_summary_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type based on which upgrade units to be filtered
        :param str selection_status: Flag to indicate whether to return status for only selected, only deselected or both type of upgrade units
        :return: UpgradeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'selection_status']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_status_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'component_type' in params:
            query_params.append(('component_type', params['component_type']))  # noqa: E501
        if 'selection_status' in params:
            query_params.append(('selection_status', params['selection_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/status-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeStatus',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upgrade_summary(self, **kwargs):  # noqa: E501
        """Get upgrade summary  # noqa: E501

        Get upgrade summary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_summary(async=True)
        >>> result = thread.get()

        :param async bool
        :return: UpgradeSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_upgrade_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_upgrade_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_upgrade_summary_with_http_info(self, **kwargs):  # noqa: E501
        """Get upgrade summary  # noqa: E501

        Get upgrade summary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_summary_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: UpgradeSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeSummary',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upgrade_unit(self, upgrade_unit_id, **kwargs):  # noqa: E501
        """Get a specific upgrade unit  # noqa: E501

        Get a specific upgrade unit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_unit(upgrade_unit_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str upgrade_unit_id: (required)
        :return: UpgradeUnit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_upgrade_unit_with_http_info(upgrade_unit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_upgrade_unit_with_http_info(upgrade_unit_id, **kwargs)  # noqa: E501
            return data

    def get_upgrade_unit_with_http_info(self, upgrade_unit_id, **kwargs):  # noqa: E501
        """Get a specific upgrade unit  # noqa: E501

        Get a specific upgrade unit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_unit_with_http_info(upgrade_unit_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str upgrade_unit_id: (required)
        :return: UpgradeUnit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upgrade_unit_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_unit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upgrade_unit_id' is set
        if ('upgrade_unit_id' not in params or
                params['upgrade_unit_id'] is None):
            raise ValueError("Missing the required parameter `upgrade_unit_id` when calling `get_upgrade_unit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upgrade_unit_id' in params:
            path_params['upgrade-unit-id'] = params['upgrade_unit_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-units/{upgrade-unit-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeUnit',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upgrade_unit_aggregate_info(self, **kwargs):  # noqa: E501
        """Get upgrade units aggregate-info  # noqa: E501

        Get upgrade units aggregate-info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_unit_aggregate_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type based on which upgrade units to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str group_id: Identifier of group based on which upgrade units to be filtered
        :param bool has_errors: Flag to indicate whether to return only upgrade units with errors
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str metadata: Metadata about upgrade unit to filter on
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str selection_status: Flag to indicate whether to return only selected, only deselected or both type of upgrade units
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: UpgradeUnitAggregateInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_upgrade_unit_aggregate_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_upgrade_unit_aggregate_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_upgrade_unit_aggregate_info_with_http_info(self, **kwargs):  # noqa: E501
        """Get upgrade units aggregate-info  # noqa: E501

        Get upgrade units aggregate-info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_unit_aggregate_info_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type based on which upgrade units to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str group_id: Identifier of group based on which upgrade units to be filtered
        :param bool has_errors: Flag to indicate whether to return only upgrade units with errors
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str metadata: Metadata about upgrade unit to filter on
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str selection_status: Flag to indicate whether to return only selected, only deselected or both type of upgrade units
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: UpgradeUnitAggregateInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'cursor', 'group_id', 'has_errors', 'included_fields', 'metadata', 'page_size', 'selection_status', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_unit_aggregate_info" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_upgrade_unit_aggregate_info`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_upgrade_unit_aggregate_info`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'component_type' in params:
            query_params.append(('component_type', params['component_type']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'has_errors' in params:
            query_params.append(('has_errors', params['has_errors']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'selection_status' in params:
            query_params.append(('selection_status', params['selection_status']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-units/aggregate-info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeUnitAggregateInfoListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upgrade_unit_group(self, group_id, **kwargs):  # noqa: E501
        """Return upgrade unit group information  # noqa: E501

        Return upgrade unit group information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_unit_group(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: (required)
        :param bool summary: Flag indicating whether to return the summary
        :return: UpgradeUnitGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_upgrade_unit_group_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_upgrade_unit_group_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_upgrade_unit_group_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """Return upgrade unit group information  # noqa: E501

        Return upgrade unit group information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_unit_group_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: (required)
        :param bool summary: Flag indicating whether to return the summary
        :return: UpgradeUnitGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'summary']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_unit_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_upgrade_unit_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []
        if 'summary' in params:
            query_params.append(('summary', params['summary']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-unit-groups/{group-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeUnitGroup',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upgrade_unit_group_aggregate_info(self, **kwargs):  # noqa: E501
        """Return aggregate information of all upgrade unit groups  # noqa: E501

        Return aggregate information of all upgrade unit groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_unit_group_aggregate_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type based on which upgrade unit groups to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param bool summary: Flag indicating whether to return summary
        :param bool sync: Synchronize before returning upgrade unit groups
        :return: UpgradeUnitGroupAggregateInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_upgrade_unit_group_aggregate_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_upgrade_unit_group_aggregate_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_upgrade_unit_group_aggregate_info_with_http_info(self, **kwargs):  # noqa: E501
        """Return aggregate information of all upgrade unit groups  # noqa: E501

        Return aggregate information of all upgrade unit groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_unit_group_aggregate_info_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type based on which upgrade unit groups to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param bool summary: Flag indicating whether to return summary
        :param bool sync: Synchronize before returning upgrade unit groups
        :return: UpgradeUnitGroupAggregateInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by', 'summary', 'sync']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_unit_group_aggregate_info" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_upgrade_unit_group_aggregate_info`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_upgrade_unit_group_aggregate_info`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'component_type' in params:
            query_params.append(('component_type', params['component_type']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'summary' in params:
            query_params.append(('summary', params['summary']))  # noqa: E501
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-unit-groups/aggregate-info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeUnitGroupAggregateInfoListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upgrade_unit_group_status(self, group_id, **kwargs):  # noqa: E501
        """Get upgrade status for group  # noqa: E501

        Get upgrade status for group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_unit_group_status(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param bool has_errors: Flag to indicate whether to return only upgrade units with errors
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: UpgradeUnitStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_upgrade_unit_group_status_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_upgrade_unit_group_status_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_upgrade_unit_group_status_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """Get upgrade status for group  # noqa: E501

        Get upgrade status for group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_unit_group_status_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param bool has_errors: Flag to indicate whether to return only upgrade units with errors
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: UpgradeUnitStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'cursor', 'has_errors', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_unit_group_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_upgrade_unit_group_status`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_upgrade_unit_group_status`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_upgrade_unit_group_status`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'has_errors' in params:
            query_params.append(('has_errors', params['has_errors']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-unit-groups/{group-id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeUnitStatusListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upgrade_unit_groups(self, **kwargs):  # noqa: E501
        """Return information of all upgrade unit groups  # noqa: E501

        Return information of all upgrade unit groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_unit_groups(async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type based on which upgrade unit groups to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param bool summary: Flag indicating whether to return summary
        :param bool sync: Synchronize before returning upgrade unit groups
        :return: UpgradeUnitGroupListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_upgrade_unit_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_upgrade_unit_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_upgrade_unit_groups_with_http_info(self, **kwargs):  # noqa: E501
        """Return information of all upgrade unit groups  # noqa: E501

        Return information of all upgrade unit groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_unit_groups_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type based on which upgrade unit groups to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param bool summary: Flag indicating whether to return summary
        :param bool sync: Synchronize before returning upgrade unit groups
        :return: UpgradeUnitGroupListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by', 'summary', 'sync']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_unit_groups" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_upgrade_unit_groups`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_upgrade_unit_groups`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'component_type' in params:
            query_params.append(('component_type', params['component_type']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'summary' in params:
            query_params.append(('summary', params['summary']))  # noqa: E501
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-unit-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeUnitGroupListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upgrade_unit_groups_status(self, **kwargs):  # noqa: E501
        """Get upgrade status for upgrade unit groups  # noqa: E501

        Get upgrade status for upgrade unit groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_unit_groups_status(async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type based on which upgrade unit groups to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: UpgradeUnitGroupStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_upgrade_unit_groups_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_upgrade_unit_groups_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_upgrade_unit_groups_status_with_http_info(self, **kwargs):  # noqa: E501
        """Get upgrade status for upgrade unit groups  # noqa: E501

        Get upgrade status for upgrade unit groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_unit_groups_status_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type based on which upgrade unit groups to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: UpgradeUnitGroupStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_unit_groups_status" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_upgrade_unit_groups_status`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_upgrade_unit_groups_status`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'component_type' in params:
            query_params.append(('component_type', params['component_type']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-unit-groups-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeUnitGroupStatusListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upgrade_units(self, **kwargs):  # noqa: E501
        """Get upgrade units  # noqa: E501

        Get upgrade units  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_units(async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type based on which upgrade units to be filtered
        :param str current_version: Current version of upgrade unit based on which upgrade units to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str group_id: UUID of group based on which upgrade units to be filtered
        :param bool has_warnings: Flag to indicate whether to return only upgrade units with warnings
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str metadata: Metadata about upgrade unit to filter on
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str upgrade_unit_type: Upgrade unit type based on which upgrade units to be filtered
        :return: UpgradeUnitListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_upgrade_units_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_upgrade_units_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_upgrade_units_with_http_info(self, **kwargs):  # noqa: E501
        """Get upgrade units  # noqa: E501

        Get upgrade units  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_units_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type based on which upgrade units to be filtered
        :param str current_version: Current version of upgrade unit based on which upgrade units to be filtered
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str group_id: UUID of group based on which upgrade units to be filtered
        :param bool has_warnings: Flag to indicate whether to return only upgrade units with warnings
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param str metadata: Metadata about upgrade unit to filter on
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str upgrade_unit_type: Upgrade unit type based on which upgrade units to be filtered
        :return: UpgradeUnitListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'current_version', 'cursor', 'group_id', 'has_warnings', 'included_fields', 'metadata', 'page_size', 'sort_ascending', 'sort_by', 'upgrade_unit_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_units" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_upgrade_units`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_upgrade_units`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'component_type' in params:
            query_params.append(('component_type', params['component_type']))  # noqa: E501
        if 'current_version' in params:
            query_params.append(('current_version', params['current_version']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'has_warnings' in params:
            query_params.append(('has_warnings', params['has_warnings']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'upgrade_unit_type' in params:
            query_params.append(('upgrade_unit_type', params['upgrade_unit_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-units', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeUnitListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_upgrade_units_stats(self, **kwargs):  # noqa: E501
        """Get upgrade units stats  # noqa: E501

        Get upgrade units stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_units_stats(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param bool sync: Synchronize before returning upgrade unit stats
        :return: UpgradeUnitTypeStatsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_upgrade_units_stats_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_upgrade_units_stats_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_upgrade_units_stats_with_http_info(self, **kwargs):  # noqa: E501
        """Get upgrade units stats  # noqa: E501

        Get upgrade units stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_upgrade_units_stats_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included to result of query
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param bool sync: Synchronize before returning upgrade unit stats
        :return: UpgradeUnitTypeStatsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by', 'sync']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_units_stats" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_upgrade_units_stats`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_upgrade_units_stats`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-units-stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeUnitTypeStatsList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_version_whitelist(self, **kwargs):  # noqa: E501
        """Get the version whitelist  # noqa: E501

        Get whitelist of versions for different components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_version_whitelist(async=True)
        >>> result = thread.get()

        :param async bool
        :return: AcceptableComponentVersionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_version_whitelist_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_version_whitelist_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_version_whitelist_with_http_info(self, **kwargs):  # noqa: E501
        """Get the version whitelist  # noqa: E501

        Get whitelist of versions for different components  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_version_whitelist_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: AcceptableComponentVersionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_version_whitelist" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/version-whitelist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AcceptableComponentVersionList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_version_whitelist_by_component(self, component_type, **kwargs):  # noqa: E501
        """Get the version whitelist for the specified component  # noqa: E501

        Get whitelist of versions for a component. Component can include HOST, EDGE, CCP, MP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_version_whitelist_by_component(component_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: (required)
        :return: AcceptableComponentVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_version_whitelist_by_component_with_http_info(component_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_version_whitelist_by_component_with_http_info(component_type, **kwargs)  # noqa: E501
            return data

    def get_version_whitelist_by_component_with_http_info(self, component_type, **kwargs):  # noqa: E501
        """Get the version whitelist for the specified component  # noqa: E501

        Get whitelist of versions for a component. Component can include HOST, EDGE, CCP, MP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_version_whitelist_by_component_with_http_info(component_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: (required)
        :return: AcceptableComponentVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_version_whitelist_by_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_type' is set
        if ('component_type' not in params or
                params['component_type'] is None):
            raise ValueError("Missing the required parameter `component_type` when calling `get_version_whitelist_by_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_type' in params:
            path_params['component_type'] = params['component_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/version-whitelist/{component_type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AcceptableComponentVersion',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pause_upgrade_pause(self, **kwargs):  # noqa: E501
        """Pause upgrade  # noqa: E501

        Pause upgrade  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.pause_upgrade_pause(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.pause_upgrade_pause_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pause_upgrade_pause_with_http_info(**kwargs)  # noqa: E501
            return data

    def pause_upgrade_pause_with_http_info(self, **kwargs):  # noqa: E501
        """Pause upgrade  # noqa: E501

        Pause upgrade  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.pause_upgrade_pause_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pause_upgrade_pause" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/plan?action=pause', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reorder_upgrade_unit_group_reorder(self, group_id, reorder_request, **kwargs):  # noqa: E501
        """Reorder upgrade unit group  # noqa: E501

        Reorder upgrade unit group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reorder_upgrade_unit_group_reorder(group_id, reorder_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: (required)
        :param ReorderRequest reorder_request: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reorder_upgrade_unit_group_reorder_with_http_info(group_id, reorder_request, **kwargs)  # noqa: E501
        else:
            (data) = self.reorder_upgrade_unit_group_reorder_with_http_info(group_id, reorder_request, **kwargs)  # noqa: E501
            return data

    def reorder_upgrade_unit_group_reorder_with_http_info(self, group_id, reorder_request, **kwargs):  # noqa: E501
        """Reorder upgrade unit group  # noqa: E501

        Reorder upgrade unit group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reorder_upgrade_unit_group_reorder_with_http_info(group_id, reorder_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: (required)
        :param ReorderRequest reorder_request: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'reorder_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reorder_upgrade_unit_group_reorder" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `reorder_upgrade_unit_group_reorder`")  # noqa: E501
        # verify the required parameter 'reorder_request' is set
        if ('reorder_request' not in params or
                params['reorder_request'] is None):
            raise ValueError("Missing the required parameter `reorder_request` when calling `reorder_upgrade_unit_group_reorder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reorder_request' in params:
            body_params = params['reorder_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-unit-groups/{group-id}?action=reorder', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reorder_upgrade_unit_reorder(self, group_id, upgrade_unit_id, reorder_request, **kwargs):  # noqa: E501
        """Reorder an upgrade unit within the upgrade unit group  # noqa: E501

        Reorder an upgrade unit within the upgrade unit group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reorder_upgrade_unit_reorder(group_id, upgrade_unit_id, reorder_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: (required)
        :param str upgrade_unit_id: (required)
        :param ReorderRequest reorder_request: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reorder_upgrade_unit_reorder_with_http_info(group_id, upgrade_unit_id, reorder_request, **kwargs)  # noqa: E501
        else:
            (data) = self.reorder_upgrade_unit_reorder_with_http_info(group_id, upgrade_unit_id, reorder_request, **kwargs)  # noqa: E501
            return data

    def reorder_upgrade_unit_reorder_with_http_info(self, group_id, upgrade_unit_id, reorder_request, **kwargs):  # noqa: E501
        """Reorder an upgrade unit within the upgrade unit group  # noqa: E501

        Reorder an upgrade unit within the upgrade unit group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reorder_upgrade_unit_reorder_with_http_info(group_id, upgrade_unit_id, reorder_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: (required)
        :param str upgrade_unit_id: (required)
        :param ReorderRequest reorder_request: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'upgrade_unit_id', 'reorder_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reorder_upgrade_unit_reorder" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `reorder_upgrade_unit_reorder`")  # noqa: E501
        # verify the required parameter 'upgrade_unit_id' is set
        if ('upgrade_unit_id' not in params or
                params['upgrade_unit_id'] is None):
            raise ValueError("Missing the required parameter `upgrade_unit_id` when calling `reorder_upgrade_unit_reorder`")  # noqa: E501
        # verify the required parameter 'reorder_request' is set
        if ('reorder_request' not in params or
                params['reorder_request'] is None):
            raise ValueError("Missing the required parameter `reorder_request` when calling `reorder_upgrade_unit_reorder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501
        if 'upgrade_unit_id' in params:
            path_params['upgrade-unit-id'] = params['upgrade_unit_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reorder_request' in params:
            body_params = params['reorder_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-unit-groups/{group-id}/upgrade-unit/{upgrade-unit-id}?action=reorder', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_upgrade_plan_reset(self, component_type, **kwargs):  # noqa: E501
        """Reset upgrade plan to default plan  # noqa: E501

        Reset the upgrade plan to default plan. User has an option to change the default plan. But if after making changes, user wants to go back to the default plan, this is the way to do so.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reset_upgrade_plan_reset(component_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reset_upgrade_plan_reset_with_http_info(component_type, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_upgrade_plan_reset_with_http_info(component_type, **kwargs)  # noqa: E501
            return data

    def reset_upgrade_plan_reset_with_http_info(self, component_type, **kwargs):  # noqa: E501
        """Reset upgrade plan to default plan  # noqa: E501

        Reset the upgrade plan to default plan. User has an option to change the default plan. But if after making changes, user wants to go back to the default plan, this is the way to do so.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reset_upgrade_plan_reset_with_http_info(component_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: Component type (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_upgrade_plan_reset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_type' is set
        if ('component_type' not in params or
                params['component_type'] is None):
            raise ValueError("Missing the required parameter `component_type` when calling `reset_upgrade_plan_reset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'component_type' in params:
            query_params.append(('component_type', params['component_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/plan?action=reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_upgrade_start(self, **kwargs):  # noqa: E501
        """Start upgrade  # noqa: E501

        Start upgrade  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_upgrade_start(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.start_upgrade_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.start_upgrade_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def start_upgrade_start_with_http_info(self, **kwargs):  # noqa: E501
        """Start upgrade  # noqa: E501

        Start upgrade  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_upgrade_start_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_upgrade_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/plan?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trigger_uc_upgrade_upgrade_uc(self, **kwargs):  # noqa: E501
        """Upgrade the upgrade coordinator.  # noqa: E501

        Upgrade the upgrade coordinator.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.trigger_uc_upgrade_upgrade_uc(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.trigger_uc_upgrade_upgrade_uc_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.trigger_uc_upgrade_upgrade_uc_with_http_info(**kwargs)  # noqa: E501
            return data

    def trigger_uc_upgrade_upgrade_uc_with_http_info(self, **kwargs):  # noqa: E501
        """Upgrade the upgrade coordinator.  # noqa: E501

        Upgrade the upgrade coordinator.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.trigger_uc_upgrade_upgrade_uc_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trigger_uc_upgrade_upgrade_uc" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade?action=upgrade_uc', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_upgrade_plan_settings(self, component_type, upgrade_plan_settings, **kwargs):  # noqa: E501
        """Update upgrade plan settings for the component  # noqa: E501

        Update the upgrade plan settings for the component.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_upgrade_plan_settings(component_type, upgrade_plan_settings, async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: (required)
        :param UpgradePlanSettings upgrade_plan_settings: (required)
        :return: UpgradePlanSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_upgrade_plan_settings_with_http_info(component_type, upgrade_plan_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.update_upgrade_plan_settings_with_http_info(component_type, upgrade_plan_settings, **kwargs)  # noqa: E501
            return data

    def update_upgrade_plan_settings_with_http_info(self, component_type, upgrade_plan_settings, **kwargs):  # noqa: E501
        """Update upgrade plan settings for the component  # noqa: E501

        Update the upgrade plan settings for the component.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_upgrade_plan_settings_with_http_info(component_type, upgrade_plan_settings, async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: (required)
        :param UpgradePlanSettings upgrade_plan_settings: (required)
        :return: UpgradePlanSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'upgrade_plan_settings']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_upgrade_plan_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_type' is set
        if ('component_type' not in params or
                params['component_type'] is None):
            raise ValueError("Missing the required parameter `component_type` when calling `update_upgrade_plan_settings`")  # noqa: E501
        # verify the required parameter 'upgrade_plan_settings' is set
        if ('upgrade_plan_settings' not in params or
                params['upgrade_plan_settings'] is None):
            raise ValueError("Missing the required parameter `upgrade_plan_settings` when calling `update_upgrade_plan_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_type' in params:
            path_params['component_type'] = params['component_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upgrade_plan_settings' in params:
            body_params = params['upgrade_plan_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/plan/{component_type}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradePlanSettings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_upgrade_unit_group(self, group_id, upgrade_unit_group, **kwargs):  # noqa: E501
        """Update the upgrade unit group  # noqa: E501

        Update the upgrade unit group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_upgrade_unit_group(group_id, upgrade_unit_group, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: (required)
        :param UpgradeUnitGroup upgrade_unit_group: (required)
        :return: UpgradeUnitGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_upgrade_unit_group_with_http_info(group_id, upgrade_unit_group, **kwargs)  # noqa: E501
        else:
            (data) = self.update_upgrade_unit_group_with_http_info(group_id, upgrade_unit_group, **kwargs)  # noqa: E501
            return data

    def update_upgrade_unit_group_with_http_info(self, group_id, upgrade_unit_group, **kwargs):  # noqa: E501
        """Update the upgrade unit group  # noqa: E501

        Update the upgrade unit group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_upgrade_unit_group_with_http_info(group_id, upgrade_unit_group, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: (required)
        :param UpgradeUnitGroup upgrade_unit_group: (required)
        :return: UpgradeUnitGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'upgrade_unit_group']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_upgrade_unit_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `update_upgrade_unit_group`")  # noqa: E501
        # verify the required parameter 'upgrade_unit_group' is set
        if ('upgrade_unit_group' not in params or
                params['upgrade_unit_group'] is None):
            raise ValueError("Missing the required parameter `upgrade_unit_group` when calling `update_upgrade_unit_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upgrade_unit_group' in params:
            body_params = params['upgrade_unit_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/upgrade-unit-groups/{group-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeUnitGroup',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_version_whitelist(self, component_type, version_list, **kwargs):  # noqa: E501
        """Update the version whitelist for the specified component type  # noqa: E501

        Update the version whitelist for the specified component type (HOST, EDGE, CCP, MP).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_version_whitelist(component_type, version_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: (required)
        :param VersionList version_list: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_version_whitelist_with_http_info(component_type, version_list, **kwargs)  # noqa: E501
        else:
            (data) = self.update_version_whitelist_with_http_info(component_type, version_list, **kwargs)  # noqa: E501
            return data

    def update_version_whitelist_with_http_info(self, component_type, version_list, **kwargs):  # noqa: E501
        """Update the version whitelist for the specified component type  # noqa: E501

        Update the version whitelist for the specified component type (HOST, EDGE, CCP, MP).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_version_whitelist_with_http_info(component_type, version_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param str component_type: (required)
        :param VersionList version_list: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'version_list']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_version_whitelist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_type' is set
        if ('component_type' not in params or
                params['component_type'] is None):
            raise ValueError("Missing the required parameter `component_type` when calling `update_version_whitelist`")  # noqa: E501
        # verify the required parameter 'version_list' is set
        if ('version_list' not in params or
                params['version_list'] is None):
            raise ValueError("Missing the required parameter `version_list` when calling `update_version_whitelist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_type' in params:
            path_params['component_type'] = params['component_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'version_list' in params:
            body_params = params['version_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/version-whitelist/{component_type}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upgrade_selected_units_upgrade_selected_units(self, upgrade_unit_list, **kwargs):  # noqa: E501
        """Upgrade selected units  # noqa: E501

        Upgrade selected units  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upgrade_selected_units_upgrade_selected_units(upgrade_unit_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param UpgradeUnitList upgrade_unit_list: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.upgrade_selected_units_upgrade_selected_units_with_http_info(upgrade_unit_list, **kwargs)  # noqa: E501
        else:
            (data) = self.upgrade_selected_units_upgrade_selected_units_with_http_info(upgrade_unit_list, **kwargs)  # noqa: E501
            return data

    def upgrade_selected_units_upgrade_selected_units_with_http_info(self, upgrade_unit_list, **kwargs):  # noqa: E501
        """Upgrade selected units  # noqa: E501

        Upgrade selected units  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upgrade_selected_units_upgrade_selected_units_with_http_info(upgrade_unit_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param UpgradeUnitList upgrade_unit_list: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upgrade_unit_list']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upgrade_selected_units_upgrade_selected_units" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upgrade_unit_list' is set
        if ('upgrade_unit_list' not in params or
                params['upgrade_unit_list'] is None):
            raise ValueError("Missing the required parameter `upgrade_unit_list` when calling `upgrade_selected_units_upgrade_selected_units`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upgrade_unit_list' in params:
            body_params = params['upgrade_unit_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/upgrade/plan?action=upgrade_selected_units', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
