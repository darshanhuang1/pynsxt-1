# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.expression import Expression  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501


class ConjunctionOperator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conjunction_operator': 'str'
    }

    attribute_map = {
        'conjunction_operator': 'conjunction_operator'
    }

    def __init__(self, conjunction_operator=None):  # noqa: E501
        """ConjunctionOperator - a model defined in Swagger"""  # noqa: E501

        self._conjunction_operator = None
        self.discriminator = None

        self.conjunction_operator = conjunction_operator

    @property
    def conjunction_operator(self):
        """Gets the conjunction_operator of this ConjunctionOperator.  # noqa: E501

        Conjunction Operator Node  # noqa: E501

        :return: The conjunction_operator of this ConjunctionOperator.  # noqa: E501
        :rtype: str
        """
        return self._conjunction_operator

    @conjunction_operator.setter
    def conjunction_operator(self, conjunction_operator):
        """Sets the conjunction_operator of this ConjunctionOperator.

        Conjunction Operator Node  # noqa: E501

        :param conjunction_operator: The conjunction_operator of this ConjunctionOperator.  # noqa: E501
        :type: str
        """
        if conjunction_operator is None:
            raise ValueError("Invalid value for `conjunction_operator`, must not be `None`")  # noqa: E501
        allowed_values = ["OR", "AND"]  # noqa: E501
        if conjunction_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `conjunction_operator` ({0}), must be one of {1}"  # noqa: E501
                .format(conjunction_operator, allowed_values)
            )

        self._conjunction_operator = conjunction_operator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConjunctionOperator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
