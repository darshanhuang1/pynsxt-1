# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.logical_switch_info import LogicalSwitchInfo  # noqa: F401,E501


class TransportZoneInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_underlay_transport_zone': 'bool',
        'transport_zone_id': 'str',
        'transport_zone_display_name': 'str',
        'logical_switches': 'list[LogicalSwitchInfo]'
    }

    attribute_map = {
        'is_underlay_transport_zone': 'is_underlay_transport_zone',
        'transport_zone_id': 'transport_zone_id',
        'transport_zone_display_name': 'transport_zone_display_name',
        'logical_switches': 'logical_switches'
    }

    def __init__(self, is_underlay_transport_zone=None, transport_zone_id=None, transport_zone_display_name=None, logical_switches=None):  # noqa: E501
        """TransportZoneInfo - a model defined in Swagger"""  # noqa: E501

        self._is_underlay_transport_zone = None
        self._transport_zone_id = None
        self._transport_zone_display_name = None
        self._logical_switches = None
        self.discriminator = None

        if is_underlay_transport_zone is not None:
            self.is_underlay_transport_zone = is_underlay_transport_zone
        if transport_zone_id is not None:
            self.transport_zone_id = transport_zone_id
        if transport_zone_display_name is not None:
            self.transport_zone_display_name = transport_zone_display_name
        if logical_switches is not None:
            self.logical_switches = logical_switches

    @property
    def is_underlay_transport_zone(self):
        """Gets the is_underlay_transport_zone of this TransportZoneInfo.  # noqa: E501

        Flag to identify if this is the underlay transport zone  # noqa: E501

        :return: The is_underlay_transport_zone of this TransportZoneInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_underlay_transport_zone

    @is_underlay_transport_zone.setter
    def is_underlay_transport_zone(self, is_underlay_transport_zone):
        """Sets the is_underlay_transport_zone of this TransportZoneInfo.

        Flag to identify if this is the underlay transport zone  # noqa: E501

        :param is_underlay_transport_zone: The is_underlay_transport_zone of this TransportZoneInfo.  # noqa: E501
        :type: bool
        """

        self._is_underlay_transport_zone = is_underlay_transport_zone

    @property
    def transport_zone_id(self):
        """Gets the transport_zone_id of this TransportZoneInfo.  # noqa: E501

        ID of the transport zone  # noqa: E501

        :return: The transport_zone_id of this TransportZoneInfo.  # noqa: E501
        :rtype: str
        """
        return self._transport_zone_id

    @transport_zone_id.setter
    def transport_zone_id(self, transport_zone_id):
        """Sets the transport_zone_id of this TransportZoneInfo.

        ID of the transport zone  # noqa: E501

        :param transport_zone_id: The transport_zone_id of this TransportZoneInfo.  # noqa: E501
        :type: str
        """

        self._transport_zone_id = transport_zone_id

    @property
    def transport_zone_display_name(self):
        """Gets the transport_zone_display_name of this TransportZoneInfo.  # noqa: E501

        Name of the transport zone  # noqa: E501

        :return: The transport_zone_display_name of this TransportZoneInfo.  # noqa: E501
        :rtype: str
        """
        return self._transport_zone_display_name

    @transport_zone_display_name.setter
    def transport_zone_display_name(self, transport_zone_display_name):
        """Sets the transport_zone_display_name of this TransportZoneInfo.

        Name of the transport zone  # noqa: E501

        :param transport_zone_display_name: The transport_zone_display_name of this TransportZoneInfo.  # noqa: E501
        :type: str
        """

        self._transport_zone_display_name = transport_zone_display_name

    @property
    def logical_switches(self):
        """Gets the logical_switches of this TransportZoneInfo.  # noqa: E501

        Logical switches for the transport zone  # noqa: E501

        :return: The logical_switches of this TransportZoneInfo.  # noqa: E501
        :rtype: list[LogicalSwitchInfo]
        """
        return self._logical_switches

    @logical_switches.setter
    def logical_switches(self, logical_switches):
        """Sets the logical_switches of this TransportZoneInfo.

        Logical switches for the transport zone  # noqa: E501

        :param logical_switches: The logical_switches of this TransportZoneInfo.  # noqa: E501
        :type: list[LogicalSwitchInfo]
        """

        self._logical_switches = logical_switches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportZoneInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
