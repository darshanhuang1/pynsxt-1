# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.ip_subnet import IPSubnet  # noqa: F401,E501
from swagger_client.models.logical_router_port import LogicalRouterPort  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.resource_reference import ResourceReference  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501
from swagger_client.models.service_binding import ServiceBinding  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501


class LogicalRouterUpLinkPort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subnets': 'list[IPSubnet]',
        'urpf_mode': 'str',
        'linked_logical_switch_port_id': 'ResourceReference',
        'edge_cluster_member_index': 'list[int]'
    }

    attribute_map = {
        'subnets': 'subnets',
        'urpf_mode': 'urpf_mode',
        'linked_logical_switch_port_id': 'linked_logical_switch_port_id',
        'edge_cluster_member_index': 'edge_cluster_member_index'
    }

    def __init__(self, subnets=None, urpf_mode='STRICT', linked_logical_switch_port_id=None, edge_cluster_member_index=None):  # noqa: E501
        """LogicalRouterUpLinkPort - a model defined in Swagger"""  # noqa: E501

        self._subnets = None
        self._urpf_mode = None
        self._linked_logical_switch_port_id = None
        self._edge_cluster_member_index = None
        self.discriminator = None

        self.subnets = subnets
        if urpf_mode is not None:
            self.urpf_mode = urpf_mode
        if linked_logical_switch_port_id is not None:
            self.linked_logical_switch_port_id = linked_logical_switch_port_id
        self.edge_cluster_member_index = edge_cluster_member_index

    @property
    def subnets(self):
        """Gets the subnets of this LogicalRouterUpLinkPort.  # noqa: E501

        Logical router port subnets  # noqa: E501

        :return: The subnets of this LogicalRouterUpLinkPort.  # noqa: E501
        :rtype: list[IPSubnet]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this LogicalRouterUpLinkPort.

        Logical router port subnets  # noqa: E501

        :param subnets: The subnets of this LogicalRouterUpLinkPort.  # noqa: E501
        :type: list[IPSubnet]
        """
        if subnets is None:
            raise ValueError("Invalid value for `subnets`, must not be `None`")  # noqa: E501

        self._subnets = subnets

    @property
    def urpf_mode(self):
        """Gets the urpf_mode of this LogicalRouterUpLinkPort.  # noqa: E501

        Unicast Reverse Path Forwarding mode  # noqa: E501

        :return: The urpf_mode of this LogicalRouterUpLinkPort.  # noqa: E501
        :rtype: str
        """
        return self._urpf_mode

    @urpf_mode.setter
    def urpf_mode(self, urpf_mode):
        """Sets the urpf_mode of this LogicalRouterUpLinkPort.

        Unicast Reverse Path Forwarding mode  # noqa: E501

        :param urpf_mode: The urpf_mode of this LogicalRouterUpLinkPort.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "STRICT"]  # noqa: E501
        if urpf_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `urpf_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(urpf_mode, allowed_values)
            )

        self._urpf_mode = urpf_mode

    @property
    def linked_logical_switch_port_id(self):
        """Gets the linked_logical_switch_port_id of this LogicalRouterUpLinkPort.  # noqa: E501

        Reference to the logical switch port to connect to  # noqa: E501

        :return: The linked_logical_switch_port_id of this LogicalRouterUpLinkPort.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._linked_logical_switch_port_id

    @linked_logical_switch_port_id.setter
    def linked_logical_switch_port_id(self, linked_logical_switch_port_id):
        """Sets the linked_logical_switch_port_id of this LogicalRouterUpLinkPort.

        Reference to the logical switch port to connect to  # noqa: E501

        :param linked_logical_switch_port_id: The linked_logical_switch_port_id of this LogicalRouterUpLinkPort.  # noqa: E501
        :type: ResourceReference
        """

        self._linked_logical_switch_port_id = linked_logical_switch_port_id

    @property
    def edge_cluster_member_index(self):
        """Gets the edge_cluster_member_index of this LogicalRouterUpLinkPort.  # noqa: E501

        Member index of the edge node on the cluster  # noqa: E501

        :return: The edge_cluster_member_index of this LogicalRouterUpLinkPort.  # noqa: E501
        :rtype: list[int]
        """
        return self._edge_cluster_member_index

    @edge_cluster_member_index.setter
    def edge_cluster_member_index(self, edge_cluster_member_index):
        """Sets the edge_cluster_member_index of this LogicalRouterUpLinkPort.

        Member index of the edge node on the cluster  # noqa: E501

        :param edge_cluster_member_index: The edge_cluster_member_index of this LogicalRouterUpLinkPort.  # noqa: E501
        :type: list[int]
        """
        if edge_cluster_member_index is None:
            raise ValueError("Invalid value for `edge_cluster_member_index`, must not be `None`")  # noqa: E501

        self._edge_cluster_member_index = edge_cluster_member_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogicalRouterUpLinkPort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
