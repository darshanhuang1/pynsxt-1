# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UcMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_name': 'str',
        'correlation_id': 'str',
        'client_type': 'str',
        'payload': 'str',
        'type_id': 'str'
    }

    attribute_map = {
        'application_name': 'application_name',
        'correlation_id': 'correlation_id',
        'client_type': 'client_type',
        'payload': 'payload',
        'type_id': 'type_id'
    }

    def __init__(self, application_name=None, correlation_id=None, client_type=None, payload=None, type_id=None):  # noqa: E501
        """UcMessage - a model defined in Swagger"""  # noqa: E501

        self._application_name = None
        self._correlation_id = None
        self._client_type = None
        self._payload = None
        self._type_id = None
        self.discriminator = None

        self.application_name = application_name
        if correlation_id is not None:
            self.correlation_id = correlation_id
        self.client_type = client_type
        self.payload = payload
        self.type_id = type_id

    @property
    def application_name(self):
        """Gets the application_name of this UcMessage.  # noqa: E501

        Application name (e.g. UPGRADE)  # noqa: E501

        :return: The application_name of this UcMessage.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this UcMessage.

        Application name (e.g. UPGRADE)  # noqa: E501

        :param application_name: The application_name of this UcMessage.  # noqa: E501
        :type: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")  # noqa: E501

        self._application_name = application_name

    @property
    def correlation_id(self):
        """Gets the correlation_id of this UcMessage.  # noqa: E501

        UUID used to associate response with request. Ignored on send path.  # noqa: E501

        :return: The correlation_id of this UcMessage.  # noqa: E501
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this UcMessage.

        UUID used to associate response with request. Ignored on send path.  # noqa: E501

        :param correlation_id: The correlation_id of this UcMessage.  # noqa: E501
        :type: str
        """

        self._correlation_id = correlation_id

    @property
    def client_type(self):
        """Gets the client_type of this UcMessage.  # noqa: E501

        Type of messaging client  # noqa: E501

        :return: The client_type of this UcMessage.  # noqa: E501
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this UcMessage.

        Type of messaging client  # noqa: E501

        :param client_type: The client_type of this UcMessage.  # noqa: E501
        :type: str
        """
        if client_type is None:
            raise ValueError("Invalid value for `client_type`, must not be `None`")  # noqa: E501
        allowed_values = ["HOST", "EDGE", "CCP", "CCP_MPA", "PCG", "NSX_AGENT"]  # noqa: E501
        if client_type not in allowed_values:
            raise ValueError(
                "Invalid value for `client_type` ({0}), must be one of {1}"  # noqa: E501
                .format(client_type, allowed_values)
            )

        self._client_type = client_type

    @property
    def payload(self):
        """Gets the payload of this UcMessage.  # noqa: E501

        Message payload  # noqa: E501

        :return: The payload of this UcMessage.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this UcMessage.

        Message payload  # noqa: E501

        :param payload: The payload of this UcMessage.  # noqa: E501
        :type: str
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")  # noqa: E501

        self._payload = payload

    @property
    def type_id(self):
        """Gets the type_id of this UcMessage.  # noqa: E501

        A fully qualified protobuf message name.  # noqa: E501

        :return: The type_id of this UcMessage.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this UcMessage.

        A fully qualified protobuf message name.  # noqa: E501

        :param type_id: The type_id of this UcMessage.  # noqa: E501
        :type: str
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UcMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
