# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.bfd_config_parameters import BfdConfigParameters  # noqa: F401,E501
from swagger_client.models.bgp_neighbor_address_family import BgpNeighborAddressFamily  # noqa: F401,E501
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501


class BgpNeighbor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'SelfResourceLink',
        'links': 'list[ResourceLink]',
        'schema': 'str',
        'revision': 'int',
        'system_owned': 'bool',
        'display_name': 'str',
        'description': 'str',
        'tags': 'list[Tag]',
        'create_user': 'str',
        'protection': 'str',
        'create_time': 'int',
        'last_modified_time': 'int',
        'last_modified_user': 'str',
        'id': 'str',
        'resource_type': 'str',
        'filter_in_ipprefixlist_id': 'str',
        'neighbor_address': 'str',
        'remote_as': 'int',
        'filter_out_ipprefixlist_id': 'str',
        'hold_down_timer': 'int',
        'maximum_hop_limit': 'int',
        'enabled': 'bool',
        'bfd_config': 'BfdConfigParameters',
        'logical_router_id': 'str',
        'remote_as_num': 'str',
        'filter_out_routemap_id': 'str',
        'filter_in_routemap_id': 'str',
        'keep_alive_timer': 'int',
        'password': 'str',
        'source_address': 'str',
        'source_addresses': 'list[str]',
        'enable_bfd': 'bool',
        'address_families': 'list[BgpNeighborAddressFamily]'
    }

    attribute_map = {
        '_self': '_self',
        'links': '_links',
        'schema': '_schema',
        'revision': '_revision',
        'system_owned': '_system_owned',
        'display_name': 'display_name',
        'description': 'description',
        'tags': 'tags',
        'create_user': '_create_user',
        'protection': '_protection',
        'create_time': '_create_time',
        'last_modified_time': '_last_modified_time',
        'last_modified_user': '_last_modified_user',
        'id': 'id',
        'resource_type': 'resource_type',
        'filter_in_ipprefixlist_id': 'filter_in_ipprefixlist_id',
        'neighbor_address': 'neighbor_address',
        'remote_as': 'remote_as',
        'filter_out_ipprefixlist_id': 'filter_out_ipprefixlist_id',
        'hold_down_timer': 'hold_down_timer',
        'maximum_hop_limit': 'maximum_hop_limit',
        'enabled': 'enabled',
        'bfd_config': 'bfd_config',
        'logical_router_id': 'logical_router_id',
        'remote_as_num': 'remote_as_num',
        'filter_out_routemap_id': 'filter_out_routemap_id',
        'filter_in_routemap_id': 'filter_in_routemap_id',
        'keep_alive_timer': 'keep_alive_timer',
        'password': 'password',
        'source_address': 'source_address',
        'source_addresses': 'source_addresses',
        'enable_bfd': 'enable_bfd',
        'address_families': 'address_families'
    }

    def __init__(self, _self=None, links=None, schema=None, revision=None, system_owned=None, display_name=None, description=None, tags=None, create_user=None, protection=None, create_time=None, last_modified_time=None, last_modified_user=None, id=None, resource_type=None, filter_in_ipprefixlist_id=None, neighbor_address=None, remote_as=None, filter_out_ipprefixlist_id=None, hold_down_timer=180, maximum_hop_limit=1, enabled=True, bfd_config=None, logical_router_id=None, remote_as_num=None, filter_out_routemap_id=None, filter_in_routemap_id=None, keep_alive_timer=60, password=None, source_address=None, source_addresses=None, enable_bfd=False, address_families=None):  # noqa: E501
        """BgpNeighbor - a model defined in Swagger"""  # noqa: E501

        self.__self = None
        self._links = None
        self._schema = None
        self._revision = None
        self._system_owned = None
        self._display_name = None
        self._description = None
        self._tags = None
        self._create_user = None
        self._protection = None
        self._create_time = None
        self._last_modified_time = None
        self._last_modified_user = None
        self._id = None
        self._resource_type = None
        self._filter_in_ipprefixlist_id = None
        self._neighbor_address = None
        self._remote_as = None
        self._filter_out_ipprefixlist_id = None
        self._hold_down_timer = None
        self._maximum_hop_limit = None
        self._enabled = None
        self._bfd_config = None
        self._logical_router_id = None
        self._remote_as_num = None
        self._filter_out_routemap_id = None
        self._filter_in_routemap_id = None
        self._keep_alive_timer = None
        self._password = None
        self._source_address = None
        self._source_addresses = None
        self._enable_bfd = None
        self._address_families = None
        self.discriminator = None

        if _self is not None:
            self._self = _self
        if links is not None:
            self.links = links
        if schema is not None:
            self.schema = schema
        if revision is not None:
            self.revision = revision
        if system_owned is not None:
            self.system_owned = system_owned
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if create_user is not None:
            self.create_user = create_user
        if protection is not None:
            self.protection = protection
        if create_time is not None:
            self.create_time = create_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        if id is not None:
            self.id = id
        if resource_type is not None:
            self.resource_type = resource_type
        if filter_in_ipprefixlist_id is not None:
            self.filter_in_ipprefixlist_id = filter_in_ipprefixlist_id
        self.neighbor_address = neighbor_address
        if remote_as is not None:
            self.remote_as = remote_as
        if filter_out_ipprefixlist_id is not None:
            self.filter_out_ipprefixlist_id = filter_out_ipprefixlist_id
        if hold_down_timer is not None:
            self.hold_down_timer = hold_down_timer
        if maximum_hop_limit is not None:
            self.maximum_hop_limit = maximum_hop_limit
        if enabled is not None:
            self.enabled = enabled
        if bfd_config is not None:
            self.bfd_config = bfd_config
        if logical_router_id is not None:
            self.logical_router_id = logical_router_id
        if remote_as_num is not None:
            self.remote_as_num = remote_as_num
        if filter_out_routemap_id is not None:
            self.filter_out_routemap_id = filter_out_routemap_id
        if filter_in_routemap_id is not None:
            self.filter_in_routemap_id = filter_in_routemap_id
        if keep_alive_timer is not None:
            self.keep_alive_timer = keep_alive_timer
        if password is not None:
            self.password = password
        if source_address is not None:
            self.source_address = source_address
        if source_addresses is not None:
            self.source_addresses = source_addresses
        if enable_bfd is not None:
            self.enable_bfd = enable_bfd
        if address_families is not None:
            self.address_families = address_families

    @property
    def _self(self):
        """Gets the _self of this BgpNeighbor.  # noqa: E501


        :return: The _self of this BgpNeighbor.  # noqa: E501
        :rtype: SelfResourceLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this BgpNeighbor.


        :param _self: The _self of this BgpNeighbor.  # noqa: E501
        :type: SelfResourceLink
        """

        self.__self = _self

    @property
    def links(self):
        """Gets the links of this BgpNeighbor.  # noqa: E501

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :return: The links of this BgpNeighbor.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this BgpNeighbor.

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :param links: The links of this BgpNeighbor.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    @property
    def schema(self):
        """Gets the schema of this BgpNeighbor.  # noqa: E501


        :return: The schema of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this BgpNeighbor.


        :param schema: The schema of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def revision(self):
        """Gets the revision of this BgpNeighbor.  # noqa: E501

        The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.  # noqa: E501

        :return: The revision of this BgpNeighbor.  # noqa: E501
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this BgpNeighbor.

        The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.  # noqa: E501

        :param revision: The revision of this BgpNeighbor.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def system_owned(self):
        """Gets the system_owned of this BgpNeighbor.  # noqa: E501

        Indicates system owned resource  # noqa: E501

        :return: The system_owned of this BgpNeighbor.  # noqa: E501
        :rtype: bool
        """
        return self._system_owned

    @system_owned.setter
    def system_owned(self, system_owned):
        """Sets the system_owned of this BgpNeighbor.

        Indicates system owned resource  # noqa: E501

        :param system_owned: The system_owned of this BgpNeighbor.  # noqa: E501
        :type: bool
        """

        self._system_owned = system_owned

    @property
    def display_name(self):
        """Gets the display_name of this BgpNeighbor.  # noqa: E501

        Defaults to ID if not set  # noqa: E501

        :return: The display_name of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BgpNeighbor.

        Defaults to ID if not set  # noqa: E501

        :param display_name: The display_name of this BgpNeighbor.  # noqa: E501
        :type: str
        """
        if display_name is not None and len(display_name) > 255:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this BgpNeighbor.  # noqa: E501

        Description of this resource  # noqa: E501

        :return: The description of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BgpNeighbor.

        Description of this resource  # noqa: E501

        :param description: The description of this BgpNeighbor.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")  # noqa: E501

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this BgpNeighbor.  # noqa: E501

        Opaque identifiers meaningful to the API user  # noqa: E501

        :return: The tags of this BgpNeighbor.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this BgpNeighbor.

        Opaque identifiers meaningful to the API user  # noqa: E501

        :param tags: The tags of this BgpNeighbor.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def create_user(self):
        """Gets the create_user of this BgpNeighbor.  # noqa: E501

        ID of the user who created this resource  # noqa: E501

        :return: The create_user of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this BgpNeighbor.

        ID of the user who created this resource  # noqa: E501

        :param create_user: The create_user of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._create_user = create_user

    @property
    def protection(self):
        """Gets the protection of this BgpNeighbor.  # noqa: E501

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :return: The protection of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this BgpNeighbor.

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :param protection: The protection of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._protection = protection

    @property
    def create_time(self):
        """Gets the create_time of this BgpNeighbor.  # noqa: E501

        Timestamp of resource creation  # noqa: E501

        :return: The create_time of this BgpNeighbor.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this BgpNeighbor.

        Timestamp of resource creation  # noqa: E501

        :param create_time: The create_time of this BgpNeighbor.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this BgpNeighbor.  # noqa: E501

        Timestamp of last modification  # noqa: E501

        :return: The last_modified_time of this BgpNeighbor.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this BgpNeighbor.

        Timestamp of last modification  # noqa: E501

        :param last_modified_time: The last_modified_time of this BgpNeighbor.  # noqa: E501
        :type: int
        """

        self._last_modified_time = last_modified_time

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this BgpNeighbor.  # noqa: E501

        ID of the user who last modified this resource  # noqa: E501

        :return: The last_modified_user of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this BgpNeighbor.

        ID of the user who last modified this resource  # noqa: E501

        :param last_modified_user: The last_modified_user of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._last_modified_user = last_modified_user

    @property
    def id(self):
        """Gets the id of this BgpNeighbor.  # noqa: E501

        Unique identifier of this resource  # noqa: E501

        :return: The id of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BgpNeighbor.

        Unique identifier of this resource  # noqa: E501

        :param id: The id of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_type(self):
        """Gets the resource_type of this BgpNeighbor.  # noqa: E501

        The type of this resource.  # noqa: E501

        :return: The resource_type of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this BgpNeighbor.

        The type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def filter_in_ipprefixlist_id(self):
        """Gets the filter_in_ipprefixlist_id of this BgpNeighbor.  # noqa: E501

        This is a deprecated property, Please  use 'address_family' instead.  # noqa: E501

        :return: The filter_in_ipprefixlist_id of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._filter_in_ipprefixlist_id

    @filter_in_ipprefixlist_id.setter
    def filter_in_ipprefixlist_id(self, filter_in_ipprefixlist_id):
        """Sets the filter_in_ipprefixlist_id of this BgpNeighbor.

        This is a deprecated property, Please  use 'address_family' instead.  # noqa: E501

        :param filter_in_ipprefixlist_id: The filter_in_ipprefixlist_id of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._filter_in_ipprefixlist_id = filter_in_ipprefixlist_id

    @property
    def neighbor_address(self):
        """Gets the neighbor_address of this BgpNeighbor.  # noqa: E501

        Neighbor IP Address  # noqa: E501

        :return: The neighbor_address of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._neighbor_address

    @neighbor_address.setter
    def neighbor_address(self, neighbor_address):
        """Sets the neighbor_address of this BgpNeighbor.

        Neighbor IP Address  # noqa: E501

        :param neighbor_address: The neighbor_address of this BgpNeighbor.  # noqa: E501
        :type: str
        """
        if neighbor_address is None:
            raise ValueError("Invalid value for `neighbor_address`, must not be `None`")  # noqa: E501

        self._neighbor_address = neighbor_address

    @property
    def remote_as(self):
        """Gets the remote_as of this BgpNeighbor.  # noqa: E501

        This is a deprecated property, Please use 'remote_as_num' instead.  # noqa: E501

        :return: The remote_as of this BgpNeighbor.  # noqa: E501
        :rtype: int
        """
        return self._remote_as

    @remote_as.setter
    def remote_as(self, remote_as):
        """Sets the remote_as of this BgpNeighbor.

        This is a deprecated property, Please use 'remote_as_num' instead.  # noqa: E501

        :param remote_as: The remote_as of this BgpNeighbor.  # noqa: E501
        :type: int
        """
        if remote_as is not None and remote_as > 4294967296:  # noqa: E501
            raise ValueError("Invalid value for `remote_as`, must be a value less than or equal to `4294967296`")  # noqa: E501
        if remote_as is not None and remote_as < 1:  # noqa: E501
            raise ValueError("Invalid value for `remote_as`, must be a value greater than or equal to `1`")  # noqa: E501

        self._remote_as = remote_as

    @property
    def filter_out_ipprefixlist_id(self):
        """Gets the filter_out_ipprefixlist_id of this BgpNeighbor.  # noqa: E501

        This is a deprecated property, Please use 'address_family' instead.  # noqa: E501

        :return: The filter_out_ipprefixlist_id of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._filter_out_ipprefixlist_id

    @filter_out_ipprefixlist_id.setter
    def filter_out_ipprefixlist_id(self, filter_out_ipprefixlist_id):
        """Sets the filter_out_ipprefixlist_id of this BgpNeighbor.

        This is a deprecated property, Please use 'address_family' instead.  # noqa: E501

        :param filter_out_ipprefixlist_id: The filter_out_ipprefixlist_id of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._filter_out_ipprefixlist_id = filter_out_ipprefixlist_id

    @property
    def hold_down_timer(self):
        """Gets the hold_down_timer of this BgpNeighbor.  # noqa: E501

        Wait period (seconds) before declaring peer dead  # noqa: E501

        :return: The hold_down_timer of this BgpNeighbor.  # noqa: E501
        :rtype: int
        """
        return self._hold_down_timer

    @hold_down_timer.setter
    def hold_down_timer(self, hold_down_timer):
        """Sets the hold_down_timer of this BgpNeighbor.

        Wait period (seconds) before declaring peer dead  # noqa: E501

        :param hold_down_timer: The hold_down_timer of this BgpNeighbor.  # noqa: E501
        :type: int
        """
        if hold_down_timer is not None and hold_down_timer > 65535:  # noqa: E501
            raise ValueError("Invalid value for `hold_down_timer`, must be a value less than or equal to `65535`")  # noqa: E501
        if hold_down_timer is not None and hold_down_timer < 1:  # noqa: E501
            raise ValueError("Invalid value for `hold_down_timer`, must be a value greater than or equal to `1`")  # noqa: E501

        self._hold_down_timer = hold_down_timer

    @property
    def maximum_hop_limit(self):
        """Gets the maximum_hop_limit of this BgpNeighbor.  # noqa: E501

        This value is set on TTL(time to live) of BGP header. When router receives the BGP packet, it decrements the TTL. The default value of TTL is one when BPG request is initiated.So in the case of a BGP peer multiple hops away and and value of TTL is one, then  next router in the path will decrement the TTL to 0, realize it cant forward the packet and will drop it. If the hop count value to reach neighbor is equal to or less than the maximum_hop_limit value then intermediate router decrements the TTL count by one and forwards the request to BGP neighour. If the hop count value is greater than the maximum_hop_limit value then intermediate router discards the request when TTL becomes 0.   # noqa: E501

        :return: The maximum_hop_limit of this BgpNeighbor.  # noqa: E501
        :rtype: int
        """
        return self._maximum_hop_limit

    @maximum_hop_limit.setter
    def maximum_hop_limit(self, maximum_hop_limit):
        """Sets the maximum_hop_limit of this BgpNeighbor.

        This value is set on TTL(time to live) of BGP header. When router receives the BGP packet, it decrements the TTL. The default value of TTL is one when BPG request is initiated.So in the case of a BGP peer multiple hops away and and value of TTL is one, then  next router in the path will decrement the TTL to 0, realize it cant forward the packet and will drop it. If the hop count value to reach neighbor is equal to or less than the maximum_hop_limit value then intermediate router decrements the TTL count by one and forwards the request to BGP neighour. If the hop count value is greater than the maximum_hop_limit value then intermediate router discards the request when TTL becomes 0.   # noqa: E501

        :param maximum_hop_limit: The maximum_hop_limit of this BgpNeighbor.  # noqa: E501
        :type: int
        """
        if maximum_hop_limit is not None and maximum_hop_limit > 255:  # noqa: E501
            raise ValueError("Invalid value for `maximum_hop_limit`, must be a value less than or equal to `255`")  # noqa: E501
        if maximum_hop_limit is not None and maximum_hop_limit < 1:  # noqa: E501
            raise ValueError("Invalid value for `maximum_hop_limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._maximum_hop_limit = maximum_hop_limit

    @property
    def enabled(self):
        """Gets the enabled of this BgpNeighbor.  # noqa: E501

        Flag to enable this BGP Neighbor  # noqa: E501

        :return: The enabled of this BgpNeighbor.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BgpNeighbor.

        Flag to enable this BGP Neighbor  # noqa: E501

        :param enabled: The enabled of this BgpNeighbor.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def bfd_config(self):
        """Gets the bfd_config of this BgpNeighbor.  # noqa: E501

        By specifying these paramaters BFD config for this given peer can be overriden | (the globally configured values will not apply for this peer)  # noqa: E501

        :return: The bfd_config of this BgpNeighbor.  # noqa: E501
        :rtype: BfdConfigParameters
        """
        return self._bfd_config

    @bfd_config.setter
    def bfd_config(self, bfd_config):
        """Sets the bfd_config of this BgpNeighbor.

        By specifying these paramaters BFD config for this given peer can be overriden | (the globally configured values will not apply for this peer)  # noqa: E501

        :param bfd_config: The bfd_config of this BgpNeighbor.  # noqa: E501
        :type: BfdConfigParameters
        """

        self._bfd_config = bfd_config

    @property
    def logical_router_id(self):
        """Gets the logical_router_id of this BgpNeighbor.  # noqa: E501

        Logical router id  # noqa: E501

        :return: The logical_router_id of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._logical_router_id

    @logical_router_id.setter
    def logical_router_id(self, logical_router_id):
        """Sets the logical_router_id of this BgpNeighbor.

        Logical router id  # noqa: E501

        :param logical_router_id: The logical_router_id of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._logical_router_id = logical_router_id

    @property
    def remote_as_num(self):
        """Gets the remote_as_num of this BgpNeighbor.  # noqa: E501

        4 Byte ASN of the neighbor in ASPLAIN/ASDOT Format  # noqa: E501

        :return: The remote_as_num of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._remote_as_num

    @remote_as_num.setter
    def remote_as_num(self, remote_as_num):
        """Sets the remote_as_num of this BgpNeighbor.

        4 Byte ASN of the neighbor in ASPLAIN/ASDOT Format  # noqa: E501

        :param remote_as_num: The remote_as_num of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._remote_as_num = remote_as_num

    @property
    def filter_out_routemap_id(self):
        """Gets the filter_out_routemap_id of this BgpNeighbor.  # noqa: E501

        This is a deprecated property, Please use 'address_family' instead.  # noqa: E501

        :return: The filter_out_routemap_id of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._filter_out_routemap_id

    @filter_out_routemap_id.setter
    def filter_out_routemap_id(self, filter_out_routemap_id):
        """Sets the filter_out_routemap_id of this BgpNeighbor.

        This is a deprecated property, Please use 'address_family' instead.  # noqa: E501

        :param filter_out_routemap_id: The filter_out_routemap_id of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._filter_out_routemap_id = filter_out_routemap_id

    @property
    def filter_in_routemap_id(self):
        """Gets the filter_in_routemap_id of this BgpNeighbor.  # noqa: E501

        This is a deprecated property, Please use 'address_family' instead.  # noqa: E501

        :return: The filter_in_routemap_id of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._filter_in_routemap_id

    @filter_in_routemap_id.setter
    def filter_in_routemap_id(self, filter_in_routemap_id):
        """Sets the filter_in_routemap_id of this BgpNeighbor.

        This is a deprecated property, Please use 'address_family' instead.  # noqa: E501

        :param filter_in_routemap_id: The filter_in_routemap_id of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._filter_in_routemap_id = filter_in_routemap_id

    @property
    def keep_alive_timer(self):
        """Gets the keep_alive_timer of this BgpNeighbor.  # noqa: E501

        Frequency (seconds) with which keep alive messages are sent to peers  # noqa: E501

        :return: The keep_alive_timer of this BgpNeighbor.  # noqa: E501
        :rtype: int
        """
        return self._keep_alive_timer

    @keep_alive_timer.setter
    def keep_alive_timer(self, keep_alive_timer):
        """Sets the keep_alive_timer of this BgpNeighbor.

        Frequency (seconds) with which keep alive messages are sent to peers  # noqa: E501

        :param keep_alive_timer: The keep_alive_timer of this BgpNeighbor.  # noqa: E501
        :type: int
        """
        if keep_alive_timer is not None and keep_alive_timer > 65535:  # noqa: E501
            raise ValueError("Invalid value for `keep_alive_timer`, must be a value less than or equal to `65535`")  # noqa: E501
        if keep_alive_timer is not None and keep_alive_timer < 1:  # noqa: E501
            raise ValueError("Invalid value for `keep_alive_timer`, must be a value greater than or equal to `1`")  # noqa: E501

        self._keep_alive_timer = keep_alive_timer

    @property
    def password(self):
        """Gets the password of this BgpNeighbor.  # noqa: E501

        User can create (POST) the neighbor with or without the password. The view (GET) on the neighbor, would never reveal if the password is set or not. The password can be set later using edit neighbor workFlow (PUT) On the edit neighbor (PUT), if the user does not specify the password property, the older value is retained.   # noqa: E501

        :return: The password of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this BgpNeighbor.

        User can create (POST) the neighbor with or without the password. The view (GET) on the neighbor, would never reveal if the password is set or not. The password can be set later using edit neighbor workFlow (PUT) On the edit neighbor (PUT), if the user does not specify the password property, the older value is retained.   # noqa: E501

        :param password: The password of this BgpNeighbor.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 20:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `20`")  # noqa: E501
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")  # noqa: E501

        self._password = password

    @property
    def source_address(self):
        """Gets the source_address of this BgpNeighbor.  # noqa: E501

        Deprecated - do not provide a value for this field. Use source_addresses instead.  # noqa: E501

        :return: The source_address of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this BgpNeighbor.

        Deprecated - do not provide a value for this field. Use source_addresses instead.  # noqa: E501

        :param source_address: The source_address of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def source_addresses(self):
        """Gets the source_addresses of this BgpNeighbor.  # noqa: E501

        BGP neighborship will be formed from all these source addresses to this neighbour.  # noqa: E501

        :return: The source_addresses of this BgpNeighbor.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_addresses

    @source_addresses.setter
    def source_addresses(self, source_addresses):
        """Sets the source_addresses of this BgpNeighbor.

        BGP neighborship will be formed from all these source addresses to this neighbour.  # noqa: E501

        :param source_addresses: The source_addresses of this BgpNeighbor.  # noqa: E501
        :type: list[str]
        """

        self._source_addresses = source_addresses

    @property
    def enable_bfd(self):
        """Gets the enable_bfd of this BgpNeighbor.  # noqa: E501

        Flag to enable BFD for this BGP Neighbor. Enable this if the neighbor supports BFD as this will lead to faster convergence.  # noqa: E501

        :return: The enable_bfd of this BgpNeighbor.  # noqa: E501
        :rtype: bool
        """
        return self._enable_bfd

    @enable_bfd.setter
    def enable_bfd(self, enable_bfd):
        """Sets the enable_bfd of this BgpNeighbor.

        Flag to enable BFD for this BGP Neighbor. Enable this if the neighbor supports BFD as this will lead to faster convergence.  # noqa: E501

        :param enable_bfd: The enable_bfd of this BgpNeighbor.  # noqa: E501
        :type: bool
        """

        self._enable_bfd = enable_bfd

    @property
    def address_families(self):
        """Gets the address_families of this BgpNeighbor.  # noqa: E501

        User can enable the neighbor for the specific address families and also define filters per address family. When the neighbor is created, it is default enabled for IPV4_UNICAST address family for backward compatibility reasons. User can change that if required, by defining the address family configuration.   # noqa: E501

        :return: The address_families of this BgpNeighbor.  # noqa: E501
        :rtype: list[BgpNeighborAddressFamily]
        """
        return self._address_families

    @address_families.setter
    def address_families(self, address_families):
        """Sets the address_families of this BgpNeighbor.

        User can enable the neighbor for the specific address families and also define filters per address family. When the neighbor is created, it is default enabled for IPV4_UNICAST address family for backward compatibility reasons. User can change that if required, by defining the address family configuration.   # noqa: E501

        :param address_families: The address_families of this BgpNeighbor.  # noqa: E501
        :type: list[BgpNeighborAddressFamily]
        """

        self._address_families = address_families

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BgpNeighbor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
