# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NodeUserSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'root_password': 'str',
        'cli_password': 'str'
    }

    attribute_map = {
        'root_password': 'root_password',
        'cli_password': 'cli_password'
    }

    def __init__(self, root_password=None, cli_password=None):  # noqa: E501
        """NodeUserSettings - a model defined in Swagger"""  # noqa: E501

        self._root_password = None
        self._cli_password = None
        self.discriminator = None

        if root_password is not None:
            self.root_password = root_password
        if cli_password is not None:
            self.cli_password = cli_password

    @property
    def root_password(self):
        """Gets the root_password of this NodeUserSettings.  # noqa: E501

        Password for the node root user. For deployment, this property is required. After deployment, this property is ignored, and the node cli must be used to change the password. The password specified must be at least 8 characters in length and must contain at least one lowercase, one uppercase, one numeric character and one special character (except quotes).   # noqa: E501

        :return: The root_password of this NodeUserSettings.  # noqa: E501
        :rtype: str
        """
        return self._root_password

    @root_password.setter
    def root_password(self, root_password):
        """Sets the root_password of this NodeUserSettings.

        Password for the node root user. For deployment, this property is required. After deployment, this property is ignored, and the node cli must be used to change the password. The password specified must be at least 8 characters in length and must contain at least one lowercase, one uppercase, one numeric character and one special character (except quotes).   # noqa: E501

        :param root_password: The root_password of this NodeUserSettings.  # noqa: E501
        :type: str
        """

        self._root_password = root_password

    @property
    def cli_password(self):
        """Gets the cli_password of this NodeUserSettings.  # noqa: E501

        Password for the node cli user. For deployment, this property is required. After deployment, this property is ignored, and the node cli must be used to change the password. The password specified must be at least 8 characters in length and must contain at least one lowercase, one uppercase, one numeric character and one special character (except quotes).   # noqa: E501

        :return: The cli_password of this NodeUserSettings.  # noqa: E501
        :rtype: str
        """
        return self._cli_password

    @cli_password.setter
    def cli_password(self, cli_password):
        """Sets the cli_password of this NodeUserSettings.

        Password for the node cli user. For deployment, this property is required. After deployment, this property is ignored, and the node cli must be used to change the password. The password specified must be at least 8 characters in length and must contain at least one lowercase, one uppercase, one numeric character and one special character (except quotes).   # noqa: E501

        :param cli_password: The cli_password of this NodeUserSettings.  # noqa: E501
        :type: str
        """

        self._cli_password = cli_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeUserSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
