# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.package_store import PackageStore  # noqa: F401,E501


class VersionedDeploymentSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_vm_ovf_url': 'list[str]',
        'package_stores': 'list[PackageStore]',
        'host_type': 'str',
        'host_version': 'str'
    }

    attribute_map = {
        'service_vm_ovf_url': 'service_vm_ovf_url',
        'package_stores': 'package_stores',
        'host_type': 'host_type',
        'host_version': 'host_version'
    }

    def __init__(self, service_vm_ovf_url=None, package_stores=None, host_type=None, host_version=None):  # noqa: E501
        """VersionedDeploymentSpec - a model defined in Swagger"""  # noqa: E501

        self._service_vm_ovf_url = None
        self._package_stores = None
        self._host_type = None
        self._host_version = None
        self.discriminator = None

        if service_vm_ovf_url is not None:
            self.service_vm_ovf_url = service_vm_ovf_url
        self.package_stores = package_stores
        self.host_type = host_type
        self.host_version = host_version

    @property
    def service_vm_ovf_url(self):
        """Gets the service_vm_ovf_url of this VersionedDeploymentSpec.  # noqa: E501

        list of service vm ovf urls  # noqa: E501

        :return: The service_vm_ovf_url of this VersionedDeploymentSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_vm_ovf_url

    @service_vm_ovf_url.setter
    def service_vm_ovf_url(self, service_vm_ovf_url):
        """Sets the service_vm_ovf_url of this VersionedDeploymentSpec.

        list of service vm ovf urls  # noqa: E501

        :param service_vm_ovf_url: The service_vm_ovf_url of this VersionedDeploymentSpec.  # noqa: E501
        :type: list[str]
        """

        self._service_vm_ovf_url = service_vm_ovf_url

    @property
    def package_stores(self):
        """Gets the package_stores of this VersionedDeploymentSpec.  # noqa: E501

        Package store contains package url and bulletin_ids  # noqa: E501

        :return: The package_stores of this VersionedDeploymentSpec.  # noqa: E501
        :rtype: list[PackageStore]
        """
        return self._package_stores

    @package_stores.setter
    def package_stores(self, package_stores):
        """Sets the package_stores of this VersionedDeploymentSpec.

        Package store contains package url and bulletin_ids  # noqa: E501

        :param package_stores: The package_stores of this VersionedDeploymentSpec.  # noqa: E501
        :type: list[PackageStore]
        """
        if package_stores is None:
            raise ValueError("Invalid value for `package_stores`, must not be `None`")  # noqa: E501

        self._package_stores = package_stores

    @property
    def host_type(self):
        """Gets the host_type of this VersionedDeploymentSpec.  # noqa: E501

        type of host  # noqa: E501

        :return: The host_type of this VersionedDeploymentSpec.  # noqa: E501
        :rtype: str
        """
        return self._host_type

    @host_type.setter
    def host_type(self, host_type):
        """Sets the host_type of this VersionedDeploymentSpec.

        type of host  # noqa: E501

        :param host_type: The host_type of this VersionedDeploymentSpec.  # noqa: E501
        :type: str
        """
        if host_type is None:
            raise ValueError("Invalid value for `host_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ESXI", "RHELKVM", "UBUNTUKVM"]  # noqa: E501
        if host_type not in allowed_values:
            raise ValueError(
                "Invalid value for `host_type` ({0}), must be one of {1}"  # noqa: E501
                .format(host_type, allowed_values)
            )

        self._host_type = host_type

    @property
    def host_version(self):
        """Gets the host_version of this VersionedDeploymentSpec.  # noqa: E501

        version of the host  # noqa: E501

        :return: The host_version of this VersionedDeploymentSpec.  # noqa: E501
        :rtype: str
        """
        return self._host_version

    @host_version.setter
    def host_version(self, host_version):
        """Sets the host_version of this VersionedDeploymentSpec.

        version of the host  # noqa: E501

        :param host_version: The host_version of this VersionedDeploymentSpec.  # noqa: E501
        :type: str
        """
        if host_version is None:
            raise ValueError("Invalid value for `host_version`, must not be `None`")  # noqa: E501

        self._host_version = host_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VersionedDeploymentSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
