# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.base_switching_profile import BaseSwitchingProfile  # noqa: F401,E501
from swagger_client.models.bpdu_filter import BpduFilter  # noqa: F401,E501
from swagger_client.models.dhcp_filter import DhcpFilter  # noqa: F401,E501
from swagger_client.models.rate_limits import RateLimits  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501


class SwitchSecuritySwitchingProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rate_limits': 'RateLimits',
        'bpdu_filter': 'BpduFilter',
        'dhcp_filter': 'DhcpFilter',
        'block_non_ip_traffic': 'bool'
    }

    attribute_map = {
        'rate_limits': 'rate_limits',
        'bpdu_filter': 'bpdu_filter',
        'dhcp_filter': 'dhcp_filter',
        'block_non_ip_traffic': 'block_non_ip_traffic'
    }

    def __init__(self, rate_limits=None, bpdu_filter=None, dhcp_filter=None, block_non_ip_traffic=False):  # noqa: E501
        """SwitchSecuritySwitchingProfile - a model defined in Swagger"""  # noqa: E501

        self._rate_limits = None
        self._bpdu_filter = None
        self._dhcp_filter = None
        self._block_non_ip_traffic = None
        self.discriminator = None

        if rate_limits is not None:
            self.rate_limits = rate_limits
        if bpdu_filter is not None:
            self.bpdu_filter = bpdu_filter
        if dhcp_filter is not None:
            self.dhcp_filter = dhcp_filter
        if block_non_ip_traffic is not None:
            self.block_non_ip_traffic = block_non_ip_traffic

    @property
    def rate_limits(self):
        """Gets the rate_limits of this SwitchSecuritySwitchingProfile.  # noqa: E501

        Rate limiting is disabled by default  # noqa: E501

        :return: The rate_limits of this SwitchSecuritySwitchingProfile.  # noqa: E501
        :rtype: RateLimits
        """
        return self._rate_limits

    @rate_limits.setter
    def rate_limits(self, rate_limits):
        """Sets the rate_limits of this SwitchSecuritySwitchingProfile.

        Rate limiting is disabled by default  # noqa: E501

        :param rate_limits: The rate_limits of this SwitchSecuritySwitchingProfile.  # noqa: E501
        :type: RateLimits
        """

        self._rate_limits = rate_limits

    @property
    def bpdu_filter(self):
        """Gets the bpdu_filter of this SwitchSecuritySwitchingProfile.  # noqa: E501

        BPDU filtering is enabled by default. A pre-defined list of MAC addresses are automatically excluded from BPDU filtering.   # noqa: E501

        :return: The bpdu_filter of this SwitchSecuritySwitchingProfile.  # noqa: E501
        :rtype: BpduFilter
        """
        return self._bpdu_filter

    @bpdu_filter.setter
    def bpdu_filter(self, bpdu_filter):
        """Sets the bpdu_filter of this SwitchSecuritySwitchingProfile.

        BPDU filtering is enabled by default. A pre-defined list of MAC addresses are automatically excluded from BPDU filtering.   # noqa: E501

        :param bpdu_filter: The bpdu_filter of this SwitchSecuritySwitchingProfile.  # noqa: E501
        :type: BpduFilter
        """

        self._bpdu_filter = bpdu_filter

    @property
    def dhcp_filter(self):
        """Gets the dhcp_filter of this SwitchSecuritySwitchingProfile.  # noqa: E501

        DHCP server blocking is enabled and client blocking is disabled by default  # noqa: E501

        :return: The dhcp_filter of this SwitchSecuritySwitchingProfile.  # noqa: E501
        :rtype: DhcpFilter
        """
        return self._dhcp_filter

    @dhcp_filter.setter
    def dhcp_filter(self, dhcp_filter):
        """Sets the dhcp_filter of this SwitchSecuritySwitchingProfile.

        DHCP server blocking is enabled and client blocking is disabled by default  # noqa: E501

        :param dhcp_filter: The dhcp_filter of this SwitchSecuritySwitchingProfile.  # noqa: E501
        :type: DhcpFilter
        """

        self._dhcp_filter = dhcp_filter

    @property
    def block_non_ip_traffic(self):
        """Gets the block_non_ip_traffic of this SwitchSecuritySwitchingProfile.  # noqa: E501

        A flag to block all traffic except IP/(G)ARP/BPDU  # noqa: E501

        :return: The block_non_ip_traffic of this SwitchSecuritySwitchingProfile.  # noqa: E501
        :rtype: bool
        """
        return self._block_non_ip_traffic

    @block_non_ip_traffic.setter
    def block_non_ip_traffic(self, block_non_ip_traffic):
        """Sets the block_non_ip_traffic of this SwitchSecuritySwitchingProfile.

        A flag to block all traffic except IP/(G)ARP/BPDU  # noqa: E501

        :param block_non_ip_traffic: The block_non_ip_traffic of this SwitchSecuritySwitchingProfile.  # noqa: E501
        :type: bool
        """

        self._block_non_ip_traffic = block_non_ip_traffic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SwitchSecuritySwitchingProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
