# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.key_value_pair import KeyValuePair  # noqa: F401,E501
from swagger_client.models.resource import Resource  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501
from swagger_client.models.upgrade_unit_group_info import UpgradeUnitGroupInfo  # noqa: F401,E501


class UpgradeUnitAggregateInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'SelfResourceLink',
        'links': 'list[ResourceLink]',
        'schema': 'str',
        'status': 'str',
        'errors': 'list[str]',
        'group': 'UpgradeUnitGroupInfo',
        'display_name': 'str',
        'warnings': 'list[str]',
        'current_version': 'str',
        'percent_complete': 'float',
        'type': 'str',
        'id': 'str',
        'metadata': 'list[KeyValuePair]'
    }

    attribute_map = {
        '_self': '_self',
        'links': '_links',
        'schema': '_schema',
        'status': 'status',
        'errors': 'errors',
        'group': 'group',
        'display_name': 'display_name',
        'warnings': 'warnings',
        'current_version': 'current_version',
        'percent_complete': 'percent_complete',
        'type': 'type',
        'id': 'id',
        'metadata': 'metadata'
    }

    def __init__(self, _self=None, links=None, schema=None, status=None, errors=None, group=None, display_name=None, warnings=None, current_version=None, percent_complete=None, type=None, id=None, metadata=None):  # noqa: E501
        """UpgradeUnitAggregateInfo - a model defined in Swagger"""  # noqa: E501

        self.__self = None
        self._links = None
        self._schema = None
        self._status = None
        self._errors = None
        self._group = None
        self._display_name = None
        self._warnings = None
        self._current_version = None
        self._percent_complete = None
        self._type = None
        self._id = None
        self._metadata = None
        self.discriminator = None

        if _self is not None:
            self._self = _self
        if links is not None:
            self.links = links
        if schema is not None:
            self.schema = schema
        if status is not None:
            self.status = status
        if errors is not None:
            self.errors = errors
        if group is not None:
            self.group = group
        if display_name is not None:
            self.display_name = display_name
        if warnings is not None:
            self.warnings = warnings
        if current_version is not None:
            self.current_version = current_version
        if percent_complete is not None:
            self.percent_complete = percent_complete
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if metadata is not None:
            self.metadata = metadata

    @property
    def _self(self):
        """Gets the _self of this UpgradeUnitAggregateInfo.  # noqa: E501


        :return: The _self of this UpgradeUnitAggregateInfo.  # noqa: E501
        :rtype: SelfResourceLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this UpgradeUnitAggregateInfo.


        :param _self: The _self of this UpgradeUnitAggregateInfo.  # noqa: E501
        :type: SelfResourceLink
        """

        self.__self = _self

    @property
    def links(self):
        """Gets the links of this UpgradeUnitAggregateInfo.  # noqa: E501

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :return: The links of this UpgradeUnitAggregateInfo.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this UpgradeUnitAggregateInfo.

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :param links: The links of this UpgradeUnitAggregateInfo.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    @property
    def schema(self):
        """Gets the schema of this UpgradeUnitAggregateInfo.  # noqa: E501


        :return: The schema of this UpgradeUnitAggregateInfo.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this UpgradeUnitAggregateInfo.


        :param schema: The schema of this UpgradeUnitAggregateInfo.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def status(self):
        """Gets the status of this UpgradeUnitAggregateInfo.  # noqa: E501

        Status of upgrade unit  # noqa: E501

        :return: The status of this UpgradeUnitAggregateInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpgradeUnitAggregateInfo.

        Status of upgrade unit  # noqa: E501

        :param status: The status of this UpgradeUnitAggregateInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESS", "FAILED", "IN_PROGRESS", "NOT_STARTED", "PAUSED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def errors(self):
        """Gets the errors of this UpgradeUnitAggregateInfo.  # noqa: E501

        List of errors occurred during upgrade of this upgrade unit  # noqa: E501

        :return: The errors of this UpgradeUnitAggregateInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this UpgradeUnitAggregateInfo.

        List of errors occurred during upgrade of this upgrade unit  # noqa: E501

        :param errors: The errors of this UpgradeUnitAggregateInfo.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    @property
    def group(self):
        """Gets the group of this UpgradeUnitAggregateInfo.  # noqa: E501

        Info of the group to which this upgrade unit belongs  # noqa: E501

        :return: The group of this UpgradeUnitAggregateInfo.  # noqa: E501
        :rtype: UpgradeUnitGroupInfo
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this UpgradeUnitAggregateInfo.

        Info of the group to which this upgrade unit belongs  # noqa: E501

        :param group: The group of this UpgradeUnitAggregateInfo.  # noqa: E501
        :type: UpgradeUnitGroupInfo
        """

        self._group = group

    @property
    def display_name(self):
        """Gets the display_name of this UpgradeUnitAggregateInfo.  # noqa: E501

        Name of the upgrade unit  # noqa: E501

        :return: The display_name of this UpgradeUnitAggregateInfo.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UpgradeUnitAggregateInfo.

        Name of the upgrade unit  # noqa: E501

        :param display_name: The display_name of this UpgradeUnitAggregateInfo.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def warnings(self):
        """Gets the warnings of this UpgradeUnitAggregateInfo.  # noqa: E501

        List of warnings indicating issues with the upgrade unit that may result in upgrade failure  # noqa: E501

        :return: The warnings of this UpgradeUnitAggregateInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this UpgradeUnitAggregateInfo.

        List of warnings indicating issues with the upgrade unit that may result in upgrade failure  # noqa: E501

        :param warnings: The warnings of this UpgradeUnitAggregateInfo.  # noqa: E501
        :type: list[str]
        """

        self._warnings = warnings

    @property
    def current_version(self):
        """Gets the current_version of this UpgradeUnitAggregateInfo.  # noqa: E501

        This is component version e.g. if upgrade unit is of type edge, then this is edge version.  # noqa: E501

        :return: The current_version of this UpgradeUnitAggregateInfo.  # noqa: E501
        :rtype: str
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this UpgradeUnitAggregateInfo.

        This is component version e.g. if upgrade unit is of type edge, then this is edge version.  # noqa: E501

        :param current_version: The current_version of this UpgradeUnitAggregateInfo.  # noqa: E501
        :type: str
        """

        self._current_version = current_version

    @property
    def percent_complete(self):
        """Gets the percent_complete of this UpgradeUnitAggregateInfo.  # noqa: E501

        Indicator of upgrade progress in percentage  # noqa: E501

        :return: The percent_complete of this UpgradeUnitAggregateInfo.  # noqa: E501
        :rtype: float
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this UpgradeUnitAggregateInfo.

        Indicator of upgrade progress in percentage  # noqa: E501

        :param percent_complete: The percent_complete of this UpgradeUnitAggregateInfo.  # noqa: E501
        :type: float
        """

        self._percent_complete = percent_complete

    @property
    def type(self):
        """Gets the type of this UpgradeUnitAggregateInfo.  # noqa: E501

        Upgrade unit type  # noqa: E501

        :return: The type of this UpgradeUnitAggregateInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpgradeUnitAggregateInfo.

        Upgrade unit type  # noqa: E501

        :param type: The type of this UpgradeUnitAggregateInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this UpgradeUnitAggregateInfo.  # noqa: E501

        Identifier of the upgrade unit  # noqa: E501

        :return: The id of this UpgradeUnitAggregateInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpgradeUnitAggregateInfo.

        Identifier of the upgrade unit  # noqa: E501

        :param id: The id of this UpgradeUnitAggregateInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this UpgradeUnitAggregateInfo.  # noqa: E501

        Metadata about upgrade unit  # noqa: E501

        :return: The metadata of this UpgradeUnitAggregateInfo.  # noqa: E501
        :rtype: list[KeyValuePair]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UpgradeUnitAggregateInfo.

        Metadata about upgrade unit  # noqa: E501

        :param metadata: The metadata of this UpgradeUnitAggregateInfo.  # noqa: E501
        :type: list[KeyValuePair]
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeUnitAggregateInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
