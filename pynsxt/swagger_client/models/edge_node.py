# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.edge_node_deployment_config import EdgeNodeDeploymentConfig  # noqa: F401,E501
from swagger_client.models.node import Node  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501


class EdgeNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_config': 'EdgeNodeDeploymentConfig',
        'allocation_list': 'list[str]',
        'deployment_type': 'str'
    }

    attribute_map = {
        'deployment_config': 'deployment_config',
        'allocation_list': 'allocation_list',
        'deployment_type': 'deployment_type'
    }

    def __init__(self, deployment_config=None, allocation_list=None, deployment_type=None):  # noqa: E501
        """EdgeNode - a model defined in Swagger"""  # noqa: E501

        self._deployment_config = None
        self._allocation_list = None
        self._deployment_type = None
        self.discriminator = None

        if deployment_config is not None:
            self.deployment_config = deployment_config
        if allocation_list is not None:
            self.allocation_list = allocation_list
        if deployment_type is not None:
            self.deployment_type = deployment_type

    @property
    def deployment_config(self):
        """Gets the deployment_config of this EdgeNode.  # noqa: E501

        When this configuration is specified, edge fabric node of deployment_type VIRTUAL_MACHINE will be deployed and registered with MP.   # noqa: E501

        :return: The deployment_config of this EdgeNode.  # noqa: E501
        :rtype: EdgeNodeDeploymentConfig
        """
        return self._deployment_config

    @deployment_config.setter
    def deployment_config(self, deployment_config):
        """Sets the deployment_config of this EdgeNode.

        When this configuration is specified, edge fabric node of deployment_type VIRTUAL_MACHINE will be deployed and registered with MP.   # noqa: E501

        :param deployment_config: The deployment_config of this EdgeNode.  # noqa: E501
        :type: EdgeNodeDeploymentConfig
        """

        self._deployment_config = deployment_config

    @property
    def allocation_list(self):
        """Gets the allocation_list of this EdgeNode.  # noqa: E501

        List of logical router ids to which this edge node is allocated.  # noqa: E501

        :return: The allocation_list of this EdgeNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._allocation_list

    @allocation_list.setter
    def allocation_list(self, allocation_list):
        """Sets the allocation_list of this EdgeNode.

        List of logical router ids to which this edge node is allocated.  # noqa: E501

        :param allocation_list: The allocation_list of this EdgeNode.  # noqa: E501
        :type: list[str]
        """

        self._allocation_list = allocation_list

    @property
    def deployment_type(self):
        """Gets the deployment_type of this EdgeNode.  # noqa: E501

        Supported edge deployment type.  # noqa: E501

        :return: The deployment_type of this EdgeNode.  # noqa: E501
        :rtype: str
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this EdgeNode.

        Supported edge deployment type.  # noqa: E501

        :param deployment_type: The deployment_type of this EdgeNode.  # noqa: E501
        :type: str
        """
        allowed_values = ["VIRTUAL_MACHINE", "PHYSICAL_MACHINE", "UNKNOWN"]  # noqa: E501
        if deployment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_type, allowed_values)
            )

        self._deployment_type = deployment_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
