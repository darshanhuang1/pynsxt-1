# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PoolMemberSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_state': 'str',
        'ip_address': 'str',
        'port': 'str'
    }

    attribute_map = {
        'admin_state': 'admin_state',
        'ip_address': 'ip_address',
        'port': 'port'
    }

    def __init__(self, admin_state='ENABLED', ip_address=None, port=None):  # noqa: E501
        """PoolMemberSetting - a model defined in Swagger"""  # noqa: E501

        self._admin_state = None
        self._ip_address = None
        self._port = None
        self.discriminator = None

        if admin_state is not None:
            self.admin_state = admin_state
        self.ip_address = ip_address
        if port is not None:
            self.port = port

    @property
    def admin_state(self):
        """Gets the admin_state of this PoolMemberSetting.  # noqa: E501

        Member admin state  # noqa: E501

        :return: The admin_state of this PoolMemberSetting.  # noqa: E501
        :rtype: str
        """
        return self._admin_state

    @admin_state.setter
    def admin_state(self, admin_state):
        """Sets the admin_state of this PoolMemberSetting.

        Member admin state  # noqa: E501

        :param admin_state: The admin_state of this PoolMemberSetting.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED", "GRACEFUL_DISABLED"]  # noqa: E501
        if admin_state not in allowed_values:
            raise ValueError(
                "Invalid value for `admin_state` ({0}), must be one of {1}"  # noqa: E501
                .format(admin_state, allowed_values)
            )

        self._admin_state = admin_state

    @property
    def ip_address(self):
        """Gets the ip_address of this PoolMemberSetting.  # noqa: E501

        Pool member IP address  # noqa: E501

        :return: The ip_address of this PoolMemberSetting.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this PoolMemberSetting.

        Pool member IP address  # noqa: E501

        :param ip_address: The ip_address of this PoolMemberSetting.  # noqa: E501
        :type: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def port(self):
        """Gets the port of this PoolMemberSetting.  # noqa: E501

        Pool member port number  # noqa: E501

        :return: The port of this PoolMemberSetting.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this PoolMemberSetting.

        Pool member port number  # noqa: E501

        :param port: The port of this PoolMemberSetting.  # noqa: E501
        :type: str
        """

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoolMemberSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
