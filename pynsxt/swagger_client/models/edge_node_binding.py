# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EdgeNodeBinding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logical_router_port_ids': 'list[str]',
        'edge_cluster_id': 'str'
    }

    attribute_map = {
        'logical_router_port_ids': 'logical_router_port_ids',
        'edge_cluster_id': 'edge_cluster_id'
    }

    def __init__(self, logical_router_port_ids=None, edge_cluster_id=None):  # noqa: E501
        """EdgeNodeBinding - a model defined in Swagger"""  # noqa: E501

        self._logical_router_port_ids = None
        self._edge_cluster_id = None
        self.discriminator = None

        self.logical_router_port_ids = logical_router_port_ids
        if edge_cluster_id is not None:
            self.edge_cluster_id = edge_cluster_id

    @property
    def logical_router_port_ids(self):
        """Gets the logical_router_port_ids of this EdgeNodeBinding.  # noqa: E501

        List of LR port ids backed by this node.  # noqa: E501

        :return: The logical_router_port_ids of this EdgeNodeBinding.  # noqa: E501
        :rtype: list[str]
        """
        return self._logical_router_port_ids

    @logical_router_port_ids.setter
    def logical_router_port_ids(self, logical_router_port_ids):
        """Sets the logical_router_port_ids of this EdgeNodeBinding.

        List of LR port ids backed by this node.  # noqa: E501

        :param logical_router_port_ids: The logical_router_port_ids of this EdgeNodeBinding.  # noqa: E501
        :type: list[str]
        """
        if logical_router_port_ids is None:
            raise ValueError("Invalid value for `logical_router_port_ids`, must not be `None`")  # noqa: E501

        self._logical_router_port_ids = logical_router_port_ids

    @property
    def edge_cluster_id(self):
        """Gets the edge_cluster_id of this EdgeNodeBinding.  # noqa: E501

        Edge cluster UUID where this edge node is a member.  # noqa: E501

        :return: The edge_cluster_id of this EdgeNodeBinding.  # noqa: E501
        :rtype: str
        """
        return self._edge_cluster_id

    @edge_cluster_id.setter
    def edge_cluster_id(self, edge_cluster_id):
        """Sets the edge_cluster_id of this EdgeNodeBinding.

        Edge cluster UUID where this edge node is a member.  # noqa: E501

        :param edge_cluster_id: The edge_cluster_id of this EdgeNodeBinding.  # noqa: E501
        :type: str
        """

        self._edge_cluster_id = edge_cluster_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeNodeBinding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
