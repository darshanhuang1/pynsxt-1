# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.aws_gateway_ha_config import AwsGatewayHaConfig  # noqa: F401,E501
from swagger_client.models.resource import Resource  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501


class AwsGatewayConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'SelfResourceLink',
        'links': 'list[ResourceLink]',
        'schema': 'str',
        'ami_id': 'str',
        'nsx_manager_connection': 'str',
        'gateway_ha_configuration': 'list[AwsGatewayHaConfig]',
        'is_ha_enabled': 'bool',
        'default_quarantine_policy_enabled': 'bool',
        'key_pair_name': 'str'
    }

    attribute_map = {
        '_self': '_self',
        'links': '_links',
        'schema': '_schema',
        'ami_id': 'ami_id',
        'nsx_manager_connection': 'nsx_manager_connection',
        'gateway_ha_configuration': 'gateway_ha_configuration',
        'is_ha_enabled': 'is_ha_enabled',
        'default_quarantine_policy_enabled': 'default_quarantine_policy_enabled',
        'key_pair_name': 'key_pair_name'
    }

    def __init__(self, _self=None, links=None, schema=None, ami_id=None, nsx_manager_connection=None, gateway_ha_configuration=None, is_ha_enabled=None, default_quarantine_policy_enabled=None, key_pair_name=None):  # noqa: E501
        """AwsGatewayConfig - a model defined in Swagger"""  # noqa: E501

        self.__self = None
        self._links = None
        self._schema = None
        self._ami_id = None
        self._nsx_manager_connection = None
        self._gateway_ha_configuration = None
        self._is_ha_enabled = None
        self._default_quarantine_policy_enabled = None
        self._key_pair_name = None
        self.discriminator = None

        if _self is not None:
            self._self = _self
        if links is not None:
            self.links = links
        if schema is not None:
            self.schema = schema
        if ami_id is not None:
            self.ami_id = ami_id
        if nsx_manager_connection is not None:
            self.nsx_manager_connection = nsx_manager_connection
        if gateway_ha_configuration is not None:
            self.gateway_ha_configuration = gateway_ha_configuration
        if is_ha_enabled is not None:
            self.is_ha_enabled = is_ha_enabled
        if default_quarantine_policy_enabled is not None:
            self.default_quarantine_policy_enabled = default_quarantine_policy_enabled
        if key_pair_name is not None:
            self.key_pair_name = key_pair_name

    @property
    def _self(self):
        """Gets the _self of this AwsGatewayConfig.  # noqa: E501


        :return: The _self of this AwsGatewayConfig.  # noqa: E501
        :rtype: SelfResourceLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AwsGatewayConfig.


        :param _self: The _self of this AwsGatewayConfig.  # noqa: E501
        :type: SelfResourceLink
        """

        self.__self = _self

    @property
    def links(self):
        """Gets the links of this AwsGatewayConfig.  # noqa: E501

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :return: The links of this AwsGatewayConfig.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AwsGatewayConfig.

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :param links: The links of this AwsGatewayConfig.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    @property
    def schema(self):
        """Gets the schema of this AwsGatewayConfig.  # noqa: E501


        :return: The schema of this AwsGatewayConfig.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this AwsGatewayConfig.


        :param schema: The schema of this AwsGatewayConfig.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def ami_id(self):
        """Gets the ami_id of this AwsGatewayConfig.  # noqa: E501

        The ID of the Amazon Machine Image on which this gateway resides   # noqa: E501

        :return: The ami_id of this AwsGatewayConfig.  # noqa: E501
        :rtype: str
        """
        return self._ami_id

    @ami_id.setter
    def ami_id(self, ami_id):
        """Sets the ami_id of this AwsGatewayConfig.

        The ID of the Amazon Machine Image on which this gateway resides   # noqa: E501

        :param ami_id: The ami_id of this AwsGatewayConfig.  # noqa: E501
        :type: str
        """

        self._ami_id = ami_id

    @property
    def nsx_manager_connection(self):
        """Gets the nsx_manager_connection of this AwsGatewayConfig.  # noqa: E501

        Determines if connection to NSX Manager is via public IP or private IP   # noqa: E501

        :return: The nsx_manager_connection of this AwsGatewayConfig.  # noqa: E501
        :rtype: str
        """
        return self._nsx_manager_connection

    @nsx_manager_connection.setter
    def nsx_manager_connection(self, nsx_manager_connection):
        """Sets the nsx_manager_connection of this AwsGatewayConfig.

        Determines if connection to NSX Manager is via public IP or private IP   # noqa: E501

        :param nsx_manager_connection: The nsx_manager_connection of this AwsGatewayConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["PUBLIC_IP", "PRIVATE_IP"]  # noqa: E501
        if nsx_manager_connection not in allowed_values:
            raise ValueError(
                "Invalid value for `nsx_manager_connection` ({0}), must be one of {1}"  # noqa: E501
                .format(nsx_manager_connection, allowed_values)
            )

        self._nsx_manager_connection = nsx_manager_connection

    @property
    def gateway_ha_configuration(self):
        """Gets the gateway_ha_configuration of this AwsGatewayConfig.  # noqa: E501

        Aws Gateway HA configuration  # noqa: E501

        :return: The gateway_ha_configuration of this AwsGatewayConfig.  # noqa: E501
        :rtype: list[AwsGatewayHaConfig]
        """
        return self._gateway_ha_configuration

    @gateway_ha_configuration.setter
    def gateway_ha_configuration(self, gateway_ha_configuration):
        """Sets the gateway_ha_configuration of this AwsGatewayConfig.

        Aws Gateway HA configuration  # noqa: E501

        :param gateway_ha_configuration: The gateway_ha_configuration of this AwsGatewayConfig.  # noqa: E501
        :type: list[AwsGatewayHaConfig]
        """

        self._gateway_ha_configuration = gateway_ha_configuration

    @property
    def is_ha_enabled(self):
        """Gets the is_ha_enabled of this AwsGatewayConfig.  # noqa: E501

        Flag to identify if HA is enabled  # noqa: E501

        :return: The is_ha_enabled of this AwsGatewayConfig.  # noqa: E501
        :rtype: bool
        """
        return self._is_ha_enabled

    @is_ha_enabled.setter
    def is_ha_enabled(self, is_ha_enabled):
        """Sets the is_ha_enabled of this AwsGatewayConfig.

        Flag to identify if HA is enabled  # noqa: E501

        :param is_ha_enabled: The is_ha_enabled of this AwsGatewayConfig.  # noqa: E501
        :type: bool
        """

        self._is_ha_enabled = is_ha_enabled

    @property
    def default_quarantine_policy_enabled(self):
        """Gets the default_quarantine_policy_enabled of this AwsGatewayConfig.  # noqa: E501

        Flag to identify if default quarantine policy is enabled  # noqa: E501

        :return: The default_quarantine_policy_enabled of this AwsGatewayConfig.  # noqa: E501
        :rtype: bool
        """
        return self._default_quarantine_policy_enabled

    @default_quarantine_policy_enabled.setter
    def default_quarantine_policy_enabled(self, default_quarantine_policy_enabled):
        """Sets the default_quarantine_policy_enabled of this AwsGatewayConfig.

        Flag to identify if default quarantine policy is enabled  # noqa: E501

        :param default_quarantine_policy_enabled: The default_quarantine_policy_enabled of this AwsGatewayConfig.  # noqa: E501
        :type: bool
        """

        self._default_quarantine_policy_enabled = default_quarantine_policy_enabled

    @property
    def key_pair_name(self):
        """Gets the key_pair_name of this AwsGatewayConfig.  # noqa: E501

        The key pair name required to authenticate into any instance  # noqa: E501

        :return: The key_pair_name of this AwsGatewayConfig.  # noqa: E501
        :rtype: str
        """
        return self._key_pair_name

    @key_pair_name.setter
    def key_pair_name(self, key_pair_name):
        """Sets the key_pair_name of this AwsGatewayConfig.

        The key pair name required to authenticate into any instance  # noqa: E501

        :param key_pair_name: The key_pair_name of this AwsGatewayConfig.  # noqa: E501
        :type: str
        """

        self._key_pair_name = key_pair_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsGatewayConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
