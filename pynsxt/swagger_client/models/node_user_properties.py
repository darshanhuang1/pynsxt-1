# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.resource import Resource  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501


class NodeUserProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'SelfResourceLink',
        'links': 'list[ResourceLink]',
        'schema': 'str',
        'username': 'str',
        'password': 'str',
        'userid': 'int',
        'old_password': 'str',
        'full_name': 'str'
    }

    attribute_map = {
        '_self': '_self',
        'links': '_links',
        'schema': '_schema',
        'username': 'username',
        'password': 'password',
        'userid': 'userid',
        'old_password': 'old_password',
        'full_name': 'full_name'
    }

    def __init__(self, _self=None, links=None, schema=None, username=None, password=None, userid=None, old_password=None, full_name=None):  # noqa: E501
        """NodeUserProperties - a model defined in Swagger"""  # noqa: E501

        self.__self = None
        self._links = None
        self._schema = None
        self._username = None
        self._password = None
        self._userid = None
        self._old_password = None
        self._full_name = None
        self.discriminator = None

        if _self is not None:
            self._self = _self
        if links is not None:
            self.links = links
        if schema is not None:
            self.schema = schema
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if userid is not None:
            self.userid = userid
        if old_password is not None:
            self.old_password = old_password
        if full_name is not None:
            self.full_name = full_name

    @property
    def _self(self):
        """Gets the _self of this NodeUserProperties.  # noqa: E501


        :return: The _self of this NodeUserProperties.  # noqa: E501
        :rtype: SelfResourceLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this NodeUserProperties.


        :param _self: The _self of this NodeUserProperties.  # noqa: E501
        :type: SelfResourceLink
        """

        self.__self = _self

    @property
    def links(self):
        """Gets the links of this NodeUserProperties.  # noqa: E501

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :return: The links of this NodeUserProperties.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this NodeUserProperties.

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :param links: The links of this NodeUserProperties.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    @property
    def schema(self):
        """Gets the schema of this NodeUserProperties.  # noqa: E501


        :return: The schema of this NodeUserProperties.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this NodeUserProperties.


        :param schema: The schema of this NodeUserProperties.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def username(self):
        """Gets the username of this NodeUserProperties.  # noqa: E501

        User login name (must be \"root\" if userid is 0)  # noqa: E501

        :return: The username of this NodeUserProperties.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this NodeUserProperties.

        User login name (must be \"root\" if userid is 0)  # noqa: E501

        :param username: The username of this NodeUserProperties.  # noqa: E501
        :type: str
        """
        if username is not None and len(username) > 32:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `32`")  # noqa: E501
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this NodeUserProperties.  # noqa: E501

        Password for the user (optionally specified on PUT, unspecified on GET)  # noqa: E501

        :return: The password of this NodeUserProperties.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this NodeUserProperties.

        Password for the user (optionally specified on PUT, unspecified on GET)  # noqa: E501

        :param password: The password of this NodeUserProperties.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def userid(self):
        """Gets the userid of this NodeUserProperties.  # noqa: E501

        Numeric id for the user  # noqa: E501

        :return: The userid of this NodeUserProperties.  # noqa: E501
        :rtype: int
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this NodeUserProperties.

        Numeric id for the user  # noqa: E501

        :param userid: The userid of this NodeUserProperties.  # noqa: E501
        :type: int
        """
        if userid is not None and userid > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `userid`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if userid is not None and userid < 0:  # noqa: E501
            raise ValueError("Invalid value for `userid`, must be a value greater than or equal to `0`")  # noqa: E501

        self._userid = userid

    @property
    def old_password(self):
        """Gets the old_password of this NodeUserProperties.  # noqa: E501

        Old password for the user (required on PUT if password specified)  # noqa: E501

        :return: The old_password of this NodeUserProperties.  # noqa: E501
        :rtype: str
        """
        return self._old_password

    @old_password.setter
    def old_password(self, old_password):
        """Sets the old_password of this NodeUserProperties.

        Old password for the user (required on PUT if password specified)  # noqa: E501

        :param old_password: The old_password of this NodeUserProperties.  # noqa: E501
        :type: str
        """

        self._old_password = old_password

    @property
    def full_name(self):
        """Gets the full_name of this NodeUserProperties.  # noqa: E501

        Full name for the user  # noqa: E501

        :return: The full_name of this NodeUserProperties.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this NodeUserProperties.

        Full name for the user  # noqa: E501

        :param full_name: The full_name of this NodeUserProperties.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeUserProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
