# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BackupFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'passphrase': 'str',
        'file_store': 'str'
    }

    attribute_map = {
        'passphrase': 'passphrase',
        'file_store': 'file_store'
    }

    def __init__(self, passphrase=None, file_store=None):  # noqa: E501
        """BackupFile - a model defined in Swagger"""  # noqa: E501

        self._passphrase = None
        self._file_store = None
        self.discriminator = None

        self.passphrase = passphrase
        self.file_store = file_store

    @property
    def passphrase(self):
        """Gets the passphrase of this BackupFile.  # noqa: E501

        Passphrase used to encrypt backup file  # noqa: E501

        :return: The passphrase of this BackupFile.  # noqa: E501
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this BackupFile.

        Passphrase used to encrypt backup file  # noqa: E501

        :param passphrase: The passphrase of this BackupFile.  # noqa: E501
        :type: str
        """
        if passphrase is None:
            raise ValueError("Invalid value for `passphrase`, must not be `None`")  # noqa: E501

        self._passphrase = passphrase

    @property
    def file_store(self):
        """Gets the file_store of this BackupFile.  # noqa: E501

        File location  # noqa: E501

        :return: The file_store of this BackupFile.  # noqa: E501
        :rtype: str
        """
        return self._file_store

    @file_store.setter
    def file_store(self, file_store):
        """Sets the file_store of this BackupFile.

        File location  # noqa: E501

        :param file_store: The file_store of this BackupFile.  # noqa: E501
        :type: str
        """
        if file_store is None:
            raise ValueError("Invalid value for `file_store`, must not be `None`")  # noqa: E501
        allowed_values = ["local", "remote"]  # noqa: E501
        if file_store not in allowed_values:
            raise ValueError(
                "Invalid value for `file_store` ({0}), must be one of {1}"  # noqa: E501
                .format(file_store, allowed_values)
            )

        self._file_store = file_store

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
