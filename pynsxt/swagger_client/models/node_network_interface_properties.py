# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.i_pv4_address_properties import IPv4AddressProperties  # noqa: F401,E501
from swagger_client.models.resource import Resource  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501


class NodeNetworkInterfaceProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'SelfResourceLink',
        'links': 'list[ResourceLink]',
        'schema': 'str',
        'physical_address': 'str',
        'broadcast_address': 'str',
        'link_status': 'str',
        'default_gateway': 'str',
        'bond_primary': 'str',
        'bond_slaves': 'list[str]',
        'ip_addresses': 'list[IPv4AddressProperties]',
        'admin_status': 'str',
        'interface_id': 'str',
        'bond_mode': 'str',
        'plane': 'str',
        'ip_configuration': 'str',
        'mtu': 'int'
    }

    attribute_map = {
        '_self': '_self',
        'links': '_links',
        'schema': '_schema',
        'physical_address': 'physical_address',
        'broadcast_address': 'broadcast_address',
        'link_status': 'link_status',
        'default_gateway': 'default_gateway',
        'bond_primary': 'bond_primary',
        'bond_slaves': 'bond_slaves',
        'ip_addresses': 'ip_addresses',
        'admin_status': 'admin_status',
        'interface_id': 'interface_id',
        'bond_mode': 'bond_mode',
        'plane': 'plane',
        'ip_configuration': 'ip_configuration',
        'mtu': 'mtu'
    }

    def __init__(self, _self=None, links=None, schema=None, physical_address=None, broadcast_address=None, link_status=None, default_gateway=None, bond_primary=None, bond_slaves=None, ip_addresses=None, admin_status=None, interface_id=None, bond_mode=None, plane=None, ip_configuration=None, mtu=None):  # noqa: E501
        """NodeNetworkInterfaceProperties - a model defined in Swagger"""  # noqa: E501

        self.__self = None
        self._links = None
        self._schema = None
        self._physical_address = None
        self._broadcast_address = None
        self._link_status = None
        self._default_gateway = None
        self._bond_primary = None
        self._bond_slaves = None
        self._ip_addresses = None
        self._admin_status = None
        self._interface_id = None
        self._bond_mode = None
        self._plane = None
        self._ip_configuration = None
        self._mtu = None
        self.discriminator = None

        if _self is not None:
            self._self = _self
        if links is not None:
            self.links = links
        if schema is not None:
            self.schema = schema
        if physical_address is not None:
            self.physical_address = physical_address
        if broadcast_address is not None:
            self.broadcast_address = broadcast_address
        if link_status is not None:
            self.link_status = link_status
        if default_gateway is not None:
            self.default_gateway = default_gateway
        if bond_primary is not None:
            self.bond_primary = bond_primary
        if bond_slaves is not None:
            self.bond_slaves = bond_slaves
        if ip_addresses is not None:
            self.ip_addresses = ip_addresses
        if admin_status is not None:
            self.admin_status = admin_status
        if interface_id is not None:
            self.interface_id = interface_id
        if bond_mode is not None:
            self.bond_mode = bond_mode
        if plane is not None:
            self.plane = plane
        self.ip_configuration = ip_configuration
        if mtu is not None:
            self.mtu = mtu

    @property
    def _self(self):
        """Gets the _self of this NodeNetworkInterfaceProperties.  # noqa: E501


        :return: The _self of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: SelfResourceLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this NodeNetworkInterfaceProperties.


        :param _self: The _self of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: SelfResourceLink
        """

        self.__self = _self

    @property
    def links(self):
        """Gets the links of this NodeNetworkInterfaceProperties.  # noqa: E501

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :return: The links of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this NodeNetworkInterfaceProperties.

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :param links: The links of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    @property
    def schema(self):
        """Gets the schema of this NodeNetworkInterfaceProperties.  # noqa: E501


        :return: The schema of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this NodeNetworkInterfaceProperties.


        :param schema: The schema of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def physical_address(self):
        """Gets the physical_address of this NodeNetworkInterfaceProperties.  # noqa: E501

        Interface MAC address  # noqa: E501

        :return: The physical_address of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: str
        """
        return self._physical_address

    @physical_address.setter
    def physical_address(self, physical_address):
        """Sets the physical_address of this NodeNetworkInterfaceProperties.

        Interface MAC address  # noqa: E501

        :param physical_address: The physical_address of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: str
        """

        self._physical_address = physical_address

    @property
    def broadcast_address(self):
        """Gets the broadcast_address of this NodeNetworkInterfaceProperties.  # noqa: E501

        Interface broadcast address  # noqa: E501

        :return: The broadcast_address of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: str
        """
        return self._broadcast_address

    @broadcast_address.setter
    def broadcast_address(self, broadcast_address):
        """Sets the broadcast_address of this NodeNetworkInterfaceProperties.

        Interface broadcast address  # noqa: E501

        :param broadcast_address: The broadcast_address of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: str
        """

        self._broadcast_address = broadcast_address

    @property
    def link_status(self):
        """Gets the link_status of this NodeNetworkInterfaceProperties.  # noqa: E501

        Interface administration status  # noqa: E501

        :return: The link_status of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: str
        """
        return self._link_status

    @link_status.setter
    def link_status(self, link_status):
        """Sets the link_status of this NodeNetworkInterfaceProperties.

        Interface administration status  # noqa: E501

        :param link_status: The link_status of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["up", "down"]  # noqa: E501
        if link_status not in allowed_values:
            raise ValueError(
                "Invalid value for `link_status` ({0}), must be one of {1}"  # noqa: E501
                .format(link_status, allowed_values)
            )

        self._link_status = link_status

    @property
    def default_gateway(self):
        """Gets the default_gateway of this NodeNetworkInterfaceProperties.  # noqa: E501

        Interface's default gateway  # noqa: E501

        :return: The default_gateway of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: str
        """
        return self._default_gateway

    @default_gateway.setter
    def default_gateway(self, default_gateway):
        """Sets the default_gateway of this NodeNetworkInterfaceProperties.

        Interface's default gateway  # noqa: E501

        :param default_gateway: The default_gateway of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: str
        """

        self._default_gateway = default_gateway

    @property
    def bond_primary(self):
        """Gets the bond_primary of this NodeNetworkInterfaceProperties.  # noqa: E501

        Bond's primary device name in active-backup bond mode  # noqa: E501

        :return: The bond_primary of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: str
        """
        return self._bond_primary

    @bond_primary.setter
    def bond_primary(self, bond_primary):
        """Sets the bond_primary of this NodeNetworkInterfaceProperties.

        Bond's primary device name in active-backup bond mode  # noqa: E501

        :param bond_primary: The bond_primary of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: str
        """

        self._bond_primary = bond_primary

    @property
    def bond_slaves(self):
        """Gets the bond_slaves of this NodeNetworkInterfaceProperties.  # noqa: E501

        Bond's slave devices  # noqa: E501

        :return: The bond_slaves of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._bond_slaves

    @bond_slaves.setter
    def bond_slaves(self, bond_slaves):
        """Sets the bond_slaves of this NodeNetworkInterfaceProperties.

        Bond's slave devices  # noqa: E501

        :param bond_slaves: The bond_slaves of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: list[str]
        """

        self._bond_slaves = bond_slaves

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this NodeNetworkInterfaceProperties.  # noqa: E501

        Interface IP addresses  # noqa: E501

        :return: The ip_addresses of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: list[IPv4AddressProperties]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this NodeNetworkInterfaceProperties.

        Interface IP addresses  # noqa: E501

        :param ip_addresses: The ip_addresses of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: list[IPv4AddressProperties]
        """

        self._ip_addresses = ip_addresses

    @property
    def admin_status(self):
        """Gets the admin_status of this NodeNetworkInterfaceProperties.  # noqa: E501

        Interface administration status  # noqa: E501

        :return: The admin_status of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: str
        """
        return self._admin_status

    @admin_status.setter
    def admin_status(self, admin_status):
        """Sets the admin_status of this NodeNetworkInterfaceProperties.

        Interface administration status  # noqa: E501

        :param admin_status: The admin_status of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["up", "down"]  # noqa: E501
        if admin_status not in allowed_values:
            raise ValueError(
                "Invalid value for `admin_status` ({0}), must be one of {1}"  # noqa: E501
                .format(admin_status, allowed_values)
            )

        self._admin_status = admin_status

    @property
    def interface_id(self):
        """Gets the interface_id of this NodeNetworkInterfaceProperties.  # noqa: E501

        Interface ID  # noqa: E501

        :return: The interface_id of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: str
        """
        return self._interface_id

    @interface_id.setter
    def interface_id(self, interface_id):
        """Sets the interface_id of this NodeNetworkInterfaceProperties.

        Interface ID  # noqa: E501

        :param interface_id: The interface_id of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: str
        """

        self._interface_id = interface_id

    @property
    def bond_mode(self):
        """Gets the bond_mode of this NodeNetworkInterfaceProperties.  # noqa: E501

        Bond mode  # noqa: E501

        :return: The bond_mode of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: str
        """
        return self._bond_mode

    @bond_mode.setter
    def bond_mode(self, bond_mode):
        """Sets the bond_mode of this NodeNetworkInterfaceProperties.

        Bond mode  # noqa: E501

        :param bond_mode: The bond_mode of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE_BACKUP", "802_3AD"]  # noqa: E501
        if bond_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `bond_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(bond_mode, allowed_values)
            )

        self._bond_mode = bond_mode

    @property
    def plane(self):
        """Gets the plane of this NodeNetworkInterfaceProperties.  # noqa: E501

        Interface plane  # noqa: E501

        :return: The plane of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: str
        """
        return self._plane

    @plane.setter
    def plane(self, plane):
        """Sets the plane of this NodeNetworkInterfaceProperties.

        Interface plane  # noqa: E501

        :param plane: The plane of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["mgmt", "debug"]  # noqa: E501
        if plane not in allowed_values:
            raise ValueError(
                "Invalid value for `plane` ({0}), must be one of {1}"  # noqa: E501
                .format(plane, allowed_values)
            )

        self._plane = plane

    @property
    def ip_configuration(self):
        """Gets the ip_configuration of this NodeNetworkInterfaceProperties.  # noqa: E501

        Interface configuration  # noqa: E501

        :return: The ip_configuration of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: str
        """
        return self._ip_configuration

    @ip_configuration.setter
    def ip_configuration(self, ip_configuration):
        """Sets the ip_configuration of this NodeNetworkInterfaceProperties.

        Interface configuration  # noqa: E501

        :param ip_configuration: The ip_configuration of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: str
        """
        if ip_configuration is None:
            raise ValueError("Invalid value for `ip_configuration`, must not be `None`")  # noqa: E501
        allowed_values = ["dhcp", "static", "not configured"]  # noqa: E501
        if ip_configuration not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_configuration` ({0}), must be one of {1}"  # noqa: E501
                .format(ip_configuration, allowed_values)
            )

        self._ip_configuration = ip_configuration

    @property
    def mtu(self):
        """Gets the mtu of this NodeNetworkInterfaceProperties.  # noqa: E501

        Interface MTU  # noqa: E501

        :return: The mtu of this NodeNetworkInterfaceProperties.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this NodeNetworkInterfaceProperties.

        Interface MTU  # noqa: E501

        :param mtu: The mtu of this NodeNetworkInterfaceProperties.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeNetworkInterfaceProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
