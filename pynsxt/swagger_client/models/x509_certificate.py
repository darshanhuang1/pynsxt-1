# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class X509Certificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rsa_public_key_modulus': 'str',
        'dsa_public_key_y': 'str',
        'is_ca': 'bool',
        'issuer': 'str',
        'not_after': 'int',
        'signature': 'str',
        'dsa_public_key_q': 'str',
        'dsa_public_key_p': 'str',
        'rsa_public_key_exponent': 'str',
        'public_key_algo': 'str',
        'is_valid': 'bool',
        'issuer_cn': 'str',
        'version': 'str',
        'subject_cn': 'str',
        'signature_algorithm': 'str',
        'serial_number': 'str',
        'dsa_public_key_g': 'str',
        'public_key_length': 'int',
        'not_before': 'int',
        'subject': 'str'
    }

    attribute_map = {
        'rsa_public_key_modulus': 'rsa_public_key_modulus',
        'dsa_public_key_y': 'dsa_public_key_y',
        'is_ca': 'is_ca',
        'issuer': 'issuer',
        'not_after': 'not_after',
        'signature': 'signature',
        'dsa_public_key_q': 'dsa_public_key_q',
        'dsa_public_key_p': 'dsa_public_key_p',
        'rsa_public_key_exponent': 'rsa_public_key_exponent',
        'public_key_algo': 'public_key_algo',
        'is_valid': 'is_valid',
        'issuer_cn': 'issuer_cn',
        'version': 'version',
        'subject_cn': 'subject_cn',
        'signature_algorithm': 'signature_algorithm',
        'serial_number': 'serial_number',
        'dsa_public_key_g': 'dsa_public_key_g',
        'public_key_length': 'public_key_length',
        'not_before': 'not_before',
        'subject': 'subject'
    }

    def __init__(self, rsa_public_key_modulus=None, dsa_public_key_y=None, is_ca=None, issuer=None, not_after=None, signature=None, dsa_public_key_q=None, dsa_public_key_p=None, rsa_public_key_exponent=None, public_key_algo=None, is_valid=None, issuer_cn=None, version=None, subject_cn=None, signature_algorithm=None, serial_number=None, dsa_public_key_g=None, public_key_length=None, not_before=None, subject=None):  # noqa: E501
        """X509Certificate - a model defined in Swagger"""  # noqa: E501

        self._rsa_public_key_modulus = None
        self._dsa_public_key_y = None
        self._is_ca = None
        self._issuer = None
        self._not_after = None
        self._signature = None
        self._dsa_public_key_q = None
        self._dsa_public_key_p = None
        self._rsa_public_key_exponent = None
        self._public_key_algo = None
        self._is_valid = None
        self._issuer_cn = None
        self._version = None
        self._subject_cn = None
        self._signature_algorithm = None
        self._serial_number = None
        self._dsa_public_key_g = None
        self._public_key_length = None
        self._not_before = None
        self._subject = None
        self.discriminator = None

        if rsa_public_key_modulus is not None:
            self.rsa_public_key_modulus = rsa_public_key_modulus
        if dsa_public_key_y is not None:
            self.dsa_public_key_y = dsa_public_key_y
        if is_ca is not None:
            self.is_ca = is_ca
        if issuer is not None:
            self.issuer = issuer
        if not_after is not None:
            self.not_after = not_after
        if signature is not None:
            self.signature = signature
        if dsa_public_key_q is not None:
            self.dsa_public_key_q = dsa_public_key_q
        if dsa_public_key_p is not None:
            self.dsa_public_key_p = dsa_public_key_p
        if rsa_public_key_exponent is not None:
            self.rsa_public_key_exponent = rsa_public_key_exponent
        if public_key_algo is not None:
            self.public_key_algo = public_key_algo
        if is_valid is not None:
            self.is_valid = is_valid
        if issuer_cn is not None:
            self.issuer_cn = issuer_cn
        if version is not None:
            self.version = version
        if subject_cn is not None:
            self.subject_cn = subject_cn
        if signature_algorithm is not None:
            self.signature_algorithm = signature_algorithm
        if serial_number is not None:
            self.serial_number = serial_number
        if dsa_public_key_g is not None:
            self.dsa_public_key_g = dsa_public_key_g
        if public_key_length is not None:
            self.public_key_length = public_key_length
        if not_before is not None:
            self.not_before = not_before
        if subject is not None:
            self.subject = subject

    @property
    def rsa_public_key_modulus(self):
        """Gets the rsa_public_key_modulus of this X509Certificate.  # noqa: E501

        An RSA public key is made up of the modulus and the public exponent. Modulus is wrap around number  # noqa: E501

        :return: The rsa_public_key_modulus of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._rsa_public_key_modulus

    @rsa_public_key_modulus.setter
    def rsa_public_key_modulus(self, rsa_public_key_modulus):
        """Sets the rsa_public_key_modulus of this X509Certificate.

        An RSA public key is made up of the modulus and the public exponent. Modulus is wrap around number  # noqa: E501

        :param rsa_public_key_modulus: The rsa_public_key_modulus of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._rsa_public_key_modulus = rsa_public_key_modulus

    @property
    def dsa_public_key_y(self):
        """Gets the dsa_public_key_y of this X509Certificate.  # noqa: E501

        One of the DSA cryptogaphic algorithm's strength parameters  # noqa: E501

        :return: The dsa_public_key_y of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._dsa_public_key_y

    @dsa_public_key_y.setter
    def dsa_public_key_y(self, dsa_public_key_y):
        """Sets the dsa_public_key_y of this X509Certificate.

        One of the DSA cryptogaphic algorithm's strength parameters  # noqa: E501

        :param dsa_public_key_y: The dsa_public_key_y of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._dsa_public_key_y = dsa_public_key_y

    @property
    def is_ca(self):
        """Gets the is_ca of this X509Certificate.  # noqa: E501

        True if this is a CA certificate  # noqa: E501

        :return: The is_ca of this X509Certificate.  # noqa: E501
        :rtype: bool
        """
        return self._is_ca

    @is_ca.setter
    def is_ca(self, is_ca):
        """Sets the is_ca of this X509Certificate.

        True if this is a CA certificate  # noqa: E501

        :param is_ca: The is_ca of this X509Certificate.  # noqa: E501
        :type: bool
        """

        self._is_ca = is_ca

    @property
    def issuer(self):
        """Gets the issuer of this X509Certificate.  # noqa: E501

        the certificate issuers complete distinguished name  # noqa: E501

        :return: The issuer of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this X509Certificate.

        the certificate issuers complete distinguished name  # noqa: E501

        :param issuer: The issuer of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def not_after(self):
        """Gets the not_after of this X509Certificate.  # noqa: E501

        the time in epoch milliseconds at which the certificate becomes invalid  # noqa: E501

        :return: The not_after of this X509Certificate.  # noqa: E501
        :rtype: int
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this X509Certificate.

        the time in epoch milliseconds at which the certificate becomes invalid  # noqa: E501

        :param not_after: The not_after of this X509Certificate.  # noqa: E501
        :type: int
        """

        self._not_after = not_after

    @property
    def signature(self):
        """Gets the signature of this X509Certificate.  # noqa: E501

        the signature value(the raw signature bits) used for signing and validate the cert  # noqa: E501

        :return: The signature of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this X509Certificate.

        the signature value(the raw signature bits) used for signing and validate the cert  # noqa: E501

        :param signature: The signature of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def dsa_public_key_q(self):
        """Gets the dsa_public_key_q of this X509Certificate.  # noqa: E501

        One of the DSA cryptogaphic algorithm's strength parameters, sub-prime  # noqa: E501

        :return: The dsa_public_key_q of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._dsa_public_key_q

    @dsa_public_key_q.setter
    def dsa_public_key_q(self, dsa_public_key_q):
        """Sets the dsa_public_key_q of this X509Certificate.

        One of the DSA cryptogaphic algorithm's strength parameters, sub-prime  # noqa: E501

        :param dsa_public_key_q: The dsa_public_key_q of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._dsa_public_key_q = dsa_public_key_q

    @property
    def dsa_public_key_p(self):
        """Gets the dsa_public_key_p of this X509Certificate.  # noqa: E501

        One of the DSA cryptogaphic algorithm's strength parameters, prime  # noqa: E501

        :return: The dsa_public_key_p of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._dsa_public_key_p

    @dsa_public_key_p.setter
    def dsa_public_key_p(self, dsa_public_key_p):
        """Sets the dsa_public_key_p of this X509Certificate.

        One of the DSA cryptogaphic algorithm's strength parameters, prime  # noqa: E501

        :param dsa_public_key_p: The dsa_public_key_p of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._dsa_public_key_p = dsa_public_key_p

    @property
    def rsa_public_key_exponent(self):
        """Gets the rsa_public_key_exponent of this X509Certificate.  # noqa: E501

        An RSA public key is made up of the modulus and the public exponent. Exponent is a power number  # noqa: E501

        :return: The rsa_public_key_exponent of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._rsa_public_key_exponent

    @rsa_public_key_exponent.setter
    def rsa_public_key_exponent(self, rsa_public_key_exponent):
        """Sets the rsa_public_key_exponent of this X509Certificate.

        An RSA public key is made up of the modulus and the public exponent. Exponent is a power number  # noqa: E501

        :param rsa_public_key_exponent: The rsa_public_key_exponent of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._rsa_public_key_exponent = rsa_public_key_exponent

    @property
    def public_key_algo(self):
        """Gets the public_key_algo of this X509Certificate.  # noqa: E501

        Cryptographic algorithm used by the public key for data encryption  # noqa: E501

        :return: The public_key_algo of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._public_key_algo

    @public_key_algo.setter
    def public_key_algo(self, public_key_algo):
        """Sets the public_key_algo of this X509Certificate.

        Cryptographic algorithm used by the public key for data encryption  # noqa: E501

        :param public_key_algo: The public_key_algo of this X509Certificate.  # noqa: E501
        :type: str
        """
        allowed_values = ["RSA", "DSA"]  # noqa: E501
        if public_key_algo not in allowed_values:
            raise ValueError(
                "Invalid value for `public_key_algo` ({0}), must be one of {1}"  # noqa: E501
                .format(public_key_algo, allowed_values)
            )

        self._public_key_algo = public_key_algo

    @property
    def is_valid(self):
        """Gets the is_valid of this X509Certificate.  # noqa: E501

        True if this certificate is valid  # noqa: E501

        :return: The is_valid of this X509Certificate.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this X509Certificate.

        True if this certificate is valid  # noqa: E501

        :param is_valid: The is_valid of this X509Certificate.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def issuer_cn(self):
        """Gets the issuer_cn of this X509Certificate.  # noqa: E501

        the certificate issuer's common name  # noqa: E501

        :return: The issuer_cn of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._issuer_cn

    @issuer_cn.setter
    def issuer_cn(self, issuer_cn):
        """Sets the issuer_cn of this X509Certificate.

        the certificate issuer's common name  # noqa: E501

        :param issuer_cn: The issuer_cn of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._issuer_cn = issuer_cn

    @property
    def version(self):
        """Gets the version of this X509Certificate.  # noqa: E501

        Certificate version (default v1)  # noqa: E501

        :return: The version of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this X509Certificate.

        Certificate version (default v1)  # noqa: E501

        :param version: The version of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def subject_cn(self):
        """Gets the subject_cn of this X509Certificate.  # noqa: E501

        the certificate owner's common name  # noqa: E501

        :return: The subject_cn of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._subject_cn

    @subject_cn.setter
    def subject_cn(self, subject_cn):
        """Sets the subject_cn of this X509Certificate.

        the certificate owner's common name  # noqa: E501

        :param subject_cn: The subject_cn of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._subject_cn = subject_cn

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this X509Certificate.  # noqa: E501

        the algorithm used by the Certificate Authority to sign the certificate  # noqa: E501

        :return: The signature_algorithm of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this X509Certificate.

        the algorithm used by the Certificate Authority to sign the certificate  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._signature_algorithm = signature_algorithm

    @property
    def serial_number(self):
        """Gets the serial_number of this X509Certificate.  # noqa: E501

        certificate's serial number  # noqa: E501

        :return: The serial_number of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this X509Certificate.

        certificate's serial number  # noqa: E501

        :param serial_number: The serial_number of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def dsa_public_key_g(self):
        """Gets the dsa_public_key_g of this X509Certificate.  # noqa: E501

        One of the DSA cryptogaphic algorithm's strength parameters, base  # noqa: E501

        :return: The dsa_public_key_g of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._dsa_public_key_g

    @dsa_public_key_g.setter
    def dsa_public_key_g(self, dsa_public_key_g):
        """Sets the dsa_public_key_g of this X509Certificate.

        One of the DSA cryptogaphic algorithm's strength parameters, base  # noqa: E501

        :param dsa_public_key_g: The dsa_public_key_g of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._dsa_public_key_g = dsa_public_key_g

    @property
    def public_key_length(self):
        """Gets the public_key_length of this X509Certificate.  # noqa: E501

        size measured in bits of the public/private keys used in a cryptographic algorithm  # noqa: E501

        :return: The public_key_length of this X509Certificate.  # noqa: E501
        :rtype: int
        """
        return self._public_key_length

    @public_key_length.setter
    def public_key_length(self, public_key_length):
        """Sets the public_key_length of this X509Certificate.

        size measured in bits of the public/private keys used in a cryptographic algorithm  # noqa: E501

        :param public_key_length: The public_key_length of this X509Certificate.  # noqa: E501
        :type: int
        """

        self._public_key_length = public_key_length

    @property
    def not_before(self):
        """Gets the not_before of this X509Certificate.  # noqa: E501

        the time in epoch milliseconds at which the certificate becomes valid  # noqa: E501

        :return: The not_before of this X509Certificate.  # noqa: E501
        :rtype: int
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this X509Certificate.

        the time in epoch milliseconds at which the certificate becomes valid  # noqa: E501

        :param not_before: The not_before of this X509Certificate.  # noqa: E501
        :type: int
        """

        self._not_before = not_before

    @property
    def subject(self):
        """Gets the subject of this X509Certificate.  # noqa: E501

        the certificate owners complete distinguished name  # noqa: E501

        :return: The subject of this X509Certificate.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this X509Certificate.

        the certificate owners complete distinguished name  # noqa: E501

        :param subject: The subject of this X509Certificate.  # noqa: E501
        :type: str
        """

        self._subject = subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, X509Certificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
