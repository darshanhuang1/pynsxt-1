# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.lb_rule_condition import LbRuleCondition  # noqa: F401,E501


class LbHttpRequestUriCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'match_type': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'match_type': 'match_type',
        'uri': 'uri'
    }

    def __init__(self, match_type='REGEX', uri=None):  # noqa: E501
        """LbHttpRequestUriCondition - a model defined in Swagger"""  # noqa: E501

        self._match_type = None
        self._uri = None
        self.discriminator = None

        if match_type is not None:
            self.match_type = match_type
        self.uri = uri

    @property
    def match_type(self):
        """Gets the match_type of this LbHttpRequestUriCondition.  # noqa: E501

        Match type of URI  # noqa: E501

        :return: The match_type of this LbHttpRequestUriCondition.  # noqa: E501
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this LbHttpRequestUriCondition.

        Match type of URI  # noqa: E501

        :param match_type: The match_type of this LbHttpRequestUriCondition.  # noqa: E501
        :type: str
        """
        allowed_values = ["STARTS_WITH", "ENDS_WITH", "EQUALS", "CONTAINS", "REGEX"]  # noqa: E501
        if match_type not in allowed_values:
            raise ValueError(
                "Invalid value for `match_type` ({0}), must be one of {1}"  # noqa: E501
                .format(match_type, allowed_values)
            )

        self._match_type = match_type

    @property
    def uri(self):
        """Gets the uri of this LbHttpRequestUriCondition.  # noqa: E501

        A string used to identify resource  # noqa: E501

        :return: The uri of this LbHttpRequestUriCondition.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this LbHttpRequestUriCondition.

        A string used to identify resource  # noqa: E501

        :param uri: The uri of this LbHttpRequestUriCondition.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbHttpRequestUriCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
