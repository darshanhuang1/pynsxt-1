# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.deployment_config import DeploymentConfig  # noqa: F401,E501
from swagger_client.models.ip_subnet import IPSubnet  # noqa: F401,E501


class VsphereDeploymentConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_network_ids': 'list[str]',
        'host_id': 'str',
        'management_network_id': 'str',
        'vc_id': 'str',
        'storage_id': 'str',
        'default_gateway_addresses': 'list[str]',
        'management_port_subnets': 'list[IPSubnet]',
        'hostname': 'str',
        'compute_id': 'str'
    }

    attribute_map = {
        'data_network_ids': 'data_network_ids',
        'host_id': 'host_id',
        'management_network_id': 'management_network_id',
        'vc_id': 'vc_id',
        'storage_id': 'storage_id',
        'default_gateway_addresses': 'default_gateway_addresses',
        'management_port_subnets': 'management_port_subnets',
        'hostname': 'hostname',
        'compute_id': 'compute_id'
    }

    def __init__(self, data_network_ids=None, host_id=None, management_network_id=None, vc_id=None, storage_id=None, default_gateway_addresses=None, management_port_subnets=None, hostname=None, compute_id=None):  # noqa: E501
        """VsphereDeploymentConfig - a model defined in Swagger"""  # noqa: E501

        self._data_network_ids = None
        self._host_id = None
        self._management_network_id = None
        self._vc_id = None
        self._storage_id = None
        self._default_gateway_addresses = None
        self._management_port_subnets = None
        self._hostname = None
        self._compute_id = None
        self.discriminator = None

        self.data_network_ids = data_network_ids
        if host_id is not None:
            self.host_id = host_id
        self.management_network_id = management_network_id
        self.vc_id = vc_id
        self.storage_id = storage_id
        if default_gateway_addresses is not None:
            self.default_gateway_addresses = default_gateway_addresses
        if management_port_subnets is not None:
            self.management_port_subnets = management_port_subnets
        self.hostname = hostname
        self.compute_id = compute_id

    @property
    def data_network_ids(self):
        """Gets the data_network_ids of this VsphereDeploymentConfig.  # noqa: E501

        List of distributed portgroup identifiers to which the datapath serving vnics of edge node vm will be connected.   # noqa: E501

        :return: The data_network_ids of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_network_ids

    @data_network_ids.setter
    def data_network_ids(self, data_network_ids):
        """Sets the data_network_ids of this VsphereDeploymentConfig.

        List of distributed portgroup identifiers to which the datapath serving vnics of edge node vm will be connected.   # noqa: E501

        :param data_network_ids: The data_network_ids of this VsphereDeploymentConfig.  # noqa: E501
        :type: list[str]
        """
        if data_network_ids is None:
            raise ValueError("Invalid value for `data_network_ids`, must not be `None`")  # noqa: E501

        self._data_network_ids = data_network_ids

    @property
    def host_id(self):
        """Gets the host_id of this VsphereDeploymentConfig.  # noqa: E501

        The edge node vm will be deployed on the specified Host within the cluster if host_id is specified. Note - User must ensure that storage and specified networks are accessible by this host.   # noqa: E501

        :return: The host_id of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this VsphereDeploymentConfig.

        The edge node vm will be deployed on the specified Host within the cluster if host_id is specified. Note - User must ensure that storage and specified networks are accessible by this host.   # noqa: E501

        :param host_id: The host_id of this VsphereDeploymentConfig.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def management_network_id(self):
        """Gets the management_network_id of this VsphereDeploymentConfig.  # noqa: E501

        Distributed portgroup identifier to which the management vnic of edge node vm will be connected. This portgroup must have connectivity with MP and CCP.   # noqa: E501

        :return: The management_network_id of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._management_network_id

    @management_network_id.setter
    def management_network_id(self, management_network_id):
        """Sets the management_network_id of this VsphereDeploymentConfig.

        Distributed portgroup identifier to which the management vnic of edge node vm will be connected. This portgroup must have connectivity with MP and CCP.   # noqa: E501

        :param management_network_id: The management_network_id of this VsphereDeploymentConfig.  # noqa: E501
        :type: str
        """
        if management_network_id is None:
            raise ValueError("Invalid value for `management_network_id`, must not be `None`")  # noqa: E501

        self._management_network_id = management_network_id

    @property
    def vc_id(self):
        """Gets the vc_id of this VsphereDeploymentConfig.  # noqa: E501

        The vc specific identifiers will be resolved on this VC. So all other identifiers specified here must belong to this vcenter server.   # noqa: E501

        :return: The vc_id of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._vc_id

    @vc_id.setter
    def vc_id(self, vc_id):
        """Sets the vc_id of this VsphereDeploymentConfig.

        The vc specific identifiers will be resolved on this VC. So all other identifiers specified here must belong to this vcenter server.   # noqa: E501

        :param vc_id: The vc_id of this VsphereDeploymentConfig.  # noqa: E501
        :type: str
        """
        if vc_id is None:
            raise ValueError("Invalid value for `vc_id`, must not be `None`")  # noqa: E501

        self._vc_id = vc_id

    @property
    def storage_id(self):
        """Gets the storage_id of this VsphereDeploymentConfig.  # noqa: E501

        The edge node vm will be deployed on the specified datastore. User must ensure that storage is accessible by the specified cluster/host.   # noqa: E501

        :return: The storage_id of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._storage_id

    @storage_id.setter
    def storage_id(self, storage_id):
        """Sets the storage_id of this VsphereDeploymentConfig.

        The edge node vm will be deployed on the specified datastore. User must ensure that storage is accessible by the specified cluster/host.   # noqa: E501

        :param storage_id: The storage_id of this VsphereDeploymentConfig.  # noqa: E501
        :type: str
        """
        if storage_id is None:
            raise ValueError("Invalid value for `storage_id`, must not be `None`")  # noqa: E501

        self._storage_id = storage_id

    @property
    def default_gateway_addresses(self):
        """Gets the default_gateway_addresses of this VsphereDeploymentConfig.  # noqa: E501

        The default gateway for edge node must be specified if all the nodes it communicates with are not in the same subnet. Note: only single IPv4 default gateway address is supported and it must belong to management network. Do not specify this field and management_port_subnets to use DHCP.   # noqa: E501

        :return: The default_gateway_addresses of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._default_gateway_addresses

    @default_gateway_addresses.setter
    def default_gateway_addresses(self, default_gateway_addresses):
        """Sets the default_gateway_addresses of this VsphereDeploymentConfig.

        The default gateway for edge node must be specified if all the nodes it communicates with are not in the same subnet. Note: only single IPv4 default gateway address is supported and it must belong to management network. Do not specify this field and management_port_subnets to use DHCP.   # noqa: E501

        :param default_gateway_addresses: The default_gateway_addresses of this VsphereDeploymentConfig.  # noqa: E501
        :type: list[str]
        """

        self._default_gateway_addresses = default_gateway_addresses

    @property
    def management_port_subnets(self):
        """Gets the management_port_subnets of this VsphereDeploymentConfig.  # noqa: E501

        IP Address and subnet configuration for the management port. Note: only one IPv4 address is supported for the management port. Do not specify this field and default_gateway_addresses to use DHCP.   # noqa: E501

        :return: The management_port_subnets of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: list[IPSubnet]
        """
        return self._management_port_subnets

    @management_port_subnets.setter
    def management_port_subnets(self, management_port_subnets):
        """Sets the management_port_subnets of this VsphereDeploymentConfig.

        IP Address and subnet configuration for the management port. Note: only one IPv4 address is supported for the management port. Do not specify this field and default_gateway_addresses to use DHCP.   # noqa: E501

        :param management_port_subnets: The management_port_subnets of this VsphereDeploymentConfig.  # noqa: E501
        :type: list[IPSubnet]
        """

        self._management_port_subnets = management_port_subnets

    @property
    def hostname(self):
        """Gets the hostname of this VsphereDeploymentConfig.  # noqa: E501

        Host name or FQDN for edge node.  # noqa: E501

        :return: The hostname of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this VsphereDeploymentConfig.

        Host name or FQDN for edge node.  # noqa: E501

        :param hostname: The hostname of this VsphereDeploymentConfig.  # noqa: E501
        :type: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def compute_id(self):
        """Gets the compute_id of this VsphereDeploymentConfig.  # noqa: E501

        The edge node vm will be deployed on the specified cluster or resourcepool. Note - all the hosts must have nsx fabric prepared in the specified cluster.   # noqa: E501

        :return: The compute_id of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._compute_id

    @compute_id.setter
    def compute_id(self, compute_id):
        """Sets the compute_id of this VsphereDeploymentConfig.

        The edge node vm will be deployed on the specified cluster or resourcepool. Note - all the hosts must have nsx fabric prepared in the specified cluster.   # noqa: E501

        :param compute_id: The compute_id of this VsphereDeploymentConfig.  # noqa: E501
        :type: str
        """
        if compute_id is None:
            raise ValueError("Invalid value for `compute_id`, must not be `None`")  # noqa: E501

        self._compute_id = compute_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VsphereDeploymentConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
