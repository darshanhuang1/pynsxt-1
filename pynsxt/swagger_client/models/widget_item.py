# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.label import Label  # noqa: F401,E501


class WidgetItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'widget_id': 'str',
        'label': 'Label'
    }

    attribute_map = {
        'widget_id': 'widget_id',
        'label': 'label'
    }

    def __init__(self, widget_id=None, label=None):  # noqa: E501
        """WidgetItem - a model defined in Swagger"""  # noqa: E501

        self._widget_id = None
        self._label = None
        self.discriminator = None

        self.widget_id = widget_id
        if label is not None:
            self.label = label

    @property
    def widget_id(self):
        """Gets the widget_id of this WidgetItem.  # noqa: E501

        Id of the widget configuration that is held by a multi-widget or a container.  # noqa: E501

        :return: The widget_id of this WidgetItem.  # noqa: E501
        :rtype: str
        """
        return self._widget_id

    @widget_id.setter
    def widget_id(self, widget_id):
        """Sets the widget_id of this WidgetItem.

        Id of the widget configuration that is held by a multi-widget or a container.  # noqa: E501

        :param widget_id: The widget_id of this WidgetItem.  # noqa: E501
        :type: str
        """
        if widget_id is None:
            raise ValueError("Invalid value for `widget_id`, must not be `None`")  # noqa: E501

        self._widget_id = widget_id

    @property
    def label(self):
        """Gets the label of this WidgetItem.  # noqa: E501

        Applicable for 'DonutConfiguration' reports only. If label is not specified, then it defaults to the label of the donut report.  # noqa: E501

        :return: The label of this WidgetItem.  # noqa: E501
        :rtype: Label
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this WidgetItem.

        Applicable for 'DonutConfiguration' reports only. If label is not specified, then it defaults to the label of the donut report.  # noqa: E501

        :param label: The label of this WidgetItem.  # noqa: E501
        :type: Label
        """

        self._label = label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WidgetItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
