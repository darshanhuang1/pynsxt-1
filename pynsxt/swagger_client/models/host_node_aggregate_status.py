# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HostNodeAggregateStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_nodes_uninstall_successful': 'int',
        'num_nodes_install_failed': 'int',
        'num_nodes_install_in_progress': 'int',
        'num_nodes_total': 'int',
        'num_nodes_pending_upgrade': 'int',
        'num_nodes_not_available': 'int',
        'num_nodes_uninstall_failed': 'int',
        'num_nodes_install_successful': 'int',
        'num_nodes_uninstall_in_progress': 'int',
        'num_nodes_upgrade_in_progress': 'int',
        'last_sync_time': 'int',
        'aggregate_type': 'str',
        'num_nodes_not_prepared': 'int',
        'deployment_status': 'str'
    }

    attribute_map = {
        'num_nodes_uninstall_successful': 'num_nodes_uninstall_successful',
        'num_nodes_install_failed': 'num_nodes_install_failed',
        'num_nodes_install_in_progress': 'num_nodes_install_in_progress',
        'num_nodes_total': 'num_nodes_total',
        'num_nodes_pending_upgrade': 'num_nodes_pending_upgrade',
        'num_nodes_not_available': 'num_nodes_not_available',
        'num_nodes_uninstall_failed': 'num_nodes_uninstall_failed',
        'num_nodes_install_successful': 'num_nodes_install_successful',
        'num_nodes_uninstall_in_progress': 'num_nodes_uninstall_in_progress',
        'num_nodes_upgrade_in_progress': 'num_nodes_upgrade_in_progress',
        'last_sync_time': 'last_sync_time',
        'aggregate_type': 'aggregate_type',
        'num_nodes_not_prepared': 'num_nodes_not_prepared',
        'deployment_status': 'deployment_status'
    }

    def __init__(self, num_nodes_uninstall_successful=None, num_nodes_install_failed=None, num_nodes_install_in_progress=None, num_nodes_total=None, num_nodes_pending_upgrade=None, num_nodes_not_available=None, num_nodes_uninstall_failed=None, num_nodes_install_successful=None, num_nodes_uninstall_in_progress=None, num_nodes_upgrade_in_progress=None, last_sync_time=None, aggregate_type=None, num_nodes_not_prepared=None, deployment_status=None):  # noqa: E501
        """HostNodeAggregateStatus - a model defined in Swagger"""  # noqa: E501

        self._num_nodes_uninstall_successful = None
        self._num_nodes_install_failed = None
        self._num_nodes_install_in_progress = None
        self._num_nodes_total = None
        self._num_nodes_pending_upgrade = None
        self._num_nodes_not_available = None
        self._num_nodes_uninstall_failed = None
        self._num_nodes_install_successful = None
        self._num_nodes_uninstall_in_progress = None
        self._num_nodes_upgrade_in_progress = None
        self._last_sync_time = None
        self._aggregate_type = None
        self._num_nodes_not_prepared = None
        self._deployment_status = None
        self.discriminator = None

        if num_nodes_uninstall_successful is not None:
            self.num_nodes_uninstall_successful = num_nodes_uninstall_successful
        if num_nodes_install_failed is not None:
            self.num_nodes_install_failed = num_nodes_install_failed
        if num_nodes_install_in_progress is not None:
            self.num_nodes_install_in_progress = num_nodes_install_in_progress
        if num_nodes_total is not None:
            self.num_nodes_total = num_nodes_total
        if num_nodes_pending_upgrade is not None:
            self.num_nodes_pending_upgrade = num_nodes_pending_upgrade
        if num_nodes_not_available is not None:
            self.num_nodes_not_available = num_nodes_not_available
        if num_nodes_uninstall_failed is not None:
            self.num_nodes_uninstall_failed = num_nodes_uninstall_failed
        if num_nodes_install_successful is not None:
            self.num_nodes_install_successful = num_nodes_install_successful
        if num_nodes_uninstall_in_progress is not None:
            self.num_nodes_uninstall_in_progress = num_nodes_uninstall_in_progress
        if num_nodes_upgrade_in_progress is not None:
            self.num_nodes_upgrade_in_progress = num_nodes_upgrade_in_progress
        if last_sync_time is not None:
            self.last_sync_time = last_sync_time
        if aggregate_type is not None:
            self.aggregate_type = aggregate_type
        if num_nodes_not_prepared is not None:
            self.num_nodes_not_prepared = num_nodes_not_prepared
        if deployment_status is not None:
            self.deployment_status = deployment_status

    @property
    def num_nodes_uninstall_successful(self):
        """Gets the num_nodes_uninstall_successful of this HostNodeAggregateStatus.  # noqa: E501

        Number of nodes with deployment status uninstall successful  # noqa: E501

        :return: The num_nodes_uninstall_successful of this HostNodeAggregateStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes_uninstall_successful

    @num_nodes_uninstall_successful.setter
    def num_nodes_uninstall_successful(self, num_nodes_uninstall_successful):
        """Sets the num_nodes_uninstall_successful of this HostNodeAggregateStatus.

        Number of nodes with deployment status uninstall successful  # noqa: E501

        :param num_nodes_uninstall_successful: The num_nodes_uninstall_successful of this HostNodeAggregateStatus.  # noqa: E501
        :type: int
        """

        self._num_nodes_uninstall_successful = num_nodes_uninstall_successful

    @property
    def num_nodes_install_failed(self):
        """Gets the num_nodes_install_failed of this HostNodeAggregateStatus.  # noqa: E501

        Number of nodes with deployment status install failed  # noqa: E501

        :return: The num_nodes_install_failed of this HostNodeAggregateStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes_install_failed

    @num_nodes_install_failed.setter
    def num_nodes_install_failed(self, num_nodes_install_failed):
        """Sets the num_nodes_install_failed of this HostNodeAggregateStatus.

        Number of nodes with deployment status install failed  # noqa: E501

        :param num_nodes_install_failed: The num_nodes_install_failed of this HostNodeAggregateStatus.  # noqa: E501
        :type: int
        """

        self._num_nodes_install_failed = num_nodes_install_failed

    @property
    def num_nodes_install_in_progress(self):
        """Gets the num_nodes_install_in_progress of this HostNodeAggregateStatus.  # noqa: E501

        Number of nodes with deployment status install in progress  # noqa: E501

        :return: The num_nodes_install_in_progress of this HostNodeAggregateStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes_install_in_progress

    @num_nodes_install_in_progress.setter
    def num_nodes_install_in_progress(self, num_nodes_install_in_progress):
        """Sets the num_nodes_install_in_progress of this HostNodeAggregateStatus.

        Number of nodes with deployment status install in progress  # noqa: E501

        :param num_nodes_install_in_progress: The num_nodes_install_in_progress of this HostNodeAggregateStatus.  # noqa: E501
        :type: int
        """

        self._num_nodes_install_in_progress = num_nodes_install_in_progress

    @property
    def num_nodes_total(self):
        """Gets the num_nodes_total of this HostNodeAggregateStatus.  # noqa: E501

        Total number of nodes irrespective of the deployment status  # noqa: E501

        :return: The num_nodes_total of this HostNodeAggregateStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes_total

    @num_nodes_total.setter
    def num_nodes_total(self, num_nodes_total):
        """Sets the num_nodes_total of this HostNodeAggregateStatus.

        Total number of nodes irrespective of the deployment status  # noqa: E501

        :param num_nodes_total: The num_nodes_total of this HostNodeAggregateStatus.  # noqa: E501
        :type: int
        """

        self._num_nodes_total = num_nodes_total

    @property
    def num_nodes_pending_upgrade(self):
        """Gets the num_nodes_pending_upgrade of this HostNodeAggregateStatus.  # noqa: E501

        Number of nodes with deployment status pending upgrade  # noqa: E501

        :return: The num_nodes_pending_upgrade of this HostNodeAggregateStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes_pending_upgrade

    @num_nodes_pending_upgrade.setter
    def num_nodes_pending_upgrade(self, num_nodes_pending_upgrade):
        """Sets the num_nodes_pending_upgrade of this HostNodeAggregateStatus.

        Number of nodes with deployment status pending upgrade  # noqa: E501

        :param num_nodes_pending_upgrade: The num_nodes_pending_upgrade of this HostNodeAggregateStatus.  # noqa: E501
        :type: int
        """

        self._num_nodes_pending_upgrade = num_nodes_pending_upgrade

    @property
    def num_nodes_not_available(self):
        """Gets the num_nodes_not_available of this HostNodeAggregateStatus.  # noqa: E501

        Number of nodes with deployment status not available  # noqa: E501

        :return: The num_nodes_not_available of this HostNodeAggregateStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes_not_available

    @num_nodes_not_available.setter
    def num_nodes_not_available(self, num_nodes_not_available):
        """Sets the num_nodes_not_available of this HostNodeAggregateStatus.

        Number of nodes with deployment status not available  # noqa: E501

        :param num_nodes_not_available: The num_nodes_not_available of this HostNodeAggregateStatus.  # noqa: E501
        :type: int
        """

        self._num_nodes_not_available = num_nodes_not_available

    @property
    def num_nodes_uninstall_failed(self):
        """Gets the num_nodes_uninstall_failed of this HostNodeAggregateStatus.  # noqa: E501

        Number of nodes with deployment status uninstall failed  # noqa: E501

        :return: The num_nodes_uninstall_failed of this HostNodeAggregateStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes_uninstall_failed

    @num_nodes_uninstall_failed.setter
    def num_nodes_uninstall_failed(self, num_nodes_uninstall_failed):
        """Sets the num_nodes_uninstall_failed of this HostNodeAggregateStatus.

        Number of nodes with deployment status uninstall failed  # noqa: E501

        :param num_nodes_uninstall_failed: The num_nodes_uninstall_failed of this HostNodeAggregateStatus.  # noqa: E501
        :type: int
        """

        self._num_nodes_uninstall_failed = num_nodes_uninstall_failed

    @property
    def num_nodes_install_successful(self):
        """Gets the num_nodes_install_successful of this HostNodeAggregateStatus.  # noqa: E501

        Number of nodes with deployment status install successful  # noqa: E501

        :return: The num_nodes_install_successful of this HostNodeAggregateStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes_install_successful

    @num_nodes_install_successful.setter
    def num_nodes_install_successful(self, num_nodes_install_successful):
        """Sets the num_nodes_install_successful of this HostNodeAggregateStatus.

        Number of nodes with deployment status install successful  # noqa: E501

        :param num_nodes_install_successful: The num_nodes_install_successful of this HostNodeAggregateStatus.  # noqa: E501
        :type: int
        """

        self._num_nodes_install_successful = num_nodes_install_successful

    @property
    def num_nodes_uninstall_in_progress(self):
        """Gets the num_nodes_uninstall_in_progress of this HostNodeAggregateStatus.  # noqa: E501

        Number of nodes with deployment status uninstall in progress  # noqa: E501

        :return: The num_nodes_uninstall_in_progress of this HostNodeAggregateStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes_uninstall_in_progress

    @num_nodes_uninstall_in_progress.setter
    def num_nodes_uninstall_in_progress(self, num_nodes_uninstall_in_progress):
        """Sets the num_nodes_uninstall_in_progress of this HostNodeAggregateStatus.

        Number of nodes with deployment status uninstall in progress  # noqa: E501

        :param num_nodes_uninstall_in_progress: The num_nodes_uninstall_in_progress of this HostNodeAggregateStatus.  # noqa: E501
        :type: int
        """

        self._num_nodes_uninstall_in_progress = num_nodes_uninstall_in_progress

    @property
    def num_nodes_upgrade_in_progress(self):
        """Gets the num_nodes_upgrade_in_progress of this HostNodeAggregateStatus.  # noqa: E501

        Number of nodes with deployment status upgrade in progress  # noqa: E501

        :return: The num_nodes_upgrade_in_progress of this HostNodeAggregateStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes_upgrade_in_progress

    @num_nodes_upgrade_in_progress.setter
    def num_nodes_upgrade_in_progress(self, num_nodes_upgrade_in_progress):
        """Sets the num_nodes_upgrade_in_progress of this HostNodeAggregateStatus.

        Number of nodes with deployment status upgrade in progress  # noqa: E501

        :param num_nodes_upgrade_in_progress: The num_nodes_upgrade_in_progress of this HostNodeAggregateStatus.  # noqa: E501
        :type: int
        """

        self._num_nodes_upgrade_in_progress = num_nodes_upgrade_in_progress

    @property
    def last_sync_time(self):
        """Gets the last_sync_time of this HostNodeAggregateStatus.  # noqa: E501

        Timestamp of the last successful update of Inventory, in epoch milliseconds  # noqa: E501

        :return: The last_sync_time of this HostNodeAggregateStatus.  # noqa: E501
        :rtype: int
        """
        return self._last_sync_time

    @last_sync_time.setter
    def last_sync_time(self, last_sync_time):
        """Sets the last_sync_time of this HostNodeAggregateStatus.

        Timestamp of the last successful update of Inventory, in epoch milliseconds  # noqa: E501

        :param last_sync_time: The last_sync_time of this HostNodeAggregateStatus.  # noqa: E501
        :type: int
        """

        self._last_sync_time = last_sync_time

    @property
    def aggregate_type(self):
        """Gets the aggregate_type of this HostNodeAggregateStatus.  # noqa: E501

        Type of object for which status aggregated  # noqa: E501

        :return: The aggregate_type of this HostNodeAggregateStatus.  # noqa: E501
        :rtype: str
        """
        return self._aggregate_type

    @aggregate_type.setter
    def aggregate_type(self, aggregate_type):
        """Sets the aggregate_type of this HostNodeAggregateStatus.

        Type of object for which status aggregated  # noqa: E501

        :param aggregate_type: The aggregate_type of this HostNodeAggregateStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["GROUPED_HOSTS", "STANDALONE_HOSTS", "UNMANGED_HOSTS"]  # noqa: E501
        if aggregate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregate_type` ({0}), must be one of {1}"  # noqa: E501
                .format(aggregate_type, allowed_values)
            )

        self._aggregate_type = aggregate_type

    @property
    def num_nodes_not_prepared(self):
        """Gets the num_nodes_not_prepared of this HostNodeAggregateStatus.  # noqa: E501

        Number of nodes with deployment status not prepared  # noqa: E501

        :return: The num_nodes_not_prepared of this HostNodeAggregateStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes_not_prepared

    @num_nodes_not_prepared.setter
    def num_nodes_not_prepared(self, num_nodes_not_prepared):
        """Sets the num_nodes_not_prepared of this HostNodeAggregateStatus.

        Number of nodes with deployment status not prepared  # noqa: E501

        :param num_nodes_not_prepared: The num_nodes_not_prepared of this HostNodeAggregateStatus.  # noqa: E501
        :type: int
        """

        self._num_nodes_not_prepared = num_nodes_not_prepared

    @property
    def deployment_status(self):
        """Gets the deployment_status of this HostNodeAggregateStatus.  # noqa: E501

        Indicates the deployment status of nsx bits on a grouped hosts or standalone hosts or unmanaged hosts   # noqa: E501

        :return: The deployment_status of this HostNodeAggregateStatus.  # noqa: E501
        :rtype: str
        """
        return self._deployment_status

    @deployment_status.setter
    def deployment_status(self, deployment_status):
        """Sets the deployment_status of this HostNodeAggregateStatus.

        Indicates the deployment status of nsx bits on a grouped hosts or standalone hosts or unmanaged hosts   # noqa: E501

        :param deployment_status: The deployment_status of this HostNodeAggregateStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESSFUL", "ERROR", "UNKNOWN"]  # noqa: E501
        if deployment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_status, allowed_values)
            )

        self._deployment_status = deployment_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostNodeAggregateStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
