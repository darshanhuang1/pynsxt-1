# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.base_switching_profile import BaseSwitchingProfile  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501


class IpDiscoverySwitchingProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arp_snooping_enabled': 'bool',
        'arp_bindings_limit': 'int',
        'vm_tools_enabled': 'bool',
        'dhcp_snooping_enabled': 'bool'
    }

    attribute_map = {
        'arp_snooping_enabled': 'arp_snooping_enabled',
        'arp_bindings_limit': 'arp_bindings_limit',
        'vm_tools_enabled': 'vm_tools_enabled',
        'dhcp_snooping_enabled': 'dhcp_snooping_enabled'
    }

    def __init__(self, arp_snooping_enabled=True, arp_bindings_limit=1, vm_tools_enabled=False, dhcp_snooping_enabled=True):  # noqa: E501
        """IpDiscoverySwitchingProfile - a model defined in Swagger"""  # noqa: E501

        self._arp_snooping_enabled = None
        self._arp_bindings_limit = None
        self._vm_tools_enabled = None
        self._dhcp_snooping_enabled = None
        self.discriminator = None

        if arp_snooping_enabled is not None:
            self.arp_snooping_enabled = arp_snooping_enabled
        if arp_bindings_limit is not None:
            self.arp_bindings_limit = arp_bindings_limit
        if vm_tools_enabled is not None:
            self.vm_tools_enabled = vm_tools_enabled
        if dhcp_snooping_enabled is not None:
            self.dhcp_snooping_enabled = dhcp_snooping_enabled

    @property
    def arp_snooping_enabled(self):
        """Gets the arp_snooping_enabled of this IpDiscoverySwitchingProfile.  # noqa: E501

        Indicates whether ARP snooping is enabled  # noqa: E501

        :return: The arp_snooping_enabled of this IpDiscoverySwitchingProfile.  # noqa: E501
        :rtype: bool
        """
        return self._arp_snooping_enabled

    @arp_snooping_enabled.setter
    def arp_snooping_enabled(self, arp_snooping_enabled):
        """Sets the arp_snooping_enabled of this IpDiscoverySwitchingProfile.

        Indicates whether ARP snooping is enabled  # noqa: E501

        :param arp_snooping_enabled: The arp_snooping_enabled of this IpDiscoverySwitchingProfile.  # noqa: E501
        :type: bool
        """

        self._arp_snooping_enabled = arp_snooping_enabled

    @property
    def arp_bindings_limit(self):
        """Gets the arp_bindings_limit of this IpDiscoverySwitchingProfile.  # noqa: E501

        Indicates the number of arp snooped IP addresses to be remembered per LogicalPort. Decreasing this value, will retain the latest bindings from the existing list of address bindings. Increasing this value will retain existing bindings and also learn any new address bindings discovered on the port until the new limit is reached.  # noqa: E501

        :return: The arp_bindings_limit of this IpDiscoverySwitchingProfile.  # noqa: E501
        :rtype: int
        """
        return self._arp_bindings_limit

    @arp_bindings_limit.setter
    def arp_bindings_limit(self, arp_bindings_limit):
        """Sets the arp_bindings_limit of this IpDiscoverySwitchingProfile.

        Indicates the number of arp snooped IP addresses to be remembered per LogicalPort. Decreasing this value, will retain the latest bindings from the existing list of address bindings. Increasing this value will retain existing bindings and also learn any new address bindings discovered on the port until the new limit is reached.  # noqa: E501

        :param arp_bindings_limit: The arp_bindings_limit of this IpDiscoverySwitchingProfile.  # noqa: E501
        :type: int
        """
        if arp_bindings_limit is not None and arp_bindings_limit > 128:  # noqa: E501
            raise ValueError("Invalid value for `arp_bindings_limit`, must be a value less than or equal to `128`")  # noqa: E501
        if arp_bindings_limit is not None and arp_bindings_limit < 1:  # noqa: E501
            raise ValueError("Invalid value for `arp_bindings_limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._arp_bindings_limit = arp_bindings_limit

    @property
    def vm_tools_enabled(self):
        """Gets the vm_tools_enabled of this IpDiscoverySwitchingProfile.  # noqa: E501

        This option is only supported on ESX where vm-tools is installed.  # noqa: E501

        :return: The vm_tools_enabled of this IpDiscoverySwitchingProfile.  # noqa: E501
        :rtype: bool
        """
        return self._vm_tools_enabled

    @vm_tools_enabled.setter
    def vm_tools_enabled(self, vm_tools_enabled):
        """Sets the vm_tools_enabled of this IpDiscoverySwitchingProfile.

        This option is only supported on ESX where vm-tools is installed.  # noqa: E501

        :param vm_tools_enabled: The vm_tools_enabled of this IpDiscoverySwitchingProfile.  # noqa: E501
        :type: bool
        """

        self._vm_tools_enabled = vm_tools_enabled

    @property
    def dhcp_snooping_enabled(self):
        """Gets the dhcp_snooping_enabled of this IpDiscoverySwitchingProfile.  # noqa: E501

        Indicates whether DHCP snooping is enabled  # noqa: E501

        :return: The dhcp_snooping_enabled of this IpDiscoverySwitchingProfile.  # noqa: E501
        :rtype: bool
        """
        return self._dhcp_snooping_enabled

    @dhcp_snooping_enabled.setter
    def dhcp_snooping_enabled(self, dhcp_snooping_enabled):
        """Sets the dhcp_snooping_enabled of this IpDiscoverySwitchingProfile.

        Indicates whether DHCP snooping is enabled  # noqa: E501

        :param dhcp_snooping_enabled: The dhcp_snooping_enabled of this IpDiscoverySwitchingProfile.  # noqa: E501
        :type: bool
        """

        self._dhcp_snooping_enabled = dhcp_snooping_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpDiscoverySwitchingProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
