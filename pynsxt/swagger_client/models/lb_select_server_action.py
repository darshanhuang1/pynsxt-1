# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.lb_rule_action import LbRuleAction  # noqa: F401,E501


class LbSelectServerAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip': 'str',
        'pool_id': 'str',
        'port': 'str'
    }

    attribute_map = {
        'ip': 'ip',
        'pool_id': 'pool_id',
        'port': 'port'
    }

    def __init__(self, ip=None, pool_id=None, port=None):  # noqa: E501
        """LbSelectServerAction - a model defined in Swagger"""  # noqa: E501

        self._ip = None
        self._pool_id = None
        self._port = None
        self.discriminator = None

        self.ip = ip
        self.pool_id = pool_id
        if port is not None:
            self.port = port

    @property
    def ip(self):
        """Gets the ip of this LbSelectServerAction.  # noqa: E501

        IP address of selected backend server  # noqa: E501

        :return: The ip of this LbSelectServerAction.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this LbSelectServerAction.

        IP address of selected backend server  # noqa: E501

        :param ip: The ip of this LbSelectServerAction.  # noqa: E501
        :type: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def pool_id(self):
        """Gets the pool_id of this LbSelectServerAction.  # noqa: E501

        UUID of load balancer pool  # noqa: E501

        :return: The pool_id of this LbSelectServerAction.  # noqa: E501
        :rtype: str
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this LbSelectServerAction.

        UUID of load balancer pool  # noqa: E501

        :param pool_id: The pool_id of this LbSelectServerAction.  # noqa: E501
        :type: str
        """
        if pool_id is None:
            raise ValueError("Invalid value for `pool_id`, must not be `None`")  # noqa: E501

        self._pool_id = pool_id

    @property
    def port(self):
        """Gets the port of this LbSelectServerAction.  # noqa: E501

        This field is not required when the pool_id and ip fields can uniquely identify a pool member and the port of backend service is same as the port of virtual server. Otherwise, this port field must be specified.   # noqa: E501

        :return: The port of this LbSelectServerAction.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this LbSelectServerAction.

        This field is not required when the pool_id and ip fields can uniquely identify a pool member and the port of backend service is same as the port of virtual server. Otherwise, this port field must be specified.   # noqa: E501

        :param port: The port of this LbSelectServerAction.  # noqa: E501
        :type: str
        """

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbSelectServerAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
