# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RouteMapSequenceSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'as_path_prepend': 'str',
        'community': 'str',
        'weight': 'int',
        'multi_exit_discriminator': 'int'
    }

    attribute_map = {
        'as_path_prepend': 'as_path_prepend',
        'community': 'community',
        'weight': 'weight',
        'multi_exit_discriminator': 'multi_exit_discriminator'
    }

    def __init__(self, as_path_prepend=None, community=None, weight=None, multi_exit_discriminator=None):  # noqa: E501
        """RouteMapSequenceSet - a model defined in Swagger"""  # noqa: E501

        self._as_path_prepend = None
        self._community = None
        self._weight = None
        self._multi_exit_discriminator = None
        self.discriminator = None

        if as_path_prepend is not None:
            self.as_path_prepend = as_path_prepend
        if community is not None:
            self.community = community
        if weight is not None:
            self.weight = weight
        if multi_exit_discriminator is not None:
            self.multi_exit_discriminator = multi_exit_discriminator

    @property
    def as_path_prepend(self):
        """Gets the as_path_prepend of this RouteMapSequenceSet.  # noqa: E501

        As Path Prepending to influence path selection  # noqa: E501

        :return: The as_path_prepend of this RouteMapSequenceSet.  # noqa: E501
        :rtype: str
        """
        return self._as_path_prepend

    @as_path_prepend.setter
    def as_path_prepend(self, as_path_prepend):
        """Sets the as_path_prepend of this RouteMapSequenceSet.

        As Path Prepending to influence path selection  # noqa: E501

        :param as_path_prepend: The as_path_prepend of this RouteMapSequenceSet.  # noqa: E501
        :type: str
        """

        self._as_path_prepend = as_path_prepend

    @property
    def community(self):
        """Gets the community of this RouteMapSequenceSet.  # noqa: E501

        Either well-known community name or community value in aa:nn(2byte:2byte) format  # noqa: E501

        :return: The community of this RouteMapSequenceSet.  # noqa: E501
        :rtype: str
        """
        return self._community

    @community.setter
    def community(self, community):
        """Sets the community of this RouteMapSequenceSet.

        Either well-known community name or community value in aa:nn(2byte:2byte) format  # noqa: E501

        :param community: The community of this RouteMapSequenceSet.  # noqa: E501
        :type: str
        """

        self._community = community

    @property
    def weight(self):
        """Gets the weight of this RouteMapSequenceSet.  # noqa: E501

        Weight used to select certain path  # noqa: E501

        :return: The weight of this RouteMapSequenceSet.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this RouteMapSequenceSet.

        Weight used to select certain path  # noqa: E501

        :param weight: The weight of this RouteMapSequenceSet.  # noqa: E501
        :type: int
        """
        if weight is not None and weight > 65535:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `65535`")  # noqa: E501
        if weight is not None and weight < 0:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `0`")  # noqa: E501

        self._weight = weight

    @property
    def multi_exit_discriminator(self):
        """Gets the multi_exit_discriminator of this RouteMapSequenceSet.  # noqa: E501

        Multi Exit Discriminator (MED)  # noqa: E501

        :return: The multi_exit_discriminator of this RouteMapSequenceSet.  # noqa: E501
        :rtype: int
        """
        return self._multi_exit_discriminator

    @multi_exit_discriminator.setter
    def multi_exit_discriminator(self, multi_exit_discriminator):
        """Sets the multi_exit_discriminator of this RouteMapSequenceSet.

        Multi Exit Discriminator (MED)  # noqa: E501

        :param multi_exit_discriminator: The multi_exit_discriminator of this RouteMapSequenceSet.  # noqa: E501
        :type: int
        """
        if multi_exit_discriminator is not None and multi_exit_discriminator > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `multi_exit_discriminator`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if multi_exit_discriminator is not None and multi_exit_discriminator < 0:  # noqa: E501
            raise ValueError("Invalid value for `multi_exit_discriminator`, must be a value greater than or equal to `0`")  # noqa: E501

        self._multi_exit_discriminator = multi_exit_discriminator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouteMapSequenceSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
