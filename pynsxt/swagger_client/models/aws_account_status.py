# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.resource import Resource  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501


class AwsAccountStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'SelfResourceLink',
        'links': 'list[ResourceLink]',
        'schema': 'str',
        'inventory_sync_step': 'str',
        'inventory_sync_status': 'str',
        'credentials_status': 'str'
    }

    attribute_map = {
        '_self': '_self',
        'links': '_links',
        'schema': '_schema',
        'inventory_sync_step': 'inventory_sync_step',
        'inventory_sync_status': 'inventory_sync_status',
        'credentials_status': 'credentials_status'
    }

    def __init__(self, _self=None, links=None, schema=None, inventory_sync_step=None, inventory_sync_status=None, credentials_status=None):  # noqa: E501
        """AwsAccountStatus - a model defined in Swagger"""  # noqa: E501

        self.__self = None
        self._links = None
        self._schema = None
        self._inventory_sync_step = None
        self._inventory_sync_status = None
        self._credentials_status = None
        self.discriminator = None

        if _self is not None:
            self._self = _self
        if links is not None:
            self.links = links
        if schema is not None:
            self.schema = schema
        if inventory_sync_step is not None:
            self.inventory_sync_step = inventory_sync_step
        if inventory_sync_status is not None:
            self.inventory_sync_status = inventory_sync_status
        if credentials_status is not None:
            self.credentials_status = credentials_status

    @property
    def _self(self):
        """Gets the _self of this AwsAccountStatus.  # noqa: E501


        :return: The _self of this AwsAccountStatus.  # noqa: E501
        :rtype: SelfResourceLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AwsAccountStatus.


        :param _self: The _self of this AwsAccountStatus.  # noqa: E501
        :type: SelfResourceLink
        """

        self.__self = _self

    @property
    def links(self):
        """Gets the links of this AwsAccountStatus.  # noqa: E501

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :return: The links of this AwsAccountStatus.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AwsAccountStatus.

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :param links: The links of this AwsAccountStatus.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    @property
    def schema(self):
        """Gets the schema of this AwsAccountStatus.  # noqa: E501


        :return: The schema of this AwsAccountStatus.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this AwsAccountStatus.


        :param schema: The schema of this AwsAccountStatus.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def inventory_sync_step(self):
        """Gets the inventory_sync_step of this AwsAccountStatus.  # noqa: E501

        State of inventory sync  # noqa: E501

        :return: The inventory_sync_step of this AwsAccountStatus.  # noqa: E501
        :rtype: str
        """
        return self._inventory_sync_step

    @inventory_sync_step.setter
    def inventory_sync_step(self, inventory_sync_step):
        """Sets the inventory_sync_step of this AwsAccountStatus.

        State of inventory sync  # noqa: E501

        :param inventory_sync_step: The inventory_sync_step of this AwsAccountStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["SYNCING_AWS_REGIONS", "SYNCING_AWS_VPCS", "SYNCING_AWS_AZS", "SYNCING_VMS", "SYNCING_NSX_DATA", "SYNCING_AWS_GATEWAYS", "SYNCING_MANAGED_INSTANCES", "NOT_APPLICABLE"]  # noqa: E501
        if inventory_sync_step not in allowed_values:
            raise ValueError(
                "Invalid value for `inventory_sync_step` ({0}), must be one of {1}"  # noqa: E501
                .format(inventory_sync_step, allowed_values)
            )

        self._inventory_sync_step = inventory_sync_step

    @property
    def inventory_sync_status(self):
        """Gets the inventory_sync_status of this AwsAccountStatus.  # noqa: E501

        State of inventory sync  # noqa: E501

        :return: The inventory_sync_status of this AwsAccountStatus.  # noqa: E501
        :rtype: str
        """
        return self._inventory_sync_status

    @inventory_sync_status.setter
    def inventory_sync_status(self, inventory_sync_status):
        """Sets the inventory_sync_status of this AwsAccountStatus.

        State of inventory sync  # noqa: E501

        :param inventory_sync_status: The inventory_sync_status of this AwsAccountStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["SYNCED", "IN_PROGRESS"]  # noqa: E501
        if inventory_sync_status not in allowed_values:
            raise ValueError(
                "Invalid value for `inventory_sync_status` ({0}), must be one of {1}"  # noqa: E501
                .format(inventory_sync_status, allowed_values)
            )

        self._inventory_sync_status = inventory_sync_status

    @property
    def credentials_status(self):
        """Gets the credentials_status of this AwsAccountStatus.  # noqa: E501

        Status of the account credentials synched at the auto interval  # noqa: E501

        :return: The credentials_status of this AwsAccountStatus.  # noqa: E501
        :rtype: str
        """
        return self._credentials_status

    @credentials_status.setter
    def credentials_status(self, credentials_status):
        """Sets the credentials_status of this AwsAccountStatus.

        Status of the account credentials synched at the auto interval  # noqa: E501

        :param credentials_status: The credentials_status of this AwsAccountStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["VALID", "INVALID"]  # noqa: E501
        if credentials_status not in allowed_values:
            raise ValueError(
                "Invalid value for `credentials_status` ({0}), must be one of {1}"  # noqa: E501
                .format(credentials_status, allowed_values)
            )

        self._credentials_status = credentials_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsAccountStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
