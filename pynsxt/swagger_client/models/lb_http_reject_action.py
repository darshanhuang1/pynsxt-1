# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.lb_rule_action import LbRuleAction  # noqa: F401,E501


class LbHttpRejectAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reply_status': 'str',
        'reply_message': 'str'
    }

    attribute_map = {
        'reply_status': 'reply_status',
        'reply_message': 'reply_message'
    }

    def __init__(self, reply_status=None, reply_message=None):  # noqa: E501
        """LbHttpRejectAction - a model defined in Swagger"""  # noqa: E501

        self._reply_status = None
        self._reply_message = None
        self.discriminator = None

        self.reply_status = reply_status
        if reply_message is not None:
            self.reply_message = reply_message

    @property
    def reply_status(self):
        """Gets the reply_status of this LbHttpRejectAction.  # noqa: E501

        HTTP response status code  # noqa: E501

        :return: The reply_status of this LbHttpRejectAction.  # noqa: E501
        :rtype: str
        """
        return self._reply_status

    @reply_status.setter
    def reply_status(self, reply_status):
        """Sets the reply_status of this LbHttpRejectAction.

        HTTP response status code  # noqa: E501

        :param reply_status: The reply_status of this LbHttpRejectAction.  # noqa: E501
        :type: str
        """
        if reply_status is None:
            raise ValueError("Invalid value for `reply_status`, must not be `None`")  # noqa: E501

        self._reply_status = reply_status

    @property
    def reply_message(self):
        """Gets the reply_message of this LbHttpRejectAction.  # noqa: E501

        Response message  # noqa: E501

        :return: The reply_message of this LbHttpRejectAction.  # noqa: E501
        :rtype: str
        """
        return self._reply_message

    @reply_message.setter
    def reply_message(self, reply_message):
        """Sets the reply_message of this LbHttpRejectAction.

        Response message  # noqa: E501

        :param reply_message: The reply_message of this LbHttpRejectAction.  # noqa: E501
        :type: str
        """

        self._reply_message = reply_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbHttpRejectAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
