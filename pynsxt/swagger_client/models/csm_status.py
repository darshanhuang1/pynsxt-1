# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.resource import Resource  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501


class CsmStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'SelfResourceLink',
        'links': 'list[ResourceLink]',
        'schema': 'str',
        'ip_address': 'str',
        'version': 'str',
        'display_name': 'str',
        'id': 'str',
        'managed_by_vmware': 'bool'
    }

    attribute_map = {
        '_self': '_self',
        'links': '_links',
        'schema': '_schema',
        'ip_address': 'ip_address',
        'version': 'version',
        'display_name': 'display_name',
        'id': 'id',
        'managed_by_vmware': 'managed_by_vmware'
    }

    def __init__(self, _self=None, links=None, schema=None, ip_address=None, version=None, display_name=None, id=None, managed_by_vmware=None):  # noqa: E501
        """CsmStatus - a model defined in Swagger"""  # noqa: E501

        self.__self = None
        self._links = None
        self._schema = None
        self._ip_address = None
        self._version = None
        self._display_name = None
        self._id = None
        self._managed_by_vmware = None
        self.discriminator = None

        if _self is not None:
            self._self = _self
        if links is not None:
            self.links = links
        if schema is not None:
            self.schema = schema
        if ip_address is not None:
            self.ip_address = ip_address
        if version is not None:
            self.version = version
        if display_name is not None:
            self.display_name = display_name
        if id is not None:
            self.id = id
        if managed_by_vmware is not None:
            self.managed_by_vmware = managed_by_vmware

    @property
    def _self(self):
        """Gets the _self of this CsmStatus.  # noqa: E501


        :return: The _self of this CsmStatus.  # noqa: E501
        :rtype: SelfResourceLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this CsmStatus.


        :param _self: The _self of this CsmStatus.  # noqa: E501
        :type: SelfResourceLink
        """

        self.__self = _self

    @property
    def links(self):
        """Gets the links of this CsmStatus.  # noqa: E501

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :return: The links of this CsmStatus.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CsmStatus.

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :param links: The links of this CsmStatus.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    @property
    def schema(self):
        """Gets the schema of this CsmStatus.  # noqa: E501


        :return: The schema of this CsmStatus.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this CsmStatus.


        :param schema: The schema of this CsmStatus.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def ip_address(self):
        """Gets the ip_address of this CsmStatus.  # noqa: E501

        IP address of Csm instance  # noqa: E501

        :return: The ip_address of this CsmStatus.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this CsmStatus.

        IP address of Csm instance  # noqa: E501

        :param ip_address: The ip_address of this CsmStatus.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def version(self):
        """Gets the version of this CsmStatus.  # noqa: E501

        Version of Csm  # noqa: E501

        :return: The version of this CsmStatus.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CsmStatus.

        Version of Csm  # noqa: E501

        :param version: The version of this CsmStatus.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def display_name(self):
        """Gets the display_name of this CsmStatus.  # noqa: E501

        Name of the Csm instance  # noqa: E501

        :return: The display_name of this CsmStatus.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CsmStatus.

        Name of the Csm instance  # noqa: E501

        :param display_name: The display_name of this CsmStatus.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this CsmStatus.  # noqa: E501

        Identifier of the Csm appliance  # noqa: E501

        :return: The id of this CsmStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CsmStatus.

        Identifier of the Csm appliance  # noqa: E501

        :param id: The id of this CsmStatus.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def managed_by_vmware(self):
        """Gets the managed_by_vmware of this CsmStatus.  # noqa: E501

        This property is used only if CSM is running in service mode  # noqa: E501

        :return: The managed_by_vmware of this CsmStatus.  # noqa: E501
        :rtype: bool
        """
        return self._managed_by_vmware

    @managed_by_vmware.setter
    def managed_by_vmware(self, managed_by_vmware):
        """Sets the managed_by_vmware of this CsmStatus.

        This property is used only if CSM is running in service mode  # noqa: E501

        :param managed_by_vmware: The managed_by_vmware of this CsmStatus.  # noqa: E501
        :type: bool
        """

        self._managed_by_vmware = managed_by_vmware

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CsmStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
