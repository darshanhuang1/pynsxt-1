# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501


class DneKeyPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'SelfResourceLink',
        'links': 'list[ResourceLink]',
        'schema': 'str',
        'revision': 'int',
        'system_owned': 'bool',
        'display_name': 'str',
        'description': 'str',
        'tags': 'list[Tag]',
        'create_user': 'str',
        'protection': 'str',
        'create_time': 'int',
        'last_modified_time': 'int',
        'last_modified_user': 'str',
        'id': 'str',
        'resource_type': 'str',
        'is_default': 'bool',
        'encrypt_algorithm': 'str',
        'mac_algorithm': 'str',
        'type': 'str',
        'encrypt_type': 'str',
        'rekey_frequency': 'int',
        'notes': 'str',
        'is_sys_default': 'bool'
    }

    attribute_map = {
        '_self': '_self',
        'links': '_links',
        'schema': '_schema',
        'revision': '_revision',
        'system_owned': '_system_owned',
        'display_name': 'display_name',
        'description': 'description',
        'tags': 'tags',
        'create_user': '_create_user',
        'protection': '_protection',
        'create_time': '_create_time',
        'last_modified_time': '_last_modified_time',
        'last_modified_user': '_last_modified_user',
        'id': 'id',
        'resource_type': 'resource_type',
        'is_default': 'is_default',
        'encrypt_algorithm': 'encrypt_algorithm',
        'mac_algorithm': 'mac_algorithm',
        'type': 'type',
        'encrypt_type': 'encrypt_type',
        'rekey_frequency': 'rekey_frequency',
        'notes': 'notes',
        'is_sys_default': 'is_sys_default'
    }

    def __init__(self, _self=None, links=None, schema=None, revision=None, system_owned=None, display_name=None, description=None, tags=None, create_user=None, protection=None, create_time=None, last_modified_time=None, last_modified_user=None, id=None, resource_type=None, is_default=False, encrypt_algorithm=None, mac_algorithm=None, type='REGULAR', encrypt_type=None, rekey_frequency=2592000, notes=None, is_sys_default=None):  # noqa: E501
        """DneKeyPolicy - a model defined in Swagger"""  # noqa: E501

        self.__self = None
        self._links = None
        self._schema = None
        self._revision = None
        self._system_owned = None
        self._display_name = None
        self._description = None
        self._tags = None
        self._create_user = None
        self._protection = None
        self._create_time = None
        self._last_modified_time = None
        self._last_modified_user = None
        self._id = None
        self._resource_type = None
        self._is_default = None
        self._encrypt_algorithm = None
        self._mac_algorithm = None
        self._type = None
        self._encrypt_type = None
        self._rekey_frequency = None
        self._notes = None
        self._is_sys_default = None
        self.discriminator = None

        if _self is not None:
            self._self = _self
        if links is not None:
            self.links = links
        if schema is not None:
            self.schema = schema
        if revision is not None:
            self.revision = revision
        if system_owned is not None:
            self.system_owned = system_owned
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if create_user is not None:
            self.create_user = create_user
        if protection is not None:
            self.protection = protection
        if create_time is not None:
            self.create_time = create_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        if id is not None:
            self.id = id
        if resource_type is not None:
            self.resource_type = resource_type
        if is_default is not None:
            self.is_default = is_default
        self.encrypt_algorithm = encrypt_algorithm
        self.mac_algorithm = mac_algorithm
        if type is not None:
            self.type = type
        self.encrypt_type = encrypt_type
        if rekey_frequency is not None:
            self.rekey_frequency = rekey_frequency
        if notes is not None:
            self.notes = notes
        if is_sys_default is not None:
            self.is_sys_default = is_sys_default

    @property
    def _self(self):
        """Gets the _self of this DneKeyPolicy.  # noqa: E501


        :return: The _self of this DneKeyPolicy.  # noqa: E501
        :rtype: SelfResourceLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this DneKeyPolicy.


        :param _self: The _self of this DneKeyPolicy.  # noqa: E501
        :type: SelfResourceLink
        """

        self.__self = _self

    @property
    def links(self):
        """Gets the links of this DneKeyPolicy.  # noqa: E501

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :return: The links of this DneKeyPolicy.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DneKeyPolicy.

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :param links: The links of this DneKeyPolicy.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    @property
    def schema(self):
        """Gets the schema of this DneKeyPolicy.  # noqa: E501


        :return: The schema of this DneKeyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this DneKeyPolicy.


        :param schema: The schema of this DneKeyPolicy.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def revision(self):
        """Gets the revision of this DneKeyPolicy.  # noqa: E501

        The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.  # noqa: E501

        :return: The revision of this DneKeyPolicy.  # noqa: E501
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this DneKeyPolicy.

        The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.  # noqa: E501

        :param revision: The revision of this DneKeyPolicy.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def system_owned(self):
        """Gets the system_owned of this DneKeyPolicy.  # noqa: E501

        Indicates system owned resource  # noqa: E501

        :return: The system_owned of this DneKeyPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._system_owned

    @system_owned.setter
    def system_owned(self, system_owned):
        """Sets the system_owned of this DneKeyPolicy.

        Indicates system owned resource  # noqa: E501

        :param system_owned: The system_owned of this DneKeyPolicy.  # noqa: E501
        :type: bool
        """

        self._system_owned = system_owned

    @property
    def display_name(self):
        """Gets the display_name of this DneKeyPolicy.  # noqa: E501

        Defaults to ID if not set  # noqa: E501

        :return: The display_name of this DneKeyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DneKeyPolicy.

        Defaults to ID if not set  # noqa: E501

        :param display_name: The display_name of this DneKeyPolicy.  # noqa: E501
        :type: str
        """
        if display_name is not None and len(display_name) > 255:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this DneKeyPolicy.  # noqa: E501

        Description of this resource  # noqa: E501

        :return: The description of this DneKeyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DneKeyPolicy.

        Description of this resource  # noqa: E501

        :param description: The description of this DneKeyPolicy.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")  # noqa: E501

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this DneKeyPolicy.  # noqa: E501

        Opaque identifiers meaningful to the API user  # noqa: E501

        :return: The tags of this DneKeyPolicy.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DneKeyPolicy.

        Opaque identifiers meaningful to the API user  # noqa: E501

        :param tags: The tags of this DneKeyPolicy.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def create_user(self):
        """Gets the create_user of this DneKeyPolicy.  # noqa: E501

        ID of the user who created this resource  # noqa: E501

        :return: The create_user of this DneKeyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this DneKeyPolicy.

        ID of the user who created this resource  # noqa: E501

        :param create_user: The create_user of this DneKeyPolicy.  # noqa: E501
        :type: str
        """

        self._create_user = create_user

    @property
    def protection(self):
        """Gets the protection of this DneKeyPolicy.  # noqa: E501

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :return: The protection of this DneKeyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this DneKeyPolicy.

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :param protection: The protection of this DneKeyPolicy.  # noqa: E501
        :type: str
        """

        self._protection = protection

    @property
    def create_time(self):
        """Gets the create_time of this DneKeyPolicy.  # noqa: E501

        Timestamp of resource creation  # noqa: E501

        :return: The create_time of this DneKeyPolicy.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this DneKeyPolicy.

        Timestamp of resource creation  # noqa: E501

        :param create_time: The create_time of this DneKeyPolicy.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this DneKeyPolicy.  # noqa: E501

        Timestamp of last modification  # noqa: E501

        :return: The last_modified_time of this DneKeyPolicy.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this DneKeyPolicy.

        Timestamp of last modification  # noqa: E501

        :param last_modified_time: The last_modified_time of this DneKeyPolicy.  # noqa: E501
        :type: int
        """

        self._last_modified_time = last_modified_time

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this DneKeyPolicy.  # noqa: E501

        ID of the user who last modified this resource  # noqa: E501

        :return: The last_modified_user of this DneKeyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this DneKeyPolicy.

        ID of the user who last modified this resource  # noqa: E501

        :param last_modified_user: The last_modified_user of this DneKeyPolicy.  # noqa: E501
        :type: str
        """

        self._last_modified_user = last_modified_user

    @property
    def id(self):
        """Gets the id of this DneKeyPolicy.  # noqa: E501

        Unique identifier of this resource  # noqa: E501

        :return: The id of this DneKeyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DneKeyPolicy.

        Unique identifier of this resource  # noqa: E501

        :param id: The id of this DneKeyPolicy.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_type(self):
        """Gets the resource_type of this DneKeyPolicy.  # noqa: E501

        The type of this resource.  # noqa: E501

        :return: The resource_type of this DneKeyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this DneKeyPolicy.

        The type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this DneKeyPolicy.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def is_default(self):
        """Gets the is_default of this DneKeyPolicy.  # noqa: E501

        It is a boolean flag which reflects whether a DNE key policy is default or not.  # noqa: E501

        :return: The is_default of this DneKeyPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this DneKeyPolicy.

        It is a boolean flag which reflects whether a DNE key policy is default or not.  # noqa: E501

        :param is_default: The is_default of this DneKeyPolicy.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def encrypt_algorithm(self):
        """Gets the encrypt_algorithm of this DneKeyPolicy.  # noqa: E501

        DNE key encryption algorithm  # noqa: E501

        :return: The encrypt_algorithm of this DneKeyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._encrypt_algorithm

    @encrypt_algorithm.setter
    def encrypt_algorithm(self, encrypt_algorithm):
        """Sets the encrypt_algorithm of this DneKeyPolicy.

        DNE key encryption algorithm  # noqa: E501

        :param encrypt_algorithm: The encrypt_algorithm of this DneKeyPolicy.  # noqa: E501
        :type: str
        """
        if encrypt_algorithm is None:
            raise ValueError("Invalid value for `encrypt_algorithm`, must not be `None`")  # noqa: E501
        allowed_values = ["ENC_NULL", "ENC_AES_GCM_128"]  # noqa: E501
        if encrypt_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `encrypt_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(encrypt_algorithm, allowed_values)
            )

        self._encrypt_algorithm = encrypt_algorithm

    @property
    def mac_algorithm(self):
        """Gets the mac_algorithm of this DneKeyPolicy.  # noqa: E501

        MAC algorithm type  # noqa: E501

        :return: The mac_algorithm of this DneKeyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._mac_algorithm

    @mac_algorithm.setter
    def mac_algorithm(self, mac_algorithm):
        """Sets the mac_algorithm of this DneKeyPolicy.

        MAC algorithm type  # noqa: E501

        :param mac_algorithm: The mac_algorithm of this DneKeyPolicy.  # noqa: E501
        :type: str
        """
        if mac_algorithm is None:
            raise ValueError("Invalid value for `mac_algorithm`, must not be `None`")  # noqa: E501
        allowed_values = ["MAC_ALG_AES_GCM_128"]  # noqa: E501
        if mac_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `mac_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(mac_algorithm, allowed_values)
            )

        self._mac_algorithm = mac_algorithm

    @property
    def type(self):
        """Gets the type of this DneKeyPolicy.  # noqa: E501

        key policy type  # noqa: E501

        :return: The type of this DneKeyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DneKeyPolicy.

        key policy type  # noqa: E501

        :param type: The type of this DneKeyPolicy.  # noqa: E501
        :type: str
        """
        allowed_values = ["REGULAR", "BUM_TRAFFIC"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def encrypt_type(self):
        """Gets the encrypt_type of this DneKeyPolicy.  # noqa: E501

        Key policy encryption type  # noqa: E501

        :return: The encrypt_type of this DneKeyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._encrypt_type

    @encrypt_type.setter
    def encrypt_type(self, encrypt_type):
        """Sets the encrypt_type of this DneKeyPolicy.

        Key policy encryption type  # noqa: E501

        :param encrypt_type: The encrypt_type of this DneKeyPolicy.  # noqa: E501
        :type: str
        """
        if encrypt_type is None:
            raise ValueError("Invalid value for `encrypt_type`, must not be `None`")  # noqa: E501
        allowed_values = ["INTEGRITY_ONLY", "ENCRYPTION_AND_INTEGRITY"]  # noqa: E501
        if encrypt_type not in allowed_values:
            raise ValueError(
                "Invalid value for `encrypt_type` ({0}), must be one of {1}"  # noqa: E501
                .format(encrypt_type, allowed_values)
            )

        self._encrypt_type = encrypt_type

    @property
    def rekey_frequency(self):
        """Gets the rekey_frequency of this DneKeyPolicy.  # noqa: E501

        Frequency of key policy rekey (in seconds). Default 30 days, minimum 1 day, maximum 10000 days.  # noqa: E501

        :return: The rekey_frequency of this DneKeyPolicy.  # noqa: E501
        :rtype: int
        """
        return self._rekey_frequency

    @rekey_frequency.setter
    def rekey_frequency(self, rekey_frequency):
        """Sets the rekey_frequency of this DneKeyPolicy.

        Frequency of key policy rekey (in seconds). Default 30 days, minimum 1 day, maximum 10000 days.  # noqa: E501

        :param rekey_frequency: The rekey_frequency of this DneKeyPolicy.  # noqa: E501
        :type: int
        """
        if rekey_frequency is not None and rekey_frequency > 864000000:  # noqa: E501
            raise ValueError("Invalid value for `rekey_frequency`, must be a value less than or equal to `864000000`")  # noqa: E501
        if rekey_frequency is not None and rekey_frequency < 86400:  # noqa: E501
            raise ValueError("Invalid value for `rekey_frequency`, must be a value greater than or equal to `86400`")  # noqa: E501

        self._rekey_frequency = rekey_frequency

    @property
    def notes(self):
        """Gets the notes of this DneKeyPolicy.  # noqa: E501

        User notes specific to the key policy.  # noqa: E501

        :return: The notes of this DneKeyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DneKeyPolicy.

        User notes specific to the key policy.  # noqa: E501

        :param notes: The notes of this DneKeyPolicy.  # noqa: E501
        :type: str
        """
        if notes is not None and len(notes) > 2048:
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `2048`")  # noqa: E501

        self._notes = notes

    @property
    def is_sys_default(self):
        """Gets the is_sys_default of this DneKeyPolicy.  # noqa: E501

        It is a boolean flag which reflects whether a DNE key policy is system default or not. System default key policies are created while dne system is booting up. User can't change the value of the system default flag. User created key policy always has system default flag set to false, however a user can change default flag (not the system default) value from false to true of any key policy, but not from true to false (when setting a key policy as default, the current default key policy is automatically unset).  # noqa: E501

        :return: The is_sys_default of this DneKeyPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._is_sys_default

    @is_sys_default.setter
    def is_sys_default(self, is_sys_default):
        """Sets the is_sys_default of this DneKeyPolicy.

        It is a boolean flag which reflects whether a DNE key policy is system default or not. System default key policies are created while dne system is booting up. User can't change the value of the system default flag. User created key policy always has system default flag set to false, however a user can change default flag (not the system default) value from false to true of any key policy, but not from true to false (when setting a key policy as default, the current default key policy is automatically unset).  # noqa: E501

        :param is_sys_default: The is_sys_default of this DneKeyPolicy.  # noqa: E501
        :type: bool
        """

        self._is_sys_default = is_sys_default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DneKeyPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
