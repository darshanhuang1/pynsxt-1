# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.base_host_switch_profile import BaseHostSwitchProfile  # noqa: F401,E501
from swagger_client.models.lag import Lag  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501
from swagger_client.models.teaming_policy import TeamingPolicy  # noqa: F401,E501


class UplinkHostSwitchProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mtu': 'int',
        'teaming': 'TeamingPolicy',
        'transport_vlan': 'int',
        'lags': 'list[Lag]'
    }

    attribute_map = {
        'mtu': 'mtu',
        'teaming': 'teaming',
        'transport_vlan': 'transport_vlan',
        'lags': 'lags'
    }

    def __init__(self, mtu=1600, teaming=None, transport_vlan=0, lags=None):  # noqa: E501
        """UplinkHostSwitchProfile - a model defined in Swagger"""  # noqa: E501

        self._mtu = None
        self._teaming = None
        self._transport_vlan = None
        self._lags = None
        self.discriminator = None

        if mtu is not None:
            self.mtu = mtu
        self.teaming = teaming
        if transport_vlan is not None:
            self.transport_vlan = transport_vlan
        if lags is not None:
            self.lags = lags

    @property
    def mtu(self):
        """Gets the mtu of this UplinkHostSwitchProfile.  # noqa: E501

        Maximum Transmission Unit used for uplinks  # noqa: E501

        :return: The mtu of this UplinkHostSwitchProfile.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this UplinkHostSwitchProfile.

        Maximum Transmission Unit used for uplinks  # noqa: E501

        :param mtu: The mtu of this UplinkHostSwitchProfile.  # noqa: E501
        :type: int
        """
        if mtu is not None and mtu > 9000:  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `9000`")  # noqa: E501
        if mtu is not None and mtu < 1280:  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `1280`")  # noqa: E501

        self._mtu = mtu

    @property
    def teaming(self):
        """Gets the teaming of this UplinkHostSwitchProfile.  # noqa: E501

        TeamingPolicy associated with this UplinkProfile  # noqa: E501

        :return: The teaming of this UplinkHostSwitchProfile.  # noqa: E501
        :rtype: TeamingPolicy
        """
        return self._teaming

    @teaming.setter
    def teaming(self, teaming):
        """Sets the teaming of this UplinkHostSwitchProfile.

        TeamingPolicy associated with this UplinkProfile  # noqa: E501

        :param teaming: The teaming of this UplinkHostSwitchProfile.  # noqa: E501
        :type: TeamingPolicy
        """
        if teaming is None:
            raise ValueError("Invalid value for `teaming`, must not be `None`")  # noqa: E501

        self._teaming = teaming

    @property
    def transport_vlan(self):
        """Gets the transport_vlan of this UplinkHostSwitchProfile.  # noqa: E501

        VLAN used for tagging Overlay traffic of associated HostSwitch  # noqa: E501

        :return: The transport_vlan of this UplinkHostSwitchProfile.  # noqa: E501
        :rtype: int
        """
        return self._transport_vlan

    @transport_vlan.setter
    def transport_vlan(self, transport_vlan):
        """Sets the transport_vlan of this UplinkHostSwitchProfile.

        VLAN used for tagging Overlay traffic of associated HostSwitch  # noqa: E501

        :param transport_vlan: The transport_vlan of this UplinkHostSwitchProfile.  # noqa: E501
        :type: int
        """

        self._transport_vlan = transport_vlan

    @property
    def lags(self):
        """Gets the lags of this UplinkHostSwitchProfile.  # noqa: E501

        list of LACP group  # noqa: E501

        :return: The lags of this UplinkHostSwitchProfile.  # noqa: E501
        :rtype: list[Lag]
        """
        return self._lags

    @lags.setter
    def lags(self, lags):
        """Sets the lags of this UplinkHostSwitchProfile.

        list of LACP group  # noqa: E501

        :param lags: The lags of this UplinkHostSwitchProfile.  # noqa: E501
        :type: list[Lag]
        """

        self._lags = lags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UplinkHostSwitchProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
