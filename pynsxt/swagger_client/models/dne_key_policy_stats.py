# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.resource import Resource  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501


class DneKeyPolicyStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'SelfResourceLink',
        'links': 'list[ResourceLink]',
        'schema': 'str',
        'bytes_decrypted': 'int',
        'bytes_dropped': 'int',
        'packets_dropped': 'int',
        'packets_encrypted': 'int',
        'key_policy_identifier': 'str',
        'bytes_encrypted': 'int',
        'packets_decrypted': 'int'
    }

    attribute_map = {
        '_self': '_self',
        'links': '_links',
        'schema': '_schema',
        'bytes_decrypted': 'bytes_decrypted',
        'bytes_dropped': 'bytes_dropped',
        'packets_dropped': 'packets_dropped',
        'packets_encrypted': 'packets_encrypted',
        'key_policy_identifier': 'key_policy_identifier',
        'bytes_encrypted': 'bytes_encrypted',
        'packets_decrypted': 'packets_decrypted'
    }

    def __init__(self, _self=None, links=None, schema=None, bytes_decrypted=None, bytes_dropped=None, packets_dropped=None, packets_encrypted=None, key_policy_identifier=None, bytes_encrypted=None, packets_decrypted=None):  # noqa: E501
        """DneKeyPolicyStats - a model defined in Swagger"""  # noqa: E501

        self.__self = None
        self._links = None
        self._schema = None
        self._bytes_decrypted = None
        self._bytes_dropped = None
        self._packets_dropped = None
        self._packets_encrypted = None
        self._key_policy_identifier = None
        self._bytes_encrypted = None
        self._packets_decrypted = None
        self.discriminator = None

        if _self is not None:
            self._self = _self
        if links is not None:
            self.links = links
        if schema is not None:
            self.schema = schema
        if bytes_decrypted is not None:
            self.bytes_decrypted = bytes_decrypted
        if bytes_dropped is not None:
            self.bytes_dropped = bytes_dropped
        if packets_dropped is not None:
            self.packets_dropped = packets_dropped
        if packets_encrypted is not None:
            self.packets_encrypted = packets_encrypted
        if key_policy_identifier is not None:
            self.key_policy_identifier = key_policy_identifier
        if bytes_encrypted is not None:
            self.bytes_encrypted = bytes_encrypted
        if packets_decrypted is not None:
            self.packets_decrypted = packets_decrypted

    @property
    def _self(self):
        """Gets the _self of this DneKeyPolicyStats.  # noqa: E501


        :return: The _self of this DneKeyPolicyStats.  # noqa: E501
        :rtype: SelfResourceLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this DneKeyPolicyStats.


        :param _self: The _self of this DneKeyPolicyStats.  # noqa: E501
        :type: SelfResourceLink
        """

        self.__self = _self

    @property
    def links(self):
        """Gets the links of this DneKeyPolicyStats.  # noqa: E501

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :return: The links of this DneKeyPolicyStats.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DneKeyPolicyStats.

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :param links: The links of this DneKeyPolicyStats.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    @property
    def schema(self):
        """Gets the schema of this DneKeyPolicyStats.  # noqa: E501


        :return: The schema of this DneKeyPolicyStats.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this DneKeyPolicyStats.


        :param schema: The schema of this DneKeyPolicyStats.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def bytes_decrypted(self):
        """Gets the bytes_decrypted of this DneKeyPolicyStats.  # noqa: E501

        The number of bytes decrypted by the key policy. If key policy action is integrity only, it indicates the number of bytes which passed integrity check.  # noqa: E501

        :return: The bytes_decrypted of this DneKeyPolicyStats.  # noqa: E501
        :rtype: int
        """
        return self._bytes_decrypted

    @bytes_decrypted.setter
    def bytes_decrypted(self, bytes_decrypted):
        """Sets the bytes_decrypted of this DneKeyPolicyStats.

        The number of bytes decrypted by the key policy. If key policy action is integrity only, it indicates the number of bytes which passed integrity check.  # noqa: E501

        :param bytes_decrypted: The bytes_decrypted of this DneKeyPolicyStats.  # noqa: E501
        :type: int
        """

        self._bytes_decrypted = bytes_decrypted

    @property
    def bytes_dropped(self):
        """Gets the bytes_dropped of this DneKeyPolicyStats.  # noqa: E501

        The number of bytes dropped for the key policy.  # noqa: E501

        :return: The bytes_dropped of this DneKeyPolicyStats.  # noqa: E501
        :rtype: int
        """
        return self._bytes_dropped

    @bytes_dropped.setter
    def bytes_dropped(self, bytes_dropped):
        """Sets the bytes_dropped of this DneKeyPolicyStats.

        The number of bytes dropped for the key policy.  # noqa: E501

        :param bytes_dropped: The bytes_dropped of this DneKeyPolicyStats.  # noqa: E501
        :type: int
        """

        self._bytes_dropped = bytes_dropped

    @property
    def packets_dropped(self):
        """Gets the packets_dropped of this DneKeyPolicyStats.  # noqa: E501

        The number of dropped packets for the key policy.  # noqa: E501

        :return: The packets_dropped of this DneKeyPolicyStats.  # noqa: E501
        :rtype: int
        """
        return self._packets_dropped

    @packets_dropped.setter
    def packets_dropped(self, packets_dropped):
        """Sets the packets_dropped of this DneKeyPolicyStats.

        The number of dropped packets for the key policy.  # noqa: E501

        :param packets_dropped: The packets_dropped of this DneKeyPolicyStats.  # noqa: E501
        :type: int
        """

        self._packets_dropped = packets_dropped

    @property
    def packets_encrypted(self):
        """Gets the packets_encrypted of this DneKeyPolicyStats.  # noqa: E501

        The number of packets encrypted by the key policy. If key policy action is integrity only, it indicates the number of packets with the addition of integrity check.  # noqa: E501

        :return: The packets_encrypted of this DneKeyPolicyStats.  # noqa: E501
        :rtype: int
        """
        return self._packets_encrypted

    @packets_encrypted.setter
    def packets_encrypted(self, packets_encrypted):
        """Sets the packets_encrypted of this DneKeyPolicyStats.

        The number of packets encrypted by the key policy. If key policy action is integrity only, it indicates the number of packets with the addition of integrity check.  # noqa: E501

        :param packets_encrypted: The packets_encrypted of this DneKeyPolicyStats.  # noqa: E501
        :type: int
        """

        self._packets_encrypted = packets_encrypted

    @property
    def key_policy_identifier(self):
        """Gets the key_policy_identifier of this DneKeyPolicyStats.  # noqa: E501

        Key policy identifier of the DNE key policy. This is a globally unique number.  # noqa: E501

        :return: The key_policy_identifier of this DneKeyPolicyStats.  # noqa: E501
        :rtype: str
        """
        return self._key_policy_identifier

    @key_policy_identifier.setter
    def key_policy_identifier(self, key_policy_identifier):
        """Sets the key_policy_identifier of this DneKeyPolicyStats.

        Key policy identifier of the DNE key policy. This is a globally unique number.  # noqa: E501

        :param key_policy_identifier: The key_policy_identifier of this DneKeyPolicyStats.  # noqa: E501
        :type: str
        """

        self._key_policy_identifier = key_policy_identifier

    @property
    def bytes_encrypted(self):
        """Gets the bytes_encrypted of this DneKeyPolicyStats.  # noqa: E501

        The number of bytes encrypted by the key policy. If key policy action is integrity only, it indicates the number of bytes with the addition of integrity check.  # noqa: E501

        :return: The bytes_encrypted of this DneKeyPolicyStats.  # noqa: E501
        :rtype: int
        """
        return self._bytes_encrypted

    @bytes_encrypted.setter
    def bytes_encrypted(self, bytes_encrypted):
        """Sets the bytes_encrypted of this DneKeyPolicyStats.

        The number of bytes encrypted by the key policy. If key policy action is integrity only, it indicates the number of bytes with the addition of integrity check.  # noqa: E501

        :param bytes_encrypted: The bytes_encrypted of this DneKeyPolicyStats.  # noqa: E501
        :type: int
        """

        self._bytes_encrypted = bytes_encrypted

    @property
    def packets_decrypted(self):
        """Gets the packets_decrypted of this DneKeyPolicyStats.  # noqa: E501

        The number of packets decrypted by the key policy. If key policy action is integrity only, it indicates the number of packets which passed integrity check.  # noqa: E501

        :return: The packets_decrypted of this DneKeyPolicyStats.  # noqa: E501
        :rtype: int
        """
        return self._packets_decrypted

    @packets_decrypted.setter
    def packets_decrypted(self, packets_decrypted):
        """Sets the packets_decrypted of this DneKeyPolicyStats.

        The number of packets decrypted by the key policy. If key policy action is integrity only, it indicates the number of packets which passed integrity check.  # noqa: E501

        :param packets_decrypted: The packets_decrypted of this DneKeyPolicyStats.  # noqa: E501
        :type: int
        """

        self._packets_decrypted = packets_decrypted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DneKeyPolicyStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
