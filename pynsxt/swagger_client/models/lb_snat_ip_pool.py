# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.lb_snat_ip_element import LbSnatIpElement  # noqa: F401,E501
from swagger_client.models.lb_snat_translation import LbSnatTranslation  # noqa: F401,E501


class LbSnatIpPool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_addresses': 'list[LbSnatIpElement]'
    }

    attribute_map = {
        'ip_addresses': 'ip_addresses'
    }

    def __init__(self, ip_addresses=None):  # noqa: E501
        """LbSnatIpPool - a model defined in Swagger"""  # noqa: E501

        self._ip_addresses = None
        self.discriminator = None

        self.ip_addresses = ip_addresses

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this LbSnatIpPool.  # noqa: E501

        Currently, only one single IP address or IP range is supported. If an IP range is specified, the range may contain no more than 64 IP addresses.   # noqa: E501

        :return: The ip_addresses of this LbSnatIpPool.  # noqa: E501
        :rtype: list[LbSnatIpElement]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this LbSnatIpPool.

        Currently, only one single IP address or IP range is supported. If an IP range is specified, the range may contain no more than 64 IP addresses.   # noqa: E501

        :param ip_addresses: The ip_addresses of this LbSnatIpPool.  # noqa: E501
        :type: list[LbSnatIpElement]
        """
        if ip_addresses is None:
            raise ValueError("Invalid value for `ip_addresses`, must not be `None`")  # noqa: E501

        self._ip_addresses = ip_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbSnatIpPool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
