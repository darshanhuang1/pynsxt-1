# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.pool_member_setting import PoolMemberSetting  # noqa: F401,E501
from swagger_client.models.resource_reference import ResourceReference  # noqa: F401,E501


class PoolMemberGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'grouping_object': 'ResourceReference',
        'ip_revision_filter': 'str',
        'max_ip_list_size': 'int',
        'customized_members': 'list[PoolMemberSetting]'
    }

    attribute_map = {
        'grouping_object': 'grouping_object',
        'ip_revision_filter': 'ip_revision_filter',
        'max_ip_list_size': 'max_ip_list_size',
        'customized_members': 'customized_members'
    }

    def __init__(self, grouping_object=None, ip_revision_filter='IPV4', max_ip_list_size=None, customized_members=None):  # noqa: E501
        """PoolMemberGroup - a model defined in Swagger"""  # noqa: E501

        self._grouping_object = None
        self._ip_revision_filter = None
        self._max_ip_list_size = None
        self._customized_members = None
        self.discriminator = None

        self.grouping_object = grouping_object
        if ip_revision_filter is not None:
            self.ip_revision_filter = ip_revision_filter
        self.max_ip_list_size = max_ip_list_size
        if customized_members is not None:
            self.customized_members = customized_members

    @property
    def grouping_object(self):
        """Gets the grouping_object of this PoolMemberGroup.  # noqa: E501

        Load balancer pool support grouping object as dynamic pool members. The IP list of the grouping object such as NSGroup would be used as pool member IP setting.   # noqa: E501

        :return: The grouping_object of this PoolMemberGroup.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._grouping_object

    @grouping_object.setter
    def grouping_object(self, grouping_object):
        """Sets the grouping_object of this PoolMemberGroup.

        Load balancer pool support grouping object as dynamic pool members. The IP list of the grouping object such as NSGroup would be used as pool member IP setting.   # noqa: E501

        :param grouping_object: The grouping_object of this PoolMemberGroup.  # noqa: E501
        :type: ResourceReference
        """
        if grouping_object is None:
            raise ValueError("Invalid value for `grouping_object`, must not be `None`")  # noqa: E501

        self._grouping_object = grouping_object

    @property
    def ip_revision_filter(self):
        """Gets the ip_revision_filter of this PoolMemberGroup.  # noqa: E501

        Ip revision filter is used to filter IPv4 or IPv6 addresses from the grouping object. If the filter is not specified, both IPv4 and IPv6 addresses would be used as server IPs. The link local and loopback addresses would be always filtered out.   # noqa: E501

        :return: The ip_revision_filter of this PoolMemberGroup.  # noqa: E501
        :rtype: str
        """
        return self._ip_revision_filter

    @ip_revision_filter.setter
    def ip_revision_filter(self, ip_revision_filter):
        """Sets the ip_revision_filter of this PoolMemberGroup.

        Ip revision filter is used to filter IPv4 or IPv6 addresses from the grouping object. If the filter is not specified, both IPv4 and IPv6 addresses would be used as server IPs. The link local and loopback addresses would be always filtered out.   # noqa: E501

        :param ip_revision_filter: The ip_revision_filter of this PoolMemberGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["IPV4", "IPV6", "IPV4_IPV6"]  # noqa: E501
        if ip_revision_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_revision_filter` ({0}), must be one of {1}"  # noqa: E501
                .format(ip_revision_filter, allowed_values)
            )

        self._ip_revision_filter = ip_revision_filter

    @property
    def max_ip_list_size(self):
        """Gets the max_ip_list_size of this PoolMemberGroup.  # noqa: E501

        The size is used to define the maximum number of grouping object IP address list. These IP addresses would be used as pool members. If the grouping object includes more than certain number of IP addresses, the redundant parts would be ignored and those IP addresses would not be treated as pool members.   # noqa: E501

        :return: The max_ip_list_size of this PoolMemberGroup.  # noqa: E501
        :rtype: int
        """
        return self._max_ip_list_size

    @max_ip_list_size.setter
    def max_ip_list_size(self, max_ip_list_size):
        """Sets the max_ip_list_size of this PoolMemberGroup.

        The size is used to define the maximum number of grouping object IP address list. These IP addresses would be used as pool members. If the grouping object includes more than certain number of IP addresses, the redundant parts would be ignored and those IP addresses would not be treated as pool members.   # noqa: E501

        :param max_ip_list_size: The max_ip_list_size of this PoolMemberGroup.  # noqa: E501
        :type: int
        """
        if max_ip_list_size is None:
            raise ValueError("Invalid value for `max_ip_list_size`, must not be `None`")  # noqa: E501
        if max_ip_list_size is not None and max_ip_list_size < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_ip_list_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_ip_list_size = max_ip_list_size

    @property
    def customized_members(self):
        """Gets the customized_members of this PoolMemberGroup.  # noqa: E501

        The list is used to show the customized pool member settings. User can only user pool member action API to update the admin state for a specific IP address.   # noqa: E501

        :return: The customized_members of this PoolMemberGroup.  # noqa: E501
        :rtype: list[PoolMemberSetting]
        """
        return self._customized_members

    @customized_members.setter
    def customized_members(self, customized_members):
        """Sets the customized_members of this PoolMemberGroup.

        The list is used to show the customized pool member settings. User can only user pool member action API to update the admin state for a specific IP address.   # noqa: E501

        :param customized_members: The customized_members of this PoolMemberGroup.  # noqa: E501
        :type: list[PoolMemberSetting]
        """

        self._customized_members = customized_members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoolMemberGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
