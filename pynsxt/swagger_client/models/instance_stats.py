# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InstanceStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vcpus': 'int',
        'managed': 'int',
        'error': 'int',
        'unmanaged': 'int',
        'total': 'int',
        'powered_off': 'int'
    }

    attribute_map = {
        'vcpus': 'vcpus',
        'managed': 'managed',
        'error': 'error',
        'unmanaged': 'unmanaged',
        'total': 'total',
        'powered_off': 'powered_off'
    }

    def __init__(self, vcpus=None, managed=None, error=None, unmanaged=None, total=None, powered_off=None):  # noqa: E501
        """InstanceStats - a model defined in Swagger"""  # noqa: E501

        self._vcpus = None
        self._managed = None
        self._error = None
        self._unmanaged = None
        self._total = None
        self._powered_off = None
        self.discriminator = None

        if vcpus is not None:
            self.vcpus = vcpus
        if managed is not None:
            self.managed = managed
        if error is not None:
            self.error = error
        if unmanaged is not None:
            self.unmanaged = unmanaged
        if total is not None:
            self.total = total
        if powered_off is not None:
            self.powered_off = powered_off

    @property
    def vcpus(self):
        """Gets the vcpus of this InstanceStats.  # noqa: E501

        The number of virtual CPUs.  # noqa: E501

        :return: The vcpus of this InstanceStats.  # noqa: E501
        :rtype: int
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this InstanceStats.

        The number of virtual CPUs.  # noqa: E501

        :param vcpus: The vcpus of this InstanceStats.  # noqa: E501
        :type: int
        """

        self._vcpus = vcpus

    @property
    def managed(self):
        """Gets the managed of this InstanceStats.  # noqa: E501

        The number of instances with status MANAGED.  # noqa: E501

        :return: The managed of this InstanceStats.  # noqa: E501
        :rtype: int
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this InstanceStats.

        The number of instances with status MANAGED.  # noqa: E501

        :param managed: The managed of this InstanceStats.  # noqa: E501
        :type: int
        """

        self._managed = managed

    @property
    def error(self):
        """Gets the error of this InstanceStats.  # noqa: E501

        The number of instances with status ERROR.  # noqa: E501

        :return: The error of this InstanceStats.  # noqa: E501
        :rtype: int
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this InstanceStats.

        The number of instances with status ERROR.  # noqa: E501

        :param error: The error of this InstanceStats.  # noqa: E501
        :type: int
        """

        self._error = error

    @property
    def unmanaged(self):
        """Gets the unmanaged of this InstanceStats.  # noqa: E501

        The number of instances with status UNMANAGED.  # noqa: E501

        :return: The unmanaged of this InstanceStats.  # noqa: E501
        :rtype: int
        """
        return self._unmanaged

    @unmanaged.setter
    def unmanaged(self, unmanaged):
        """Sets the unmanaged of this InstanceStats.

        The number of instances with status UNMANAGED.  # noqa: E501

        :param unmanaged: The unmanaged of this InstanceStats.  # noqa: E501
        :type: int
        """

        self._unmanaged = unmanaged

    @property
    def total(self):
        """Gets the total of this InstanceStats.  # noqa: E501

        The total number of instances.  # noqa: E501

        :return: The total of this InstanceStats.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InstanceStats.

        The total number of instances.  # noqa: E501

        :param total: The total of this InstanceStats.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def powered_off(self):
        """Gets the powered_off of this InstanceStats.  # noqa: E501

        The number of instances with status POWERED OFF.  # noqa: E501

        :return: The powered_off of this InstanceStats.  # noqa: E501
        :rtype: int
        """
        return self._powered_off

    @powered_off.setter
    def powered_off(self, powered_off):
        """Sets the powered_off of this InstanceStats.

        The number of instances with status POWERED OFF.  # noqa: E501

        :param powered_off: The powered_off of this InstanceStats.  # noqa: E501
        :type: int
        """

        self._powered_off = powered_off

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
