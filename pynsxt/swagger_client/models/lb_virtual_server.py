# coding: utf-8

"""
    NSX API

    VMware NSX REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.client_ssl_profile_binding import ClientSslProfileBinding  # noqa: F401,E501
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501
from swagger_client.models.resource_link import ResourceLink  # noqa: F401,E501
from swagger_client.models.self_resource_link import SelfResourceLink  # noqa: F401,E501
from swagger_client.models.server_ssl_profile_binding import ServerSslProfileBinding  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501


class LbVirtualServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'SelfResourceLink',
        'links': 'list[ResourceLink]',
        'schema': 'str',
        'revision': 'int',
        'system_owned': 'bool',
        'display_name': 'str',
        'description': 'str',
        'tags': 'list[Tag]',
        'create_user': 'str',
        'protection': 'str',
        'create_time': 'int',
        'last_modified_time': 'int',
        'last_modified_user': 'str',
        'id': 'str',
        'resource_type': 'str',
        'ip_protocol': 'str',
        'server_ssl_profile_binding': 'ServerSslProfileBinding',
        'enabled': 'bool',
        'max_concurrent_connections': 'int',
        'pool_id': 'str',
        'application_profile_id': 'str',
        'rule_ids': 'list[str]',
        'max_new_connection_rate': 'int',
        'persistence_profile_id': 'str',
        'client_ssl_profile_binding': 'ClientSslProfileBinding',
        'default_pool_member_port': 'str',
        'ip_address': 'str',
        'port': 'str'
    }

    attribute_map = {
        '_self': '_self',
        'links': '_links',
        'schema': '_schema',
        'revision': '_revision',
        'system_owned': '_system_owned',
        'display_name': 'display_name',
        'description': 'description',
        'tags': 'tags',
        'create_user': '_create_user',
        'protection': '_protection',
        'create_time': '_create_time',
        'last_modified_time': '_last_modified_time',
        'last_modified_user': '_last_modified_user',
        'id': 'id',
        'resource_type': 'resource_type',
        'ip_protocol': 'ip_protocol',
        'server_ssl_profile_binding': 'server_ssl_profile_binding',
        'enabled': 'enabled',
        'max_concurrent_connections': 'max_concurrent_connections',
        'pool_id': 'pool_id',
        'application_profile_id': 'application_profile_id',
        'rule_ids': 'rule_ids',
        'max_new_connection_rate': 'max_new_connection_rate',
        'persistence_profile_id': 'persistence_profile_id',
        'client_ssl_profile_binding': 'client_ssl_profile_binding',
        'default_pool_member_port': 'default_pool_member_port',
        'ip_address': 'ip_address',
        'port': 'port'
    }

    def __init__(self, _self=None, links=None, schema=None, revision=None, system_owned=None, display_name=None, description=None, tags=None, create_user=None, protection=None, create_time=None, last_modified_time=None, last_modified_user=None, id=None, resource_type=None, ip_protocol='TCP', server_ssl_profile_binding=None, enabled=True, max_concurrent_connections=None, pool_id=None, application_profile_id=None, rule_ids=None, max_new_connection_rate=None, persistence_profile_id=None, client_ssl_profile_binding=None, default_pool_member_port=None, ip_address=None, port=None):  # noqa: E501
        """LbVirtualServer - a model defined in Swagger"""  # noqa: E501

        self.__self = None
        self._links = None
        self._schema = None
        self._revision = None
        self._system_owned = None
        self._display_name = None
        self._description = None
        self._tags = None
        self._create_user = None
        self._protection = None
        self._create_time = None
        self._last_modified_time = None
        self._last_modified_user = None
        self._id = None
        self._resource_type = None
        self._ip_protocol = None
        self._server_ssl_profile_binding = None
        self._enabled = None
        self._max_concurrent_connections = None
        self._pool_id = None
        self._application_profile_id = None
        self._rule_ids = None
        self._max_new_connection_rate = None
        self._persistence_profile_id = None
        self._client_ssl_profile_binding = None
        self._default_pool_member_port = None
        self._ip_address = None
        self._port = None
        self.discriminator = None

        if _self is not None:
            self._self = _self
        if links is not None:
            self.links = links
        if schema is not None:
            self.schema = schema
        if revision is not None:
            self.revision = revision
        if system_owned is not None:
            self.system_owned = system_owned
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if create_user is not None:
            self.create_user = create_user
        if protection is not None:
            self.protection = protection
        if create_time is not None:
            self.create_time = create_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        if id is not None:
            self.id = id
        if resource_type is not None:
            self.resource_type = resource_type
        if ip_protocol is not None:
            self.ip_protocol = ip_protocol
        if server_ssl_profile_binding is not None:
            self.server_ssl_profile_binding = server_ssl_profile_binding
        if enabled is not None:
            self.enabled = enabled
        if max_concurrent_connections is not None:
            self.max_concurrent_connections = max_concurrent_connections
        if pool_id is not None:
            self.pool_id = pool_id
        self.application_profile_id = application_profile_id
        if rule_ids is not None:
            self.rule_ids = rule_ids
        if max_new_connection_rate is not None:
            self.max_new_connection_rate = max_new_connection_rate
        if persistence_profile_id is not None:
            self.persistence_profile_id = persistence_profile_id
        if client_ssl_profile_binding is not None:
            self.client_ssl_profile_binding = client_ssl_profile_binding
        if default_pool_member_port is not None:
            self.default_pool_member_port = default_pool_member_port
        self.ip_address = ip_address
        self.port = port

    @property
    def _self(self):
        """Gets the _self of this LbVirtualServer.  # noqa: E501


        :return: The _self of this LbVirtualServer.  # noqa: E501
        :rtype: SelfResourceLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this LbVirtualServer.


        :param _self: The _self of this LbVirtualServer.  # noqa: E501
        :type: SelfResourceLink
        """

        self.__self = _self

    @property
    def links(self):
        """Gets the links of this LbVirtualServer.  # noqa: E501

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :return: The links of this LbVirtualServer.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this LbVirtualServer.

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :param links: The links of this LbVirtualServer.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    @property
    def schema(self):
        """Gets the schema of this LbVirtualServer.  # noqa: E501


        :return: The schema of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this LbVirtualServer.


        :param schema: The schema of this LbVirtualServer.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def revision(self):
        """Gets the revision of this LbVirtualServer.  # noqa: E501

        The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.  # noqa: E501

        :return: The revision of this LbVirtualServer.  # noqa: E501
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this LbVirtualServer.

        The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.  # noqa: E501

        :param revision: The revision of this LbVirtualServer.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def system_owned(self):
        """Gets the system_owned of this LbVirtualServer.  # noqa: E501

        Indicates system owned resource  # noqa: E501

        :return: The system_owned of this LbVirtualServer.  # noqa: E501
        :rtype: bool
        """
        return self._system_owned

    @system_owned.setter
    def system_owned(self, system_owned):
        """Sets the system_owned of this LbVirtualServer.

        Indicates system owned resource  # noqa: E501

        :param system_owned: The system_owned of this LbVirtualServer.  # noqa: E501
        :type: bool
        """

        self._system_owned = system_owned

    @property
    def display_name(self):
        """Gets the display_name of this LbVirtualServer.  # noqa: E501

        Defaults to ID if not set  # noqa: E501

        :return: The display_name of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LbVirtualServer.

        Defaults to ID if not set  # noqa: E501

        :param display_name: The display_name of this LbVirtualServer.  # noqa: E501
        :type: str
        """
        if display_name is not None and len(display_name) > 255:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this LbVirtualServer.  # noqa: E501

        Description of this resource  # noqa: E501

        :return: The description of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LbVirtualServer.

        Description of this resource  # noqa: E501

        :param description: The description of this LbVirtualServer.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")  # noqa: E501

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this LbVirtualServer.  # noqa: E501

        Opaque identifiers meaningful to the API user  # noqa: E501

        :return: The tags of this LbVirtualServer.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LbVirtualServer.

        Opaque identifiers meaningful to the API user  # noqa: E501

        :param tags: The tags of this LbVirtualServer.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def create_user(self):
        """Gets the create_user of this LbVirtualServer.  # noqa: E501

        ID of the user who created this resource  # noqa: E501

        :return: The create_user of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this LbVirtualServer.

        ID of the user who created this resource  # noqa: E501

        :param create_user: The create_user of this LbVirtualServer.  # noqa: E501
        :type: str
        """

        self._create_user = create_user

    @property
    def protection(self):
        """Gets the protection of this LbVirtualServer.  # noqa: E501

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :return: The protection of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this LbVirtualServer.

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :param protection: The protection of this LbVirtualServer.  # noqa: E501
        :type: str
        """

        self._protection = protection

    @property
    def create_time(self):
        """Gets the create_time of this LbVirtualServer.  # noqa: E501

        Timestamp of resource creation  # noqa: E501

        :return: The create_time of this LbVirtualServer.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this LbVirtualServer.

        Timestamp of resource creation  # noqa: E501

        :param create_time: The create_time of this LbVirtualServer.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this LbVirtualServer.  # noqa: E501

        Timestamp of last modification  # noqa: E501

        :return: The last_modified_time of this LbVirtualServer.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this LbVirtualServer.

        Timestamp of last modification  # noqa: E501

        :param last_modified_time: The last_modified_time of this LbVirtualServer.  # noqa: E501
        :type: int
        """

        self._last_modified_time = last_modified_time

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this LbVirtualServer.  # noqa: E501

        ID of the user who last modified this resource  # noqa: E501

        :return: The last_modified_user of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this LbVirtualServer.

        ID of the user who last modified this resource  # noqa: E501

        :param last_modified_user: The last_modified_user of this LbVirtualServer.  # noqa: E501
        :type: str
        """

        self._last_modified_user = last_modified_user

    @property
    def id(self):
        """Gets the id of this LbVirtualServer.  # noqa: E501

        Unique identifier of this resource  # noqa: E501

        :return: The id of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LbVirtualServer.

        Unique identifier of this resource  # noqa: E501

        :param id: The id of this LbVirtualServer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_type(self):
        """Gets the resource_type of this LbVirtualServer.  # noqa: E501

        The type of this resource.  # noqa: E501

        :return: The resource_type of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this LbVirtualServer.

        The type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this LbVirtualServer.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def ip_protocol(self):
        """Gets the ip_protocol of this LbVirtualServer.  # noqa: E501

        Assigned Internet Protocol in IP header, TCP, UDP are supported.   # noqa: E501

        :return: The ip_protocol of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._ip_protocol

    @ip_protocol.setter
    def ip_protocol(self, ip_protocol):
        """Sets the ip_protocol of this LbVirtualServer.

        Assigned Internet Protocol in IP header, TCP, UDP are supported.   # noqa: E501

        :param ip_protocol: The ip_protocol of this LbVirtualServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["TCP", "UDP"]  # noqa: E501
        if ip_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(ip_protocol, allowed_values)
            )

        self._ip_protocol = ip_protocol

    @property
    def server_ssl_profile_binding(self):
        """Gets the server_ssl_profile_binding of this LbVirtualServer.  # noqa: E501

        The setting is used when load balancer acts as an SSL client and establishing a connection to the backend server.   # noqa: E501

        :return: The server_ssl_profile_binding of this LbVirtualServer.  # noqa: E501
        :rtype: ServerSslProfileBinding
        """
        return self._server_ssl_profile_binding

    @server_ssl_profile_binding.setter
    def server_ssl_profile_binding(self, server_ssl_profile_binding):
        """Sets the server_ssl_profile_binding of this LbVirtualServer.

        The setting is used when load balancer acts as an SSL client and establishing a connection to the backend server.   # noqa: E501

        :param server_ssl_profile_binding: The server_ssl_profile_binding of this LbVirtualServer.  # noqa: E501
        :type: ServerSslProfileBinding
        """

        self._server_ssl_profile_binding = server_ssl_profile_binding

    @property
    def enabled(self):
        """Gets the enabled of this LbVirtualServer.  # noqa: E501

        whether the virtual server is enabled  # noqa: E501

        :return: The enabled of this LbVirtualServer.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LbVirtualServer.

        whether the virtual server is enabled  # noqa: E501

        :param enabled: The enabled of this LbVirtualServer.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def max_concurrent_connections(self):
        """Gets the max_concurrent_connections of this LbVirtualServer.  # noqa: E501

        To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited.   # noqa: E501

        :return: The max_concurrent_connections of this LbVirtualServer.  # noqa: E501
        :rtype: int
        """
        return self._max_concurrent_connections

    @max_concurrent_connections.setter
    def max_concurrent_connections(self, max_concurrent_connections):
        """Sets the max_concurrent_connections of this LbVirtualServer.

        To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited.   # noqa: E501

        :param max_concurrent_connections: The max_concurrent_connections of this LbVirtualServer.  # noqa: E501
        :type: int
        """
        if max_concurrent_connections is not None and max_concurrent_connections < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_concurrent_connections`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_concurrent_connections = max_concurrent_connections

    @property
    def pool_id(self):
        """Gets the pool_id of this LbVirtualServer.  # noqa: E501

        The server pool(LbPool) contains backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.   # noqa: E501

        :return: The pool_id of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this LbVirtualServer.

        The server pool(LbPool) contains backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.   # noqa: E501

        :param pool_id: The pool_id of this LbVirtualServer.  # noqa: E501
        :type: str
        """

        self._pool_id = pool_id

    @property
    def application_profile_id(self):
        """Gets the application_profile_id of this LbVirtualServer.  # noqa: E501

        The application profile defines the application protocol characteristics. It is used to influence how load balancing is performed. Currently, LbFastTCPProfile, LbFastUDPProfile and LbHttpProfile, etc are supported.   # noqa: E501

        :return: The application_profile_id of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._application_profile_id

    @application_profile_id.setter
    def application_profile_id(self, application_profile_id):
        """Sets the application_profile_id of this LbVirtualServer.

        The application profile defines the application protocol characteristics. It is used to influence how load balancing is performed. Currently, LbFastTCPProfile, LbFastUDPProfile and LbHttpProfile, etc are supported.   # noqa: E501

        :param application_profile_id: The application_profile_id of this LbVirtualServer.  # noqa: E501
        :type: str
        """
        if application_profile_id is None:
            raise ValueError("Invalid value for `application_profile_id`, must not be `None`")  # noqa: E501

        self._application_profile_id = application_profile_id

    @property
    def rule_ids(self):
        """Gets the rule_ids of this LbVirtualServer.  # noqa: E501

        Load balancer rules allow customization of load balancing behavior using match/action rules. Currently, load balancer rules are supported for only layer 7 virtual servers with LbHttpProfile.   # noqa: E501

        :return: The rule_ids of this LbVirtualServer.  # noqa: E501
        :rtype: list[str]
        """
        return self._rule_ids

    @rule_ids.setter
    def rule_ids(self, rule_ids):
        """Sets the rule_ids of this LbVirtualServer.

        Load balancer rules allow customization of load balancing behavior using match/action rules. Currently, load balancer rules are supported for only layer 7 virtual servers with LbHttpProfile.   # noqa: E501

        :param rule_ids: The rule_ids of this LbVirtualServer.  # noqa: E501
        :type: list[str]
        """

        self._rule_ids = rule_ids

    @property
    def max_new_connection_rate(self):
        """Gets the max_new_connection_rate of this LbVirtualServer.  # noqa: E501

        To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited.   # noqa: E501

        :return: The max_new_connection_rate of this LbVirtualServer.  # noqa: E501
        :rtype: int
        """
        return self._max_new_connection_rate

    @max_new_connection_rate.setter
    def max_new_connection_rate(self, max_new_connection_rate):
        """Sets the max_new_connection_rate of this LbVirtualServer.

        To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited.   # noqa: E501

        :param max_new_connection_rate: The max_new_connection_rate of this LbVirtualServer.  # noqa: E501
        :type: int
        """
        if max_new_connection_rate is not None and max_new_connection_rate < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_new_connection_rate`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_new_connection_rate = max_new_connection_rate

    @property
    def persistence_profile_id(self):
        """Gets the persistence_profile_id of this LbVirtualServer.  # noqa: E501

        Persistence profile is used to allow related client connections to be sent to the same backend server.   # noqa: E501

        :return: The persistence_profile_id of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._persistence_profile_id

    @persistence_profile_id.setter
    def persistence_profile_id(self, persistence_profile_id):
        """Sets the persistence_profile_id of this LbVirtualServer.

        Persistence profile is used to allow related client connections to be sent to the same backend server.   # noqa: E501

        :param persistence_profile_id: The persistence_profile_id of this LbVirtualServer.  # noqa: E501
        :type: str
        """

        self._persistence_profile_id = persistence_profile_id

    @property
    def client_ssl_profile_binding(self):
        """Gets the client_ssl_profile_binding of this LbVirtualServer.  # noqa: E501

        The setting is used when load balancer acts as an SSL server and terminating the client SSL connection   # noqa: E501

        :return: The client_ssl_profile_binding of this LbVirtualServer.  # noqa: E501
        :rtype: ClientSslProfileBinding
        """
        return self._client_ssl_profile_binding

    @client_ssl_profile_binding.setter
    def client_ssl_profile_binding(self, client_ssl_profile_binding):
        """Sets the client_ssl_profile_binding of this LbVirtualServer.

        The setting is used when load balancer acts as an SSL server and terminating the client SSL connection   # noqa: E501

        :param client_ssl_profile_binding: The client_ssl_profile_binding of this LbVirtualServer.  # noqa: E501
        :type: ClientSslProfileBinding
        """

        self._client_ssl_profile_binding = client_ssl_profile_binding

    @property
    def default_pool_member_port(self):
        """Gets the default_pool_member_port of this LbVirtualServer.  # noqa: E501

        default pool member port when member port is not defined.  # noqa: E501

        :return: The default_pool_member_port of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._default_pool_member_port

    @default_pool_member_port.setter
    def default_pool_member_port(self, default_pool_member_port):
        """Sets the default_pool_member_port of this LbVirtualServer.

        default pool member port when member port is not defined.  # noqa: E501

        :param default_pool_member_port: The default_pool_member_port of this LbVirtualServer.  # noqa: E501
        :type: str
        """

        self._default_pool_member_port = default_pool_member_port

    @property
    def ip_address(self):
        """Gets the ip_address of this LbVirtualServer.  # noqa: E501

        virtual server IP address  # noqa: E501

        :return: The ip_address of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this LbVirtualServer.

        virtual server IP address  # noqa: E501

        :param ip_address: The ip_address of this LbVirtualServer.  # noqa: E501
        :type: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def port(self):
        """Gets the port of this LbVirtualServer.  # noqa: E501

        Port setting could be single port for both L7 mode and L4 mode. For L4 mode, a single port range is also supported. The port setting could be a single port or port range such as \"80\", \"1234-1236\".   # noqa: E501

        :return: The port of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this LbVirtualServer.

        Port setting could be single port for both L7 mode and L4 mode. For L4 mode, a single port range is also supported. The port setting could be a single port or port range such as \"80\", \"1234-1236\".   # noqa: E501

        :param port: The port of this LbVirtualServer.  # noqa: E501
        :type: str
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbVirtualServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
